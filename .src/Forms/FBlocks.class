' Gambas class file

Private OldH As Integer
Private cEntitiesBlock As New Collection
Public Const ActionInsertionPoint As Integer = 1
Public Const ActionSelectEntities As Integer = 2

Public Sub Run()

    Me.SetFocus
    Done

End

Public Sub Form_Open()

    OldH = Me.H
    Dim sDirName As String

    For Each sDirName In Dir(Config.BlocksLibraryPath)
        If IsDir(Config.BlocksLibraryPath &/ sDirName) Then ComboBox1.Add(sDirName)
    Next
    If ComboBox1.Count > 0 Then ComboBox1.Index = 0

End

Public Sub form_Activate()

    'Me.H = OldH

End

Public Sub Done()

    Dim picTemp As New Image(picPreview.w, picPreview.h, Color.Black)
    Dim eSelected As Entity
    Dim i As Integer

    lblHelp.visible = False
    btnDone.Visible = False
    TabStrip1.Visible = True
    lblName.Visible = True
    cmbFamily.Visible = True
    cmbSubFamily.Visible = True
    txtName.Visible = True
    Me.H = OldH
    If Me.Action = Me.ActionInsertionPoint Then
        txtX.Text = Format(cadSelection.EndXr, "0.0000")
        txtY.Text = Format(cadSelection.Endyr, "0.0000")
    Else If Me.Action = Me.ActionSelectEntities Then
        ' intento recolectar las entidades y armar un dibujo
        i = cEntitiesBlock.Count
        For Each eSelected In gcd.Drawing.Sheet.EntitiesSelected
            Inc i

            cEntitiesBlock.Add(eSelected, Str(i))
        Next
        gcd.FitEntitiesToImage(cEntitiesBlock, picTemp, -1, 0)
        picPreview.Image = picTemp
    Endif

End

Public Sub ShrinkMe()

    Me.H = lblHelp.H + 16
    lblHelp.visible = True
    btnDone.Visible = True
    TabStrip1.Visible = False
    lblName.Visible = False
    cmbFamily.Visible = False
    cmbSubFamily.Visible = False
    txtName.Visible = False

End

Public Sub Parameters_Click()

    If Last.name = "btnDone" Then
        Done
    Else If Last.name = "btnInsertionPoint" Then
        lblHelp.Text = ("Set the insertion point")
        cadSelection.Mode = cadSelection.ModePointSelection
        gcd.clsJobCallBack = Me
        gcd.clsJob = cadSelection
        gcd.clsJob.start()
        Me.Action = Me.ActionInsertionPoint
        ShrinkMe

    Else If Last.name = "btnEntities" Then
        lblHelp.Text = ("Select entities for the new block")
        cadSelection.Mode = cadSelection.SelectModeEntities
        gcd.clsJobCallBack = Null
        gcd.clsJob = cadSelection
        gcd.clsJob.start()
        Me.Action = Me.ActionSelectEntities
        ShrinkMe
    Else If Last.name = "btnRemove" Then
        cEntitiesBlock.Clear
        picPreview.Image.Clear
        picPreview.Refresh
    Else If Last.name = "btnCreate" Then
        CreateBlock

    Endif

End

Public Sub CreateBlock()

    Dim tmpDrawing As New Drawing
    Dim sBlockName, sPath As String
    Dim tmpBlock As Block
    Dim tmpEnty As Entity
    Dim dX, dY As Float

    ' verifico q el nombre sea valido y no este en uso
    sBlockName = txtName.Text
    If sBlockName = "" Then
        Message.Error(("Block name is empty"))
        Return
    Endif
    For Each tmpBlock In gcd.Drawing.Blocks
        If TmpBlock.name = sBlockName Then
            Message.Error(("Block name is in use"))
            Return
        Endif
    Next

    ' si lo voy a exportar, verifico que el archivo no exista
    If chkExportToDatabase.Value = True Then
        sPath = Config.BlocksLibraryPath
        If cmbFamily.Text <> "" Then sPath &/= cmbFamily.Text
        If cmbSubFamily.Text <> "" Then sPath &/= cmbSubFamily.Text
        sPath &/= sBlockName & ".dxf"
        If Exist(sPath) Then
            Message.Error(("Block already exist in the database, use another name"))
            Return
        Endif
    Endif

    ' proceso las entidades de acuerdo a las opciones elegidas
    If chkExplode.Value = True Then
        For Each tmpEnty In cEntitiesBlock
            If tmpEnty.pBlock Then
                cadExplode.explode_list(tmpEnty.pBlock.entities, tmpEnty, cEntitiesBlock)
                'tmpEnty.pBlock = Null
                cEntitiesBlock.Remove(cEntitiesBlock.Key)
            End If
        Next
    Endif

    If chkIncludeData.Value = False Then
        For Each tmpEnty In cEntitiesBlock
            tmpEnty.pLayer = gcd.Drawing.Layers[gcd.Drawing.Layers.First]
            tmpEnty.pDimStyle = gcd.Drawing.DimStyles[gcd.Drawing.DimStyles.First]
            tmpEnty.LineType = gcd.Drawing.LineTypes[gcd.Drawing.LineTypes.First]
            tmpEnty.Colour = 0
        Next
    Endif

    Try dX = Val(txtX.Text)
    Try dY = Val(txtY.Text)
    tmpBlock = New Block
    tmpBlock.entities = New Collection

    For Each tmpEnty In cEntitiesBlock
        TmpBlock.entities.Add(tmpEnty, gcd.NewId())
    Next
    ' ' y agregamos la entidad ENDBLK
    ' tmpEnty = New Entity
    ' tmpEnty = cadEndBlk.NewEntity()
    ' TmpBlock.entities.Add(tmpEnty, gcd.NewId())

    tmpBlock.name = sBlockName
    ' muevo las entidades al punto de insercion
    For Each tmpEnty In tmpBlock.entities
        Gcd.CCC[tmpEnty.gender].translate(tmpEnty, -dx, -dy)
    Next

    tmpBlock.handle = gcd.NewId()

    ' ahora agrego el Block al dibujo actual
    gcd.Drawing.Blocks.Add(tmpBlock, tmpBlock.handle)

    ' si lo voy a exportar, verifico que el archivo no exista
    If chkExportToDatabase.Value = True Then

        tmpDrawing.Sheet.Entities = cEntitiesBlock
        If Not chkExplode.Value Then ' tengo que grabar los bloques tambien
            For Each tmpEnty In cEntitiesBlock
                If (tmpEnty.Gender = "INSERT") Or (tmpEnty.Gender Like "DIM*") Then
                    tmpDrawing.Blocks.Add(gcd.Drawing.Blocks[tmpEnty.pBlock.name], tmpEnty.pBlock.handle)
                Endif
            Next

        Endif
        dxf.SaveFile(sPath, tmpDrawing, True, True, chkIncludeData.Value, Not chkExplode.Value)
    End If

    Me.Close

End

Public Sub ComboBox1_Click()

    Dim sFilename As String
    Dim imgPreview As Image

    icvLibrary.Clear
    ComboBox2.Clear
    For Each sFilename In Dir(Config.BlocksLibraryPath &/ ComboBox1.Current.Text)
        If IsDir(Config.BlocksLibraryPath &/ ComboBox1.Current.Text &/ sFilename) Then
            ComboBox2.Add(sFilename)
        Else
            If LCase(File.Ext(sFilename)) <> "dxf" Then Continue
            imgPreview = New Image(80, 80, Color.Black)

            gcd.FitDxfToImage(Config.BlocksLibraryPath &/ ComboBox1.current.Text &/ sFilename, imgPreview, Config.WhiteAndBlack, 0)

            icvLibrary.Add(Left$(sFilename, -4), Left$(sFilename, -4), imgPreview.Picture)
        End If
    Next
    If ComboBox2.Count > 0 Then ComboBox2.Index = 0

End

Public Sub ComboBox2_Click()

    icvLibrary.Clear
    Dim sFilename, sPath As String
    Dim imgPreview As Image
    For Each sFilename In Dir(Config.BlocksLibraryPath &/ ComboBox1.Current.Text &/ ComboBox2.Current.Text, "*.dxf")
        If IsDir(Config.BlocksLibraryPath &/ ComboBox1.Current.Text &/ ComboBox2.Current.Text &/ sFilename) Then Continue
        If LCase(File.Ext(sFilename)) <> "dxf" Then Continue
        '     ComboBox2.Add(sFilename)
        ' Else
        imgPreview = New Image(80, 80, Color.Black)
        sPath = Config.BlocksLibraryPath &/ ComboBox1.current.Text &/ ComboBox2.Current.Text &/ sFilename
        gcd.FitDxfToImage(sPath, imgPreview, Config.WhiteAndBlack, 0)

        icvLibrary.Add(Left$(sFilename, -4), Left$(sFilename, -4), imgPreview.Picture)

    Next

End

Public Sub TabStrip1_Click()

    Select Case TabStrip1.Index
        Case 0  ' block maker

        Case 1  'block insertion

            LoadBlocksInUse

        Case 2  ' block library
            If icvLibrary.Item Then
                If icvLibrary.Item.Selected Then btnAddToDrawing.Enabled = True Else btnAddToDrawing.Enabled = False
            End If

    End Select

End

Public Sub chkShowHiddenBlocks_Click()

    LoadBlocksInUse

End

Public Sub LoadBlocksInUse()

    Dim imgPreview As Image
    Dim blkTemp As Block

    icvBlocksInUse.Clear
    For Each blkTemp In gcd.Drawing.Blocks

        ' verifico si tengo que mostrar los que estan en uso
        If Left(blkTemp.name, 1) = "*" Then
            If chkShowHiddenBlocks.Value = False Then Continue
        Endif

        imgPreview = New Image(80, 80, Color.Black)

        gcd.FitEntitiesToImage(blkTemp.entities, imgPreview, Config.WhiteAndBlack, 0)

        icvBlocksInUse.Add(blkTemp.name, blkTemp.name, imgPreview.Picture)

    Next
    btnInsertToDrawing.Enabled = False

End

Public Sub btnAddToDrawing_Click()

    Dim icvItem As _iconview_item
    Dim sPath, sNewName As String
    Dim iRest As Integer
    Dim i, iItem As Integer
    Dim InUse As Boolean

    Dim blkNew, blkTemp As Block

    icvLibrary.MoveFirst
    For iItem = 0 To icvLibrary.Count
        icvItem = icvLibrary.Item
        If Not icvItem Then Break
        If icvItem.Selected Then
            sPath = Config.BlocksLibraryPath &/ ComboBox1.current.Text &/ ComboBox2.Current.Text &/ icvItem.Text & ".dxf"
            ' busco que no exista
            sNewName = icvItem.Text
            For Each blkTemp In gcd.Drawing.Blocks
                If blkTemp.name = icvItem.Text Then
                    iRest = Message.Question(("The block is already in use, you can:"), ("Replace"), ("Rename"), ("Cancel"))
                    If iRest = 2 Then
                        InUse = True
                        Break
                    Else If iRest = 1 Then
                        ' we search for anothee name
                        For i = 0 To 10000
                            sNewName = icvItem.Text & Str(i)
                            InUse = False
                            For Each blkNew In gcd.Drawing.Blocks
                                If sNewName = blkNew.name Then InUse = True
                            Next
                            If Not InUse Then Break
                        Next

                    Else    ' LO VAMOS A REEMPLAZAR
                        For Each blkNew In gcd.Drawing.Blocks
                            If blkNew.name = sNewName Then
                                gcd.Drawing.Blocks.Remove(gcd.Drawing.Blocks.Last)
                            Endif
                        Next

                    Endif
                Endif
            Next
            ' y ahora lo agregamos
            If Not InUse Then AddBlock(sPath, sNewName, gcd.Drawing.Blocks) 'GoSub AddBlock

        Endif
        icvLibrary.MoveNext
    Next
    Return

    ' cargo el archivo
    ' AddBlock:
    '     drwTemp = New Drawing
    '     dxf.LoadFile(sPath, drwTemp,,,,, True)
    '     ' todo el dibujo sera un bloque
    '     blkNew = New Block
    '     blkNew.name = sNewName
    '     blkNew.entities = New Collection
    '     blkNew.handle = gcd.NewHandle()
    '     For Each eBlockl In drwTemp.oEntities
    '         blkNew.entities.Add(eBlockl, gcd.NewHandle())
    '     Next
    '     ' y agregamos la entidad ENDBLK
    '     eBlockl = New Entity
    '     eBlockl = cadEndBlk.NewEntity()
    '     blkNew.entities.Add(eBlockl, gcd.NewHandle())
    '
    '     ' ahora que el bloque esta conformado, lo agregamos el dibujo actual
    '     gcd.Drawing.oBlocks.Add(blkNew, blkNew.handle)    ' TODO: verificar si no necesito una HANDLE
    '
    '     Return

End

Public Sub AddBlock(sPath As String, sBlockName As String, sContainer As Collection) As Boolean

    Dim drwTemp As Drawing, blkNew As Block, eBlockl As Entity

    drwTemp = gcd.NewDrawing(sPath)
    dxf.LoadFile(sPath, drwTemp,,,,, True)
    ' todo el dibujo sera un bloque

    blkNew = New Block
    blkNew.name = sBlockName
    blkNew.entities = New Collection
    'depre blkNew.handle = gcd.NewHandle()
    For Each eBlockl In drwTemp.model.Entities
        blkNew.entities.Add(eBlockl, gcd.NewId())
    Next
    ' ' y agregamos la entidad ENDBLK
    ' eBlockl = New Entity
    ' eBlockl = cadEndBlk.NewEntity()
    ' blkNew.entities.Add(eBlockl, gcd.NewId())

    ' ahora que el bloque esta conformado, lo agregamos el dibujo actual
    sContainer.Add(blkNew, blkNew.name)    ' TODO: verificar si no necesito una HANDLE

End

Public Sub icvLibrary_Click()

    If icvLibrary.Current Then
        If icvLibrary.Current Then btnAddToDrawing.Enabled = True Else btnAddToDrawing.Enabled = False
    Endif

End

Public Sub form_KeyPress()

    ' If Key.Code = Key.Down Then
    '     icvLibrary.MoveNext
    '     Debug icvLibrary.Item.Text
    ' End If

End

Public Sub btnRemoveFromDrawing_Click()

    ' primero busco a ver si tengo algun Insert de este bloque
    Dim e As Entity, s As Sheet
    Dim InUse As Boolean

    If Not icvBlocksInUse.Current Then Return
    For Each s In gcd.Drawing.Sheets
        For Each e In s.Entities
            If e.pBlock Then
                If e.pBlock.name = icvBlocksInUse.Current.Text Then
                    Message.Error(("There is an Insert using this Block, can't be removed"))
                    InUse = True
                    Break

                Endif
            Endif
        Next
        If InUse Then Break
    Next

    If Not InUse Then
        gcd.Drawing.Blocks.Remove(icvBlocksInUse.Current.Key)
        icvBlocksInUse.Remove(icvBlocksInUse.Current.Key)
    Endif
    icvBlocksInUse.Refresh

End

Public Sub btnInsertToDrawing_Click()

    ' voy a insertar
    Dim fScale, fRot As Float
    Dim iItem As Integer

    Try fScale = Val(txtScale.Text)
    If fScale = 0 Then fScale = 1

    Try fRot = Val(txtRotation.Text)

    icvBlocksInUse.MoveFirst
    For iItem = 0 To icvBlocksInUse.Count

        If Not icvBlocksInUse.Item Then Break
        If icvBlocksInUse.Item.Selected Then
            ' si aqui pongo cadBlocks.SetInsert la entidad se crea en otra instancia de cadBlocks y no la veo mas
            gcd.clsJob.SetInsert(icvBlocksInUse.Item.text, fScale, fRot, chkInvert.Value)
            Break
        End If
        icvBlocksInUse.MoveNext
    Next
    Me.Hide

End

Public Sub icvBlocksInUse_Select()

    btnInsertToDrawing.Enabled = True

End

Public Sub icvLibrary_DblClick()

    ' equivale a "Add to drawing"
    btnAddToDrawing_Click
    TabStrip1.Index = 1

End

Public Sub icvBlocksInUse_DblClick()

    btnInsertToDrawing_Click

End
