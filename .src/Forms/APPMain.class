' Gambas class file

' Gambas module file

' RADG
' Rapid Application Development for Gambas
'
' Copyright (C) Martín Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'
' Variables que se pasaron desde el módulo de inicio
Public Observer As Observer         '' Observer used to notify if there are changes not applied.
Private cex As New Collection       '' Basic variables to pass to the other forms.
Private adi As String               '' Program Directory.
Private dbc As String               '' Database configuration file.
Private apc As String               '' Program configuration file.
Private etx As String               '' Default plain text editor.
Private lgg As Logger               '' Application event log.
'------------------------------------------------------------------------------

'Variables del formulario
'Public CurrentDrawing As FCAD                '' CAD Editor

Public CurrentForm As Form
Public CurrentFile As String

Public CursorX As Integer
Public CursorY As Integer

Public KeysAccumulator As String
Public TmrTicks As Integer

Public SelectingColor As Boolean    '' Selecting Color
Public CurrentColor As Integer
Public imgColor As Image

Public SelectingLayer As Boolean    '' Selecting Layer
Public CurrentLayer As String = "0"

Public SelectingLtype As Boolean    '' Selecting Linetype
Public CurrentLtype As Integer

Public SelectingWidth As Boolean    '' Selecting width
Public CurrentWidth As Integer

Public EditingText As Boolean       '' Editing Text value
Public CurrentText As String

'Public SelectedWidth As Boolean

'Private PropertiesFlag As Boolean = False
Private PropertiesFlag As Boolean = True
Private RawFlag As Boolean = False

'variables de ambiente
Public flgShowInspector As Boolean = True
Public flgSearchingEntity As Boolean = False  ' impide cuellos de botellla
Public flgSearchingPOI As Boolean

Public HistoCom As New String[]     '' Commands history

Public cMod As New Collection       '' All drawings common collection
Public cProp As New Collection      '' Properties list
Public cRaw As New Collection       '' Raw properties list
Private iTheme As Integer           '' Theme luminance (determine if Dark or Light)
'Private LSelect As String           '' Last Section selected


Public Sub Run(cin As Collection)


  Me.Show()

End



Public Sub Form_Open()

  Dim n As Integer
  Dim b As Integer
  Dim x As Integer

  For n = 0 To Screens.Count - 1
    If Screens[n].AvailableWidth > b Then
      b = Screens[n].AvailableWidth
      x = n
    Endif
  Next

  Me.x = Screens[x].AvailableX
  Me.y = Screens[x].AvailableY

  gTask("new")

  Me.Maximized = True

End

Public Sub Form_Activate()

  GLplus.Init(glarea1)

End

Public Sub glarea1_Resize()

  GLplus.Resize(glarea1)

End



Public Sub entity_Click()

  ' vamos a mejorar esto
  ' veo que estoy haciendo
  If gcd.clsJob.Gender = "Default" Then ' estoy seleccionando

    gcd.clsJob.KeyText(Last.Tag)

  Else ' If gcd.clsJob = clsEntityBuilder Then ' esoy dibjando algo, debo cancelar

    gcd.clsJob.Cancel()
    gcd.clsJob = clsDefaultJob
    gcd.clsJob.KeyText(Last.Tag)

  End If

End

Public Sub tool_Click()

  gcd.clsJob.KeyText(Last.Tag)

End

Public Sub menuapp_Click()

  gTask(Last.Tag)

End

Public Sub view_Click()

  gcd.clsJob.KeyText(Last.Tag)

End

Public Sub gTask(sTask As String)

  Dim s As String
  'Dim cModel As New Collection
  Dim ctn As New Collection
  Dim cfg As New Collection


  Dim wtag As String

  'Dim stx As New String[]
  'Dim FilePath As String            ''Nombre del archivo que se abrira
  'Dim FileExt As String
  'Dim FileDef As String
  'Dim i As Integer
  'Dim template As Boolean
  Dim NewDrawing As ClsDrawing
  'Dim FileTmp As String
  ' Saving as json / dwg
  'Dim Content As String             '' JSON content file
  'Dim tag As String
  'Dim vrt As Variant
  'Dim sRewrite As String
  'Dim FileTest As String
  Dim f, fDxf, fBak As String
  Dim fMinimal As String = "./minimal/minimal-2010.dxf"
  'Dim mnu As Menu
  'Dim grp As Menu
  'Dim mdwg As Menu
  Dim fx As String[]
  Dim fbas As String
  Dim t As String
  'Dim cObjects As Variant
  'Dim ob As Variant
  'Dim et As Variant
  'Dim iColor As Variant

  '' if the drawing is drawingX.xml, drawingX.gcad where X is a integer number then the Ssave is changed to Save As

  Select sTask

    Case "new"

      NewDrawing = New ClsDrawing
      gcd.Drawings.Add(NewDrawing)
      gcd.CurrentDrawing = gcd.Drawings.Last
      gcd.CurrentDrawing.FileName = User.Home &/ "drawing1.dxf"
      dxf.LoadFile(fMinimal, gcd.CurrentDrawing.cModel)
      gcd.CurrentDrawing.cEntities = gcd.CurrentDrawing.cModel["ENTITIES"]
      gcd.CurrentDrawing.cBlocks = gcd.CurrentDrawing.cModel["BLOCKS"]
      gcd.CurrentDrawing.cHeader = gcd.CurrentDrawing.cModel["HEADER"]
      gcd.CurrentDrawing.cLayers = gcd.CurrentDrawing.cModel["TABLES"]["LAYER"]
      gcd.CurrentDrawing.cLtypes = gcd.CurrentDrawing.cModel["TABLES"]["LTYPE"]
      gcd.CurrentDrawing.HandSeed = gcd.iHeader("$HANDSEED")


      Me.Text = f


    Case "open"
      fx = dsk.FileChooser(Settings["LastDir", User.Home], ["dwg", "json", "dxf"])
      If fx.Count > 0 Then
        f = fx[0]
        If Exist(f) Then
          If Stat(f).Type = gb.File Then
            Select Lower(File.Ext(f))
              Case "dwg"

                NewDrawing = New ClsDrawing
                gcd.Drawings.Add(NewDrawing)
                gcd.CurrentDrawing = gcd.Drawings.Last
                gcd.CurrentDrawing.FileName = f
                dxf.LoadFile(fMinimal, gcd.CurrentDrawing.cModel)

                fMain.Mouse = Mouse.Wait
                Application.Busy = 1
                fDxf = dxf.DWGtoDXF(f)

                gcd.CurrentDrawing.RequiresFileRename = True

                dxf.LoadFile(fDxf, gcd.CurrentDrawing.cModel, False, False, False)
                gcd.CurrentDrawing.cEntities = gcd.CurrentDrawing.cModel["ENTITIES"]
                gcd.CurrentDrawing.cBlocks = gcd.CurrentDrawing.cModel["BLOCKS"]
                gcd.CurrentDrawing.cHeader = gcd.CurrentDrawing.cModel["HEADER"]
                gcd.CurrentDrawing.cLayers = gcd.CurrentDrawing.cModel["TABLES"]["LAYER"]
                gcd.CurrentDrawing.cLtypes = gcd.CurrentDrawing.cModel["TABLES"]["LTYPE"]
                gcd.CurrentDrawing.HandSeed = gcd.iHeader("$HANDSEED")


                gcd.UpdateGraphics

                ' modelo recien cargado
                cadZoomE.Start()                                ' por ahora mostramos el dibujo centrado, hasta q leamos el estado anterior

                Me.Text = f


                Application.Busy = 0
                fMain.Mouse = Mouse.Arrow
              Case "dxf"

                NewDrawing = New ClsDrawing
                gcd.Drawings.Add(NewDrawing)
                gcd.CurrentDrawing = gcd.Drawings.Last
                dxf.LoadFile(fMinimal, gcd.CurrentDrawing.cModel)

                gcd.CurrentDrawing.FileName = f

                gcd.CurrentDrawing.RequiresFileRename = False

                dxf.LoadFile(f, gcd.CurrentDrawing.cModel, False, False, False)
                gcd.CurrentDrawing.cEntities = gcd.CurrentDrawing.cModel["ENTITIES"]
                gcd.CurrentDrawing.cBlocks = gcd.CurrentDrawing.cModel["BLOCKS"]
                gcd.CurrentDrawing.cHeader = gcd.CurrentDrawing.cModel["HEADER"]
                gcd.CurrentDrawing.cLayers = gcd.CurrentDrawing.cModel["TABLES"]["LAYER"]
                gcd.CurrentDrawing.cLtypes = gcd.CurrentDrawing.cModel["TABLES"]["LTYPE"]
                gcd.CurrentDrawing.HandSeed = gcd.iHeader("$HANDSEED")

                gcd.UpdateGraphics

                cadZoomE.Start()                                ' por ahora mostramos el dibujo centrado, hasta q leamos el estado anterior

                Me.Text = f



            End Select
          Endif
        Endif
      Endif

    Case "save"
      ' en este momento solo podemos guardar DXF, en caso que el archivo abierto
      ' sea un DWG llamamos a SaveAs


      '   s = dwg.Encode(gcd.CurrentDrawing.vrxMod)
      f = gcd.CurrentDrawing.FileName
      '   t = "/tmp/tmp.json"
      fbas = File.Dir(f) &/ File.BaseName(f)
      fBak = "'" & fbas & ".bak'"
      If File.Ext(f) = "dwg" Or gcd.CurrentDrawing.RequiresFileRename Then
        Me.gTask("saveas")
        Return
      Else
        If Exist(f) Then
          If Exist(fBak) Then Shell "rm " & fBak Wait
          Shell "mv '" & f & "' '" & fbas & ".bak'" Wait
        End If

        Dxf.SaveFile(f, gcd.CurrentDrawing.cModel)

      Endif


    Case "saveas"
      ' s = dwg.Encode(gcd.CurrentDrawing.cModel)
      f = gcd.CurrentDrawing.FileName
      fbas = File.Dir(f) &/ File.BaseName(f)
      fBak = "'" & fbas & ".bak'"
      'fx = dsk.FileChooser(Settings["LastDir", User.Home], ["dwg"])
      Dialog.Filter = ["*.dxf", "DXF Drawing exchange 2010"]
      Dialog.SaveFile()
      If Dialog.Path Then
        f = Dialog.Path
        If Exist(f) Then
          If Message.Question(("The file exist"), ("Replace"), ("Cancel")) = 2 Then
            f = ""
          Endif
        Endif
      Else
        f = ""
      Endif

      If f = "" Then
        Print "Cancel"
      Else

        If LCase(File.Ext(f)) <> "dxf" Then f &= ".dxf"

        If Exist(f) Then
          If Exist(fBak) Then Shell "rm " & fBak Wait
          Shell "mv '" & f & "' '" & fbas & ".bak'" Wait
        End If

        Dxf.SaveFile(f, gcd.CurrentDrawing.cModel)
        gcd.CurrentDrawing.FileName = f
        Me.Text = f


      Endif

  End Select

End

