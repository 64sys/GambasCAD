' Gambas class file

'------------------------------------------------------------------------------

'Variables del formulario

Public currentFile As String

Public CursorX As Integer
Public CursorY As Integer

Public KeysAccumulator As String
Public TmrTicks As Integer

'Public SelectedWidth As Boolean

'Private PropertiesFlag As Boolean = False
Private PropertiesFlag As Boolean = True
Private RawFlag As Boolean = False

'variables de ambiente
Public flgShowInspector As Boolean = False

Public flgShowingLayers As Boolean

Public flgWheelCounter As Integer

Public $hDrawTimer As New Timer As "DrawTimer"
' Block insertion vars
Public fBlockScaleX As Float = 1
Public fBlockScaleY As Float = 1
Public fBlockDegRotation As Float = 0

Public GridSpacing As Float = 0.5
Public GridActive As Boolean = False         ' use with F7: 0 = no grid, 1 = dots, 2 = lines

'' Printing stuff
Public MyPrinter As Printer

Public ftring As New Float[]
Public ftring2 As New Float[]

Public Sub DrawTimer_Timer()

    Dim dx As Single, dy As Single
    Dim EjeX As Single, ejeY As Single, ejeZ As Single

    ' If mouDown Then
    '     If paneando Then
    '
    '         With modGraphics
    '             'ademas intento un zoom dinamico, si el mouse esta lejos del centro, atrae los graficos hacia el
    '             GLCam.StrafeRight((mouDownX - MouseX) * 0.001 * modgraphics.maxmax)
    '             GLCam.MoveUpward(-(mouDownY - Mousey) * 0.001 * modgraphics.maxmax)
    '             'Debug .pan.x, .pan.y, .escala
    '         End With
    '     Else If rotando Then
    '
    '         'veo para donde mueve el mouse con respenco a la posicion 2D del CG
    '
    '         dy = -(mouDownX - MouseX) * 0.075 '* mouDownXCG
    '         dx = -(mouDownY - MouseY) * 0.075 '* mouDownYCG
    '
    '         ' con esto la rotacion se hace de un eje a la vez
    '         If Abs(dy) > Abs(dx) Then
    '
    '             GLCam.RotateY(dy)
    '
    '         Else
    '
    '             GLCam.RotateX(dx)
    '
    '         End If
    '
    '     End If
    '
    '     'modGraphics.dibujar_estructura3D
    '
    '     mouDownX = Mouse.x
    '     mouDownY = Mouse.y
    '
    ' Else If mouWheel Then
    '
    '     GLCam.moveforward(mouDelta * modgraphics.maxmax / 20)
    '
    '     mouDelta = 0
    '     mouWheel = False
    '
    ' End If

    glarea1.Refresh

    '

End Sub

Public Sub Run() As Boolean

    ' acomodo el tamanio de los controles
    Me.tblLineWt.w = 128
    Me.tblLTypes.w = 128
    Me.mbtColors.w = 128
    Me.cmbDimStyle.w = 128
    Me.grdLayers.w = 146
    Me.Menus.Hide
    'Me.tbnLayersOnScreen.w = 96
    Me.TabPanel1[0].Visible = Config.ShowConsoleTab

    'PanelBlockFit.Visible = False 'ag = CStr(PanelBlockFit.h)
    'PanelBlockFit.h = 0

    fMain.grdLayers.Rows.Count = 1
    fMain.grdLayers.Columns.Count = 5
    'fMain.grdLayers.Rows[0].Height = 32
    fMain.grdLayers.Rows.Height = 28
    fMain.grdLayers[0, 1].Alignment = Align.Left
    fMain.grdLayers[0, 2].Alignment = Align.Left
    fMain.grdLayers[0, 3].Alignment = Align.Left
    fMain.grdLayers[0, 4].Alignment = Align.Left
    fMain.grdLayers.Columns[0].w = 18 ' color
    fMain.grdLayers.Columns[1].w = 18 ' color
    fMain.grdLayers.Columns[2].w = 18 ' color
    fMain.grdLayers.Columns[3].w = 18 ' color
    fMain.grdLayers.Columns[4].w = 72 ' color

    fLayersOnScreen.Move(Me.grdLayers.x, Me.grdLayers.y + Me.grdLayers.h + 1)

    ' tblLines.AddToolButton("tblLine",, Picture.Load(main.Params["Dirs/PNG", gcd.dirResources &/ "png/48x48"] &/ "line.png"), "cadLine")
    ' tblLines.AddToolButton("tblLWPolyline",, Picture.Load(main.Params["Dirs/PNG", gcd.dirResources &/ "png/48x48"] &/ "hexagon.png"), "cadlwpolyline")
    '
    ' tblLines.AddToolButton("tblText",, Picture.Load(main.Params["Dirs/PNG", gcd.dirResources &/ "png/"] &/ "Copy.png"), "cadText")

    tblLines.AddToolButton("tbnLine",, Picture.Load("/home/martin/GambasCAD/png/line.png"), "cadLine")
    tblLines.AddToolButton("tbnRay",, Picture.Load("/home/martin/GambasCAD/png/ray.png"), "cadRay")


    tblCircles.AddToolButton("tbncircle",, Picture.Load("/home/martin/GambasCAD/png/circle3.png"), "cadcircle")
    tblCircles.AddToolButton("tbnellipse",, Picture.Load("/home/martin/GambasCAD/png/ellipse full.png"), "cadellipse")
    tblCircles.AddToolButton("tbnarc",, Picture.Load("/home/martin/GambasCAD/png/Arc.png"), "cadarc")
    'tblCircles.AddToolButton("tbncircle",, Picture.Load("/home/martin/GambasCAD/png/circle3.png"), "cadcircle")
    
    '
    ' ' Armo la barra Inquiry
    '
    ' tblInquiry.AddToolButton("tblArea", "A",, "cadarea")
    ' tblInquiry.AddToolButton("tblRuler", "R",, "cadruler")
    ' tblInquiry.AddToolButton("tblProtracto", "P",, "cadprotractor")

    Action_Activate("file_new")

    tmrAutosave.Delay = config.AutoSaveDelayMin * 1000 * 60
    'tmrAutosave.Enabled = True

    ' FIXME: en GTK no se puede cambiar el color del background de textboxes
    'Me.txtCmd.Background = Color.White
    Me.Visible = False

    LeerRecientes

    Me.Show()
    Wait
    Me.Visible = True
    glPlus.ClearColor(Config.BackgroundColor)

End

Public Sub Printer1_Draw()

    Dim i As Integer
    Dim flxLimits As New Float[]
    Dim scaleX, scaleY As Float
    Dim PSY As PrintStyle

    '  Dim jPrint As New JSONCollection
    PSY = gcd.currentDrawing.CurrPrintStyle
    Printer1.FullPage = True

    ' DETERMINO LO QUE HAY QUE IMPRIMIR
    If PSY.PrintArea = 0 Then ' all drawing

        flxLimits = clsEntities.ComputeLimits(gcd.currentDrawing.oEntities)

        PSY.PrintAreaX0 = flxLimits[0]
        PSY.PrintAreaY0 = flxLimits[1]
        PSY.PrintAreaX1 = flxLimits[2]
        PSY.PrintAreaY1 = flxLimits[3]

    Else If PSY.PrintArea = 1 Then ' viewport

        PSY.PrintAreaX0 = gcd.Xreal(0)
        PSY.PrintAreaY0 = gcd.Yreal(0)
        PSY.PrintAreaX1 = gcd.Xreal(Me.GLArea1.Width)
        PSY.PrintAreaY1 = gcd.Yreal(Me.GLArea1.h)

    Else

        ' nada porque ya estan seteados

    End If

    Debug "Printing"

    ' '==============================TEST 1==========================================
    ' ' De no mediar escalado y centrado, la impresion ocurrente entre
    '
    ' '   0,0 +-------------------------------+
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       +-------------------------------+ Paint.W, Paint.H (ambos positivos)
    '
    ' '   Pero en OpenGL (y por ende las coordenadas de los dibujos)
    ' '       +-------------------------------+ Xmax,Ymax
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       |               x1,y1-----x2,y2 |
    ' '       +-------------------------------+
    '

    '==============================ACTUAL PRINT==========================================

    Paint.Reset ' vuelvo escalas y traslados a cero

    ' APLICO LA ESCALA

    If PSY.PrintScale = -1 Then ' fit to page

        Paint.Translate(Paint.W / 2, Paint.H / 2) ' centro el dibujo
        ' trato de meter centrado
        If (PSY.PrintAreaX1 - PSY.PrintAreaX0) > 1e-10 Then scaleX = Paint.w / (PSY.PrintAreaX1 - PSY.PrintAreaX0) Else scaleX = 1e10
        If (PSY.PrintAreaY1 - PSY.PrintAreaY0) > 1e-10 Then scaleY = Paint.H / (PSY.PrintAreaY1 - PSY.PrintAreaY0) Else scaleY = 1e10

        If ScaleX < ScaleY Then gcd.PrintingScale = ScaleX Else gcd.PrintingScale = Scaley
        Paint.Scale(gcd.PrintingScale * 0.85, -gcd.PrintingScale * 0.85)

        ' centro el dibujo
        Paint.Translate(-(PSY.PrintAreaX1 + PSY.PrintAreaX0) / 2, -(PSY.PrintAreaY1 + PSY.PrintAreaY0) / 2)
    Else ' tengo que aplicar cierta escala

        gcd.PrintingScale = PSY.PrintScale

    End If

    Dim L As Layer, E, E2 As Entity
    For Each L In gcd.currentDrawing.oLayers
        If L.Visible Then
            For Each E2 In L.Entities
                If Not e2.Visible Then Continue
                If PSY.PrintArea <> 0 Then E = clsEntities.TrimmedEntity(E2, PSY.PrintAreaX0, PSY.PrintAreaY0, PSY.PrintAreaX1, PSY.PrintAreaY1) Else e = e2
                If IsNull(e) Then Continue
                If e.LineWidth = 0 Then e.LineWidth = 1
                ' If jPrint.Exist("Monochrome") Then
                '   If jPrint["Monochrome"] Then
                '     e.colour = 255
                '   Endif
                ' Endif
                Paint.Brush = Paint.Color(Color.Black)

                ' TODO: aplicar las puntas segun color de la entidad
                Paint.LineWidth = e.LineWidth / gcd.PrintingScale
                Paint.Save  ' guardamos la matriz de transformacion por si la entidad la modifica
                If InStr("Text MText Attrib Attdef", e.Gender) Then
                    paint.Font.Size = Abs(e.fParam[cadText.ipaTextHeight] / gcd.PrintingScale * 2)   ' TODO: verificar
                End If

                e.ClassHandler.draw2(e)
                Paint.Restore ' restauramos la matriz
            Next
        End If
    Next

    gcd.debuginfo("Print done")

End
' Public Sub Printer1_Draw()
'
'     Dim i As Integer
'     Dim flxLimits As New Float[]
'     Dim scaleX, scale, scaleY As Float
'
'     flxLimits = clsEntities.ComputeLimits(gcd.currentDrawing.arrEntities, True)
'
'     Debug "Printing"
'
'     ' trato de meter centrado
'     scaleX = (flxLimits[2] - flxLimits[0]) / Paint.w 'Printer1.PaperWidth
'     scaleY = (flxLimits[3] - flxLimits[1]) / Paint.h 'Printer1.PaperHeight
'
'     If scaleX > scaleY Then Scale = scaleX Else Scale = scaley
'
'     Paint.Scale(1 / scale, -1 / scale)
'     Paint.Translate(0, -1 * (flxLimits[3] - flxLimits[1]))
'     For i = 0 To gcd.currentDrawing.arrLayers.Max
'         If gcd.currentDrawing.arrLayers[i].Visible Then
'             For Each e As Entity In gcd.currentDrawing.arrLayers[i].Entities
'                 e.ClassHandler.draw2(e)
'             Next
'         End If
'     Next
'
'     Debug "Print done"
'
' End

Public Function Action_Activate(sAction As String) As Boolean
    ' Acciones de los botones y los menús (para no repetir código)
    ' El string de la acción es una propiedad de cada botón o menú
    ' El código que se ejecuta lo hace dentro de la rutina llamada, nunca dentro de este mismo evento.

    Dim r As Float
    Dim NewDrawing As Drawing
    Dim f, fDxf, fBak As String
    'Dim fMinimal As String = "./minimal/minimal-2010.dxf"
    Dim fMinimal As String = "./minimal/minimal.dxf"
    Dim fx As String[]
    Dim fbas As String
    Dim sWName As String
    Dim t As String
    Dim iColor, i As Integer
    Dim imgCirculito As Image
    Dim clsJob As String
    Dim d As Drawing
    Dim sActionParams As String[]

    Try gcd.debuginfo(Last.name)

    Select Case LCase(sAction)

        Case "config"

            fOptions.ShowModal
            Me.TabPanel1[0].Visible = Config.ShowConsoleTab
            glPlus.ClearColor(Config.BackgroundColor)

        Case "exit"

            actions.ExitProgram

        Case "regen"

            gcd.Regen

        Case "pdf_export"

            If Printer1.Configure() Then Return
            Printer1.Print
        Case "print"

            If Not gcd.currentDrawing.CurrPrintStyle Then gcd.currentDrawing.CurrPrintStyle = New PrintStyle
            i = fPrint.ShowModal()
            If i = 1 Then

                Printer1.Print
            Else If i = 0 Then
                gcd.debugInfo("Print cancelled")

            Else If i = 2 Then
                gcd.debugInfo("Selecting what to print")

            End If

            ' vemos si hay q imprimir algo

        Case "undo"
            gcd.currentDrawing.uUndo.DoUndo()
            gcd.Regen

        Case "about"
            i = fAbout.ShowModal()

            ' Case "redo"
            '     gcd.currentDrawing.uUndo.DoRedo()
            '     gcd.Regen
        Case "window_close"
            For i = 0 To gcd.Drawings.Count
                If gcd.Drawings[i] = gcd.currentDrawing Then
                    gcd.Drawings.Remove(i)
                    If gcd.Drawings.Count > 0 Then
                        gcd.currentDrawing = gcd.Drawings[0]
                        Redraw
                    Else

                        Action_Activate("file_new")
                    Endif
                    Break
                End If

            Next

        Case "window_closeall"
            gcd.Drawings.Clear
            Action_Activate("file_new")

        Case Like "windowchange_*"



            sWName = Mid(sAction, 14)

            For Each d In gcd.Drawings
                If sWName = d.FileName Then
                    gcd.currentDrawing = d
                    gcd.UpdateLayersCombo
                    gcd.UpdateLineWtCombo
                    gcd.UpdateLineTypeCombo
                    gcd.UpdatDimTypeTypeCombo
                    Me.redraw
                    Me.Text = f

                    FillWindowMenu
                    Break
                Endif
            Next

        Case "file_quit"

            Me.Close
            Quit

            ' Case "file_new"
            '
            '     actions.FileNew
            '
        Case "file_open"

            actions.FileOpen

        Case Like "file_open_*"



            sWName = Mid(sAction, 11)

            actions.FileOpen(sWName)

            ' Case "file_save"
            '
            '     f = gcd.currentDrawing.FileName
            '
            '     fbas = File.Dir(f) &/ File.BaseName(f)
            '     fBak = "'" & fbas & ".bak'"
            '     If gcd.currentDrawing.RequiresFileRename Then
            '         Me.Action_Activate("file_saveas")
            '         Return
            '     Else
            '         If Exist(f) Then
            '             If Exist(fBak) Then Shell "rm " & fBak Wait
            '             Shell "mv '" & f & "' '" & fbas & ".bak'" Wait
            '         End If
            '
            '         If File.Ext(f) = "dxf" Then
            '             Dxf.SaveFile(f, gcd.currentDrawing.cModel, gcd.currentDrawing)
            '         Else If File.Ext(f) = "dwg" Then
            '             ' guardamos la version DXF en el dir adecuado, con el nombre elegido
            '             't = main.dirDxfOut &/ Utils.FileWithoutExtension(Utils.FileFromPath(f)) & ".dxf"
            '             t = Temp & ".dxf"
            '             Dxf.SaveFile(t, gcd.currentDrawing.cModel)
            '             t = gcd.oda_dxftodwg(t)
            '             ' como el proceso de grabado pudo resultar en error, chequeo la existencia primero
            '
            '             If Exist(t) Then Move t To f
            '
            '         End If
            '
            '     Endif

            ' Case "file_saveas"
            '
            '     f = gcd.currentDrawing.FileName
            '     fbas = File.Dir(f) &/ File.BaseName(f)
            '     fBak = "'" & fbas & ".bak'"
            '
            '     Dialog.AutoExt = True
            '     Dialog.Filter = ["*.dxf", "DXF Drawing exchange 2010", "*.dwg", "DWG AutoCAD Drawing file 2010"]
            '     If Dialog.SaveFile() Then Return ' cancel saving
            '
            '     f = Dialog.Path
            '
            '     If Exist(f) Then
            '         If Message.Question(("The file exist"), ("Replace"), ("Cancel")) = 2 Then
            '             f = ""
            '         Endif
            '     Endif
            '
            '     If f = "" Then
            '         Print "Cancel"
            '     Else
            '
            '         'If LCase(File.Ext(f)) <> "dxf" Then f &= ".dxf"
            '         If Exist(f) Then
            '             If Exist(fBak) Then Shell "rm " & fBak Wait
            '             Shell "mv '" & f & "' '" & fbas & ".bak'" Wait
            '         End If
            '
            '         gcd.currentDrawing.FileName = f
            '         gcd.currentDrawing.RequiresFileRename = False
            '         Action_Activate("file_save")
            '
            '         Me.Text = f
            '
            '     Endif

        Case Like "cad*"

            ' actions, with & for additional parameters
            ' cadDimension_Linear&horizontal

            Dim o As Object, sRunWith As String, iParam As Integer, c As Class

            sActionParams = Split(sAction, "&")
            sRunWith = sActionParams[0]
            Try iParam = CInt(sActionParams[1])
            gcd.clsJobPrevious = gcd.clsJob

            o = Object.New(sRunWith)

            ' check if the class needs to be run trough other class
            If o.usewith = "" Then                        ' its a tool
                gcd.clsJob = o
                gcd.clsJob.start(iParam)

            Else                                           ' its propably an eentity

                gcd.clsJob = Object.New(o.usewith)
                gcd.clsJob.start(o, iParam)

            End If

        Case Like "layer_change_*"

            Dim sLayerName As String

            sLayerName = Mid(sAction, 14)

            ' mbtLayers.Text = sLayerName
            ' iColor = gcd.currentDrawing.cLayers[sLayerName][dxf.codColor]
            ' mbtLayers.Picture = paintPlus.picCirculito(8, gcd.gColor[iColor], Color.ButtonForeground)

            ' informamos
            gcd.currentDrawing.CurrLayer = gcd.GetLayer(sLayerName)

            ' si tengo algo seleccionado, debo cambiar su color a este
            gcd.EditEntities("layer", gcd.currentDrawing.CurrLayer)
            clsEntities.DeSelection()
            
         Case Like "color_*"

            iColor = CInt(Mid(sAction, 7))
            mbtColors.Text = "Color " & CStr(iColor) 'Me.mbtColors.Children[iColor].Text
            If iColor = 256 Then mbtColors.Text = "ByLayer"
            If iColor = 257 Then mbtColors.Text = "ByBlock"

            mbtColors.Picture = paintPlus.picCirculito(8, gcd.gColor[iColor], Color.ButtonForeground)

            gcd.currentDrawing.CurrColor = iColor

            ' si tengo algo seleccionado, debo cambiar su color a este
            gcd.EditEntities("color", iColor)
            clsEntities.DeSelection()
            
                  Case Like "linewt_change_*"

            gcd.currentDrawing.CurrLineWt = CInt(Mid(sAction, 15)) / 100

       
            gcd.EditEntities("linewt", gcd.currentDrawing.CurrLineWt)
            clsEntities.DeSelection()

        Case Like "ltype_change_*"

            gcd.currentDrawing.CurrLineType = gcd.FindLType(Mid(sAction, 14))

         
            gcd.EditEntities("linetype", gcd.currentDrawing.CurrLineType)
            clsEntities.DeSelection()

    End Select

End

Public Sub LeerRecientes()

    'TODO esto deberia estar en un ini
    ' obtengo los lastopen

    Dim mnuLastOpen As New Menu(Me)
    Dim mnuFiles As Menu

    mnuLastOpen.Name = "LastOpenedFiles"
    mnuFiles = New Menu(mnuLastOpen)
    mnuFiles.Text = Config.FilesLastOpen1
    mnuFiles.Action = "file_open_" & Config.FilesLastOpen1

    mnuFiles = New Menu(mnuLastOpen)
    mnuFiles.Text = Config.FilesLastOpen2
    mnuFiles.Action = "file_open_" & config.filesLastOpen2

    mnuFiles = New Menu(mnuLastOpen)
    mnuFiles.Text = Config.FilesLastOpen3
    mnuFiles.Action = "file_open_" & config.filesLastOpen3

    mnuFiles = New Menu(mnuLastOpen)
    mnuFiles.Text = Config.FilesLastOpen4
    mnuFiles.Action = "file_open_" & config.filesLastOpen4

    mnuFiles = New Menu(mnuLastOpen)
    mnuFiles.Text = Config.FilesLastOpen5
    mnuFiles.Action = "file_open_" & config.filesLastOpen5



    MenuButton1.Menu = "LastOpenedFiles"



End

Public Sub GuardarParametros()

    If main.setting.lastopen1 <> "" Then config.LastOpen1 = main.setting.lastopen1
    If main.setting.lastopen2 <> "" Then config.LastOpen2 = main.setting.lastopen2
    If main.setting.lastopen3 <> "" Then config.LastOpen3 = main.setting.lastopen3
    If main.setting.lastopen4 <> "" Then config.LastOpen4 = main.setting.lastopen4
    If main.setting.lastopen5 <> "" Then config.LastOpen5 = main.setting.lastopen5

End

Public Sub AddFilesOpen(sFilename As String)

    ' verifico que ya lo tenga en la lista de recientes
    If sFilename = Config.FilesLastOpen1 Then Return ' nada que hacer

    ' ubico en primer lugar al archivo reciente
    If sFilename = Config.FilesLastOpen2 Then
        Swap Config.FilesLastOpen2, Config.FilesLastOpen1
        Return
    End If

    If sFilename = Config.FilesLastOpen3 Then
        Swap Config.FilesLastOpen3, Config.FilesLastOpen1
        Return
    End If
    If sFilename = Config.FilesLastOpen4 Then
        Swap Config.FilesLastOpen4, Config.FilesLastOpen1
        Return
    End If
    If sFilename = Config.FilesLastOpen5 Then
        Swap Config.FilesLastOpen5, Config.FilesLastOpen1
        Return
    End If

    ' no lo tengo, descarto el ultimo y lo agrego al principio, desplazando el resto
    Config.FilesLastOpen5 = Config.FilesLastOpen4
    Config.FilesLastOpen4 = Config.FilesLastOpen3
    Config.FilesLastOpen3 = Config.FilesLastOpen2
    Config.FilesLastOpen2 = Config.FilesLastOpen1
    Config.FilesLastOpen1 = sFilename

End


Public Sub VerifLastOpen(sA_Abrir As String)

    Dim loTengo As Integer
    ' reacomodo los Recientes, de maanera SIMPLE

    ' primero veo si lo tengo
    loTengo = False
    If sA_Abrir = mnuReciente1.text Then loTengo = 1
    If sA_Abrir = mnuReciente2.text Then loTengo = 2
    If sA_Abrir = mnuReciente3.text Then loTengo = 3
    If sA_Abrir = mnuReciente4.text Then loTengo = 4
    If sA_Abrir = mnuReciente5.text Then loTengo = 5

    If Not lotengo Then
        ' desplazo todos los recientes hacia abajo
        main.setting.lastopen5 = main.setting.lastopen4
        main.setting.lastopen4 = main.setting.lastopen3
        main.setting.lastopen3 = main.setting.lastopen2
        main.setting.lastopen2 = main.setting.lastopen1
        main.setting.lastopen1 = sA_Abrir

        GuardarParametros
        LeerRecientes

    End If
    sA_Abrir = ""

End

Public Sub form_Close()

    Me.Close

    actions.ExitProgram

End

Public Sub form_Arrange()

    If Me.pnlToolbarLeft.Children.Count * 32 <= Me.pnlToolbarLeft.H Then ' los botones entran en una fila
        Me.pnlToolbarLeft.W = 32
    Else
        Me.pnlToolbarLeft.W = 64
    Endif

End


Public Sub glarea1_Resize()

    GLplus.Resize(glarea1)

End

Public Sub GLArea1_draw()

    Dim iParent As Integer
    Dim i As Integer
    Dim L As Layer

    If Not gcd.DrawingReady Then Return

    gcd.drwDrawingClass = gcd.drwOpenGLClass

    gl.Clear(gl.DEPTH_BUFFER_BIT Or gl.COLOR_BUFFER_BIT)

    gl.LoadIdentity

    gl.Translatef(gcd.currentDrawing.PanX, gcd.currentDrawing.PanY, 0)

    gl.Scalef(gcd.currentDrawing.ScaleZoom, gcd.currentDrawing.ScaleZoom, 1)

    ' el orden del dibujo es importante en paint, porque una cosa tapa a la otra; en openGL aparentemente es al reves, lo primero se dibuja primero

    ' Primero la grid
    ' DrawingAids.DrawGrid

    ' ' TEST
    ' Dim fArcParams As Float[]
    '
    ' ' aqui podria usar una rutina de arco entre 3 puntos
    ' fArcParams = puntos.Arc3Point(0, 0, -100, 50, -300, 20)
    ' ' traslado el centro
    ' gl.Translatef(fArcParams[0], fArcParams[1], 0)
    ' glPlus.Arc(fArcParams[2], fArcParams[3], fArcParams[4] - fArcParams[3], Color.Blue, 1, 0)
    ' gl.Translatef(-fArcParams[0], -fArcParams[1], 0)
    ' fArcParams = Null
    '
    If gcd.DrawBounds Then DrawingAids.DrawPolygons

    ' glPlus.Triangles(ftring, Color.Red, Color.Red)
    '
    ' glPlus.Triangles(ftring2, Color.Blue, Color.blue)

    If gcd.currentDrawing.HoveredEntity Then
        ' si no esta seleccionada, la resalto
        'If Not arrEntities[iEntity[3]].Selected Then
        'iParent = clsEntities.GetParentBlock(gcd.currentDrawing.iEntity[3]) ' esto verifica si tiene que resaltar el bloque completo

        gcd.currentDrawing.HoveredEntity.ClassHandler.DrawRemark(gcd.currentDrawing.HoveredEntity)
    End If

    DrawingAids.DrawCoordenadas

    DrawingAids.DibujaHelper

    For Each L In gcd.currentDrawing.oLayers
        If L.Visible Then gl.CallList(L.glList)
    Next
    '
    'clsEntities.DrawArrays()

    'gl.CallList(gcd.currentDrawing.GlListAllEntities)

    ' POI dinamicos
    If gcd.currentDrawing.flgShowPOIinfo Then

        Select gcd.currentDrawing.iEntity[2]
            Case gcd.poiMidPoint
                glPlus.PolygonFilled([gcd.currentDrawing.iEntity[0] - Metros(4), gcd.currentDrawing.iEntity[1], gcd.currentDrawing.iEntity[0], gcd.currentDrawing.iEntity[1] + Metros(4), gcd.currentDrawing.iEntity[0] + Metros(4), gcd.currentDrawing.iEntity[1], gcd.currentDrawing.iEntity[0], gcd.currentDrawing.iEntity[1] - Metros(4)], Color.Blue, Color.Green)
            Case gcd.poiQuadrant
                glPlus.PolygonFilled([gcd.currentDrawing.iEntity[0] - Metros(6), gcd.currentDrawing.iEntity[1], gcd.currentDrawing.iEntity[0], gcd.currentDrawing.iEntity[1] + Metros(6), gcd.currentDrawing.iEntity[0] + Metros(6), gcd.currentDrawing.iEntity[1], gcd.currentDrawing.iEntity[0], gcd.currentDrawing.iEntity[1] - Metros(6)], Color.Cyan, Color.Cyan)

            Case -1
                ' nada
            Case gcd.poiCenter, gcd.poiBasePoint

                glPlus.Circle([gcd.currentDrawing.iEntity[0], gcd.currentDrawing.iEntity[1]], Metros(4), Color.Cyan, True, False)
                'glPlus.Rectangle2D(gcd.currentDrawing.iEntity[0] - Metros(4), gcd.currentDrawing.iEntity[1] - Metros(4), Metros(8), Metros(8), Color.Blue,,,, Color.Blue, 1, 1)

            Case Else
                glPlus.Rectangle2D(gcd.currentDrawing.iEntity[0] - Metros(4), gcd.currentDrawing.iEntity[1] - Metros(4), Metros(8), Metros(8), Color.Blue,,,, Color.Blue, 1, 1)

        End Select

    Endif

    If gcd.flgNewPosition Then
        clsEntities.CollectVisibleEntities
        gcd.flgNewPosition = False
    End If

    gcd.clsJob.Draw()
    ' Debug "Drawn", cint(Rnd(0, 1000))

End

' NUEVO Protocolo del Mouse para OpenGL: todo se envia a la clsJob actuante

Public Sub GLArea1_MouseDown()

    gcd.clsJob.mouseDown()

End

Public Sub GLArea1_DblClick()

    gcd.clsJob.DblClick()

End

Public Sub GLArea1_MouseMove()

    ' Universal:

    Me.lblCoord.Text = Format(gcd.Xreal(Mouse.x), Config.FormatCoord) & " : " & Format(gcd.Yreal(Mouse.y), config.FormatInquiries)
    
    
    If Mouse.Middle Then cadPan.MouseMove()
    
    '   If gcd.clsJob.gender <> "Pan" Then
    '     gcd.clsJobPreZoom = gcd.clsJob
    '     gcd.clsJob = cadPan
    '     gcd.clsJob.Start()
    '     ' glarea1.Refresh  ' glarea1.Refresh
    '     '
    '     '
    '   Else
    ' 
    '     gcd.clsJob = gcd.clsJobPreZoom
    ' 
    '   End If
    ' 
    ' End If

    gcd.clsJob.MouseMove()

End

Public Sub GLArea1_MouseUp()

    gcd.clsJob.MouseUp()

End

Public Sub GLArea1_MouseWheel()

    gcd.clsJob.MouseWHEEL()

End

Public Function Xreal(ScreenX As Float) As Float

    Return Metros((screenx - glarea1.w / 2 - gcd.currentDrawing.PanX))

End

Public Function Yreal(ScreenY As Float) As Float

    Return Metros((-ScreenY + glarea1.h / 2 - gcd.currentDrawing.PanY))

End

Public Function XPix(X As Float) As Float

    'Return Metros((screenx - glarea1.w / 2 - gcd.currentDrawing.PanX))
    Return Me.Pixels(X) + glarea1.w / 2 + gcd.currentDrawing.PanX

End

Public Function YPix(Y As Float) As Float

    'Return Metros((-ScreenY + glarea1.h / 2 - gcd.currentDrawing.PanY))
    Return -(Me.Pixels(Y) - glarea1.h / 2 + gcd.currentDrawing.PanY)

End

Public Function Pixels(distancia As Float) As Float  ' converts meters to pixels
    ' transforma Metros en Pixeles sin tener en cuenta el Pan

    Return distancia * gcd.currentDrawing.ScaleZoom

End

Public Function Metros(pixeles As Integer) As Float  ' converts pixels to meters

    Return pixeles / gcd.currentDrawing.ScaleZoom

End

Public Function Near(xyzReal As Float) As Float
    ' return the nearest point to the grid
    ' this is a world to world points (not pixels)

    ' Example:
    ' if                    GridSpacing = 0.2
    ' we pass               xyzReal = 1.35
    ' function will give    NearReal = 1.40

    Dim n As Integer, r As Float

    If Not Gridactive Then Return xyzReal

    r = xyzReal / GridSpacing
    n = Int(r)
    r = r - Int(r)

    If r > 0.5 Then n += 1

    Return n * GridSpacing

End

Public Sub redraw()

    $hDrawTimer.Trigger
    Wait 0.001

End

Public Sub Form_Keypress()

    Dim com As Variant
    Dim umx As Integer     '' Index in undo array
    Dim uEnty As Entity    '' Undo entity
    Dim aEnty, e As Entity    '' Actual entity
    Dim imx As Integer     '' Index in Entities array
    Dim SelectMode As Boolean

    ' Print Key.Code
    Dim t As Float = Timer
    Dim ftring2 As Float[]
    Dim a As Integer
    Dim oki As Integer

    Select Key.Code

        Case Key.Enter, Key.Return
            Debug KeysAccumulator

            '            Form_Activate()

            gcd.clsJob.KeyText(KeysAccumulator)
            KeysAccumulator = ""

        Case Key.f2
            ' t = Timer
            ' Dim NE As New Entity
            ' Debug "Creando 500.000 lineas"
            ' For a = 1 To 500000
            '     NE = cadLine.NewEntity([Rnd(-100, 100), Rnd(-100, -100), Rnd(100, 100), Rnd(100, 100)])
            '     NE.ClassHandler.finish(ne)
            '     gcd.currentDrawing.oEntities.Add(ne, ne.Handle)
            '
            ' Next
            ' Debug "Creadas", Timer - t
            ' t = Timer
            ' gcd.FillLayers()
            ' gcd.Regen
            ' cadZoomE.Start()
            ' clsEntities.CollectVisibleEntities
            '
            ' Debug "Regen en ", Timer - t
            ' Dim oka As Boolean
            ' t = Timer
            ' For Each NE In gcd.currentDrawing.oEntities
            '     oka = NE.ClassHandler.MouseOverMe(NE, 2000, 2000, 10)
            ' Next
            ' Debug "Tracking via ClassHandler en ", Timer - t
            '
            ' t = Timer
            '
            ' NE = clsMouseTracking.CheckAboveEntity(2000, 2000, 10)
            '
            ' Debug "Tracking via clsMouseTRacking en ", Timer - t
            '
            ' ' lleno poi
            ' t = Timer
            ' For Each NE In gcd.currentDrawing.oEntities
            '     Inc a
            '     gcd.currentDrawing.poiLines.Insert(NE.p.Copy())
            '     gcd.currentDrawing.oExtras.Add(ne.Handle, Str(a))
            ' Next
            ' Debug "Llenado del POI en ", Timer - t
            ' t = Timer
            ' a = puntos.inPolySegment(gcd.currentDrawing.poiLines, 2000, 2000, 10)
            ' Debug "Busqueda via POI en ", Timer - t
            ' Stop
            ' ftring = puntos.PolygonTriangulation3([185, -315, 185, -295, 179, -295, 179, -296, 184, -296, 184, -314, 179, -314, 179, -315])

            'ftring2 = puntos.PolygonTriangulation([185, -315, 185, -295, 179, -295, 179, -296, 184, -296, 184, -314, 179, -314, 179, -315])

            'puntos.Translate(ftring2, 80, 0)

        Case Key.f6

            gcd.DrawBounds = Not gcd.DrawBounds
            Me.redraw
        Case Key.F4

            gcd.DrawHatch = Not gcd.DrawHatch
            gcd.RegenList

        Case Key.BackSpace

            KeysAccumulator = Left(KeysAccumulator, -1)

        Case Key.F11

        Case Key.Esc

            If gcd.clsJob.gender = "Builder" Then

                gcd.clsJob.KeyText("U")

            Else If gcd.clsJob.gender = "Default" Then

                gcd.clsJob = gcd.clsJobPrevious
                gcd.clsJob.Start()

            Else    ' es una tool

                gcd.clsJob.finish
                gcd.clsJobPrevious = gcd.clsJob
                gcd.clsJob = cadSelection

            Endif

            ' SelectionRefresh()

        Case Key.Space
            Stop Event

        Case Key.Del
            gcd.clsJob.KeyText("Erase")

        Case Key.ControlKey
            KeysAccumulator = "Function"

        Case Else
            ' A GOOD KEY
            If InStr(KeysAccumulator, "Function") > 0 Then

                ' Select Key.Code
                '   Case Asc("1") ' Properties
                '
                '     Select PropertiesFlag
                '       Case 1 ' Tools
                '         PropertiesFlag = 2
                '         pnlProperties.Visible = True
                '         pnlIcons.Visible = False
                '         'btnSelectionMode.Value = False
                '       Case 2 ' Props
                '         PropertiesFlag = 0
                '         pnlProperties.Visible = False
                '         pnlIcons.Visible = False
                '         'btnSelectionMode.Value = True
                '
                '       Case Else ' Invisible
                '         PropertiesFlag = 1
                '         pnlProperties.Visible = False
                '         pnlIcons.Visible = True
                '
                '     End Select
                '
                '     If PropertiesFlag = False Then
                '       pnlProperties.Visible = True
                '       PropertiesFlag = True
                '       pnlIcons.Visible = False
                '       btnSelectionMode.Value = False
                '     Else
                '       pnlProperties.Visible = False
                '       PropertiesFlag = False
                '       pnlIcons.Visible = True
                '       btnSelectionMode.Value = True
                '     Endif
                '
                '   Case Asc("2") ' Layers
                '
                '     'Case Asc("3") ' Blocks
                '
                '     'Case Asc("4...") ' More...
                '     'KeysAccumulator &= "-" & Key.Text
                '     'Case Else
                '     '    KeysAccumulator = ""
                '     'pnlProperties.Visible = False
                '     'pnlDebug.Visible = False
                '
                '   Case Asc("3") ' Raw properties for debuging
                '     If RawFlag = False Then
                '       pnlRaw.Visible = True
                '       RawFlag = True
                '     Else
                '       pnlRaw.Visible = False
                '       RawFlag = False
                '     Endif
                '
                '   Case Asc("a"), Asc("A") ' Select/Unselect All
                '     SelectMode = True
                '     For Each aEnty In gcd.currentDrawing.arrEntities
                '       If aEnty.Selected Then
                '         SelectMode = False
                '         Break
                '       Endif
                '     Next
                '
                '     If SelectMode Then
                '       For Each aEnty In gcd.currentDrawing.arrEntities
                '         If aEnty.Selected = False Then
                '           aEnty.Selected = True
                '         Endif
                '       Next
                '     Else
                '       For Each aEnty In gcd.currentDrawing.arrEntities
                '         If aEnty.Selected Then
                '           aEnty.Selected = False
                '         Endif
                '       Next
                '     Endif
                '     fMain.regen
                '
                '   Case Asc("z"), Asc("Z") ' Undo
                '
                '     If gcd.currentDrawing.arrUndo.Count > 0 Then
                '       umx = gcd.currentDrawing.arrUndo.Max
                '
                '       uEnty = gcd.currentDrawing.arrUndo[umx]
                '       For Each aEnty In gcd.currentDrawing.arrEntities
                '         If aEnty.Handle = uEnty.Handle Then
                '           gcd.currentDrawing.arrEntities.Remove(imx, 1)
                '           gcd.currentDrawing.arrEntities.Add(uEnty, imx)
                '           gcd.currentDrawing.arrUndo.Remove(umx, 1)
                '           fMain.regen
                '           'gcd.Redraw
                '           Break
                '         Endif
                '         Inc imx
                '       Next
                '
                '     Endif
                '   Case Else
                '     KeysAccumulator = ""
                '
                ' End Select

            Else
                KeysAccumulator &= Key.Text
                DrawingAids.ErrorMessage = ""
            Endif

    End Select

    'DrawingAids.DibujaHelper

End

'
' Public Sub lblCommand_KeyPress()
'
'     ' las teclas que no procese fMain sera procesadas aqui
'     KeysAccumulator &= Key.Text
'
' End

' Public Sub tbLayerForm_Click()
'
'     fLayersOnScreen.Move(tbLayerForm.ScreenX, tbLayerForm.ScreenY + tbLayerForm.h)
'     fLayersOnScreen.Show()
'
' End

Public Sub grdLayers_Click()

    If flgShowingLayers Then
        fLayersOnScreen.Hide
        flgShowingLayers = False

    Else
        If grdLayers.Column = 1 Then ' Visibility
            gcd.currentDrawing.CurrLayer.Visible = Not gcd.currentDrawing.CurrLayer.Visible

            If gcd.currentDrawing.CurrLayer.Visible Then grdLayers[0, 1].Picture = fLayersOnScreen.picVisibleOn Else grdLayers[0, 1].Picture = fLayersOnScreen.picVisibleOff

        Else If grdLayers.Column = 2 Then ' frozen
            gcd.currentDrawing.CurrLayer.Frozen = Not gcd.currentDrawing.CurrLayer.Frozen

            If gcd.currentDrawing.CurrLayer.Frozen Then grdLayers[0, 2].Picture = fLayersOnScreen.picFrozenOn Else grdLayers[0, 2].Picture = fLayersOnScreen.picFrozenOff

        Else If grdLayers.Column = 3 Then ' lock
            gcd.currentDrawing.CurrLayer.Locked = Not gcd.currentDrawing.CurrLayer.Locked

            If gcd.currentDrawing.CurrLayer.Locked Then grdLayers[0, 3].Picture = fLayersOnScreen.picLockedOn Else grdLayers[0, 3].Picture = fLayersOnScreen.picLockedOff

        Else
            fLayersOnScreen.Move(grdLayers.ScreenX, grdLayers.ScreenY + grdLayers.h + 1)
            flgShowingLayers = True
            fLayersOnScreen.Show()
        End If
    End If

End

Public Sub FillWindowMenu()

    Dim d As Drawing
    Dim mItem As Menu

    mnuWindow.Children.Clear

    For Each d In gcd.Drawings
        mItem = New Menu(mnuWindow)
        mItem.Text = d.FileName
        If d = gcd.currentDrawing Then mItem.Checked = True Else mItem.Checked = False
        mItem.Action = "windowchange_" & d.FileName
    Next

    mItem = New Menu(mnuWindow)
    mItem.Text = "" ' separador

    ' y ahora agrego dos
    mItem = New Menu(mnuWindow)
    mItem.Text = ("Close")
    mItem.Action = "window_close"

    mItem = New Menu(mnuWindow)
    mItem.Text = ("Close all")
    mItem.Action = "window_closeall"

End

' Public Sub ToggleButton3_Click()
'
'     If Not ToggleButton3.Value Then
'         ToggleButton3.Tag = CStr(ToggleButton3.Parent.h)
'         ToggleButton3.Parent.h = ToggleButton3.H
'     Else
'
'         ToggleButton3.Parent.h = CInt(ToggleButton3.tag)
'     End If
'
' End
'
' Public Sub ToggleButton4_Click()
'
'     If Not ToggleButton4.Value Then
'         ToggleButton4.Tag = CStr(ToggleButton4.Parent.h)
'         ToggleButton4.Parent.h = ToggleButton4.H
'     Else
'
'         ToggleButton4.Parent.h = CInt(ToggleButton4.tag)
'     End If
'
' End

' Public Sub tmrAutosave_Timer()
'
'     ' el autosave funciona solo si guarde antes, o sea si el dibujo tiene nombre
'     ' ademas se guarda solo en formato dxf, para acelerar el proceso
'
'     If Not gcd.currentDrawing.RequiresFileRename Then
'         If gcd.currentDrawing.RequiresSaving Then
'             If Dxf.SaveFile(gcd.currentDrawing.FileName & ".Autosave", gcd.currentDrawing.cModel) < 0 Then
'                 Print "Autosave error"
'             Else
'                 Print ("Autosaved to ") & gcd.currentDrawing.FileName & ".Autosave"
'             Endif
'         End If
'     End If
'
' End

' Public Sub tbnInspector_MouseUp()
'
'     If Mouse.Left Then
'
'         Config.TrackShowInspector = Not Config.TrackShowInspector
'         tbnInspector.Value = Config.TrackShowInspector
'         If Not Config.TrackShowInspector Then
'             Try fInspector.Close
'         Endif
'
'     Else If Mouse.Right Then
'
'         fDetectOptions.Show()
'
'     Endif
'
' End

Public Sub tbnOrtho2_Click()

    gcd.DrawBounds = Not gcd.DrawBounds
    Me.redraw

End

