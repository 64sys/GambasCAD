' Gambas class file

'------------------------------------------------------------------------------

'Variables del formulario

Public currentFile As String

Public CursorX As Integer
Public CursorY As Integer

Public Xr As Float
Public Yr As Float

Public KeysAccumulator As String
Public TmrTicks As Integer

'Public SelectedWidth As Boolean

'Private PropertiesFlag As Boolean = False
Private PropertiesFlag As Boolean = True
Private RawFlag As Boolean = False

'variables de ambiente
Public flgShowInspector As Boolean = False

Public flgShowingLayers As Boolean

Public flgWheelCounter As Integer

Public $hDrawTimer As New Timer As "DrawTimer"
Public $hSearchTimer As New Timer As "SearchTimer"

Public GridSpacing As Float = 0.5
Public GridActive As Boolean = False         ' use with F7: 0 = no grid, 1 = dots, 2 = lines

'' Printing stuff
Public MyPrinter As Printer

Public ftring As New Float[]
Public ftring2 As New Float[]

Public Sub DrawTimer_Timer()

    glarea1.Refresh

End Sub

Public Sub SearchTimer_Timer()

    gcd.Drawing.HoveredEntity = clsMouseTracking.CheckAboveEntity(xr, yr)

End Sub

Public Sub Run() As Boolean

    ' acomodo el tamanio de los controles
    Me.tblLineWt.w = 128
    Me.tblLTypes.w = 128
    Me.mbtColors.w = 128
    Me.cmbDimStyle.w = 128
    Me.grdLayers.w = 146
    Me.Menus.Hide
    'Me.tbnLayersOnScreen.w = 96
    Me.TabPanel1[0].Visible = Config.ShowConsoleTab

    'PanelBlockFit.Visible = False 'ag = CStr(PanelBlockFit.h)
    'PanelBlockFit.h = 0

    fMain.grdLayers.Rows.Count = 1
    fMain.grdLayers.Columns.Count = 5
    'fMain.grdLayers.Rows[0].Height = 32
    fMain.grdLayers.Rows.Height = 28
    fMain.grdLayers[0, 1].Alignment = Align.Left
    fMain.grdLayers[0, 2].Alignment = Align.Left
    fMain.grdLayers[0, 3].Alignment = Align.Left
    fMain.grdLayers[0, 4].Alignment = Align.Left
    fMain.grdLayers.Columns[0].w = 18 ' color
    fMain.grdLayers.Columns[1].w = 18 ' color
    fMain.grdLayers.Columns[2].w = 18 ' color
    fMain.grdLayers.Columns[3].w = 18 ' color
    fMain.grdLayers.Columns[4].w = 72 ' color

    fLayersOnScreen.Move(Me.grdLayers.x, Me.grdLayers.y + Me.grdLayers.h + 1)

    ' ' ToolButtonList  depre
    '
    ' tblLines.AddToolButton("tbnLine",, Picture.Load("/home/martin/GambasCAD/png/line.png"), "cadLine")
    ' tblLines.AddToolButton("tbnRay",, Picture.Load("/home/martin/GambasCAD/png/ray.png"), "cadRay")
    '
    ' tblCircles.AddToolButton("tbncircle",, Picture.Load("/home/martin/GambasCAD/png/circle3.png"), "cadcircle")
    ' tblCircles.AddToolButton("tbnellipse",, Picture.Load("/home/martin/GambasCAD/png/ellipse full.png"), "cadellipse")
    ' tblCircles.AddToolButton("tbnarc",, Picture.Load("/home/martin/GambasCAD/png/ARC.png"), "cadarc")

    '
    ' ' Armo la barra Inquiry
    '

    Action_Activate("file_new")

    tmrAutosave.Delay = config.AutoSaveDelayMin * 1000 * 60
    'tmrAutosave.Enabled = True

    Me.Visible = False

    LeerRecientes
    SetButtonPics(Me)
    'SetButtonPics(tblLines)

    Me.Show()
    Wait
    Me.Visible = True
    glPlus.ClearColor(Config.BackgroundColor)

End

'' Escanea el control Padre y busca en el Path SVGs cuyo nombre coincidan con los controles hijos
'' excluidos las tres primeras letras, luego asigna la imagen Ej: tbnCopy <-- copy.svg
Public Sub SetButtonPics(padre As Object, Optional sSvgPath As String = "")

    Dim c As Control, o As Object
    Dim sName As String, svgNames As String[]
    Dim p As Picture
    Dim i As Integer

    If sSvgPath = "" Then sSvgPath = gcd.dirResources &/ "svg" &/ Config.IconFamily

    For Each o In padre.Children
        i = 0
        Try i = o.Children.Count
        If i > 0 Then               ' el control tiene hijos
            SetButtonPics(o, sSvgPath)
        Else                        ' busco si hay una imagen SVG
            sName = Mid(o.name, 4)
            svgNames = Dir(sSvgPath, sName & ".svg")

            If svgNames.Count > 0 Then
                o.w = Config.ButtonSize
                o.h = Config.ButtonSize
                o.Picture = Image.Load(sSvgPath &/ svgNames[0]).Stretch(Config.ButtonSize, Config.ButtonSize).Picture
                o.text = ""
            Endif
        Endif
    Next

End

Public Function Action_Activate(sAction As String) As Boolean
    ' Acciones de los botones y los menús (para no repetir código)
    ' El string de la acción es una propiedad de cada botón o menú
    ' El código que se ejecuta lo hace dentro de la rutina llamada, nunca dentro de este mismo evento.

    Dim r As Float
    Dim NewDrawing As Drawing
    Dim f, fDxf, fBak As String
    'Dim fMinimal As String = "./minimal/minimal-2010.dxf"
    Dim fMinimal As String = "./minimal/minimal.dxf"
    Dim fx As String[]
    Dim fbas As String
    Dim sWName As String
    Dim t As String
    Dim iColor, i As Integer
    Dim imgCirculito As Image
    Dim clsJob As String
    Dim d As Drawing
    Dim sActionParams As String[]

    Try gcd.debuginfo(Last.name)

    Select Case LCase(sAction)

        Case Like "_*"
            ' todo lo que empiece con _ lo envio al job
            gcd.clsJob.KeyText(Mid(sAction, 2))
        Case "mentities-copy"
            Dim sToCopy As String
            For Each e As Entity In gcd.Drawing.oSelected
                sToCopy &= clsEntities.EntityToJsonString(e)

            Next

            Clipboard.Clear
            Clipboard.Copy(sToCopy)

        Case "undo"

            gcd.Drawing.uUndo.DoUndo()
            gcd.Regen

        Case "redo"

            gcd.Drawing.uUndo.DoRedo()
            gcd.Regen
        Case "config"

            fOptions.ShowModal
            Me.TabPanel1[0].Visible = Config.ShowConsoleTab
            glPlus.ClearColor(Config.BackgroundColor)

        Case "exit"

            form_Close

        Case "regen"

            gcd.Regen

            ' Case "pdf_export"
            '
            '     If Printer1.Configure() Then Return
            '     Printer1.Print
        Case "print"

            If Not gcd.Drawing.CurrPrintStyle Then gcd.Drawing.CurrPrintStyle = New PrintStyle
            fPrint.run()
            ' If i = 1 Then
            '
            '     Printer1.Print
            ' Else If i = 0 Then
            '     gcd.debugInfo("Print cancelled")
            '
            ' Else If i = 2 Then
            '     gcd.debugInfo("Selecting what to print")
            '
            ' End If

            ' vemos si hay q imprimir algo

        Case "undo"
            gcd.Drawing.uUndo.DoUndo()
            gcd.Regen

        Case "about"
            i = fAbout.ShowModal()

            ' Case "redo"
            '     gcd.Drawing.uUndo.DoRedo()
            '     gcd.Regen
        Case "window_close"
            For i = 0 To gcd.Drawings.Count
                If gcd.Drawings[i] = gcd.Drawing Then
                    gcd.Drawings.Remove(i)
                    If gcd.Drawings.Count > 0 Then
                        gcd.Drawing = gcd.Drawings[0]
                        Redraw
                    Else

                        Action_Activate("file_new")
                    Endif
                    Break
                End If

            Next

        Case "window_closeall"
            gcd.Drawings.Clear
            Action_Activate("file_new")

        Case Like "windowchange_*"

            sWName = Mid(sAction, 14)

            For Each d In gcd.Drawings
                If sWName = d.FileName Then
                    gcd.Drawing = d
                    gcd.UpdateLayersCombo
                    gcd.UpdateLineWtCombo
                    gcd.UpdateLineTypeCombo
                    gcd.UpdatDimTypeTypeCombo
                    Me.redraw
                    Me.Text = f

                    'FillWindowMenu
                    Break
                Endif
            Next

        Case "file_quit"

            Me.Close
            Quit

            ' Case "file_new"
            '
            '     actions.FileNew
            '
        Case "file_open"

            actions.FileOpen

        Case Like "file_open_*"

            sWName = Mid(sAction, 11)

            actions.FileOpen(sWName)

        Case "file_save"

            f = gcd.Drawing.FileName
            fbas = File.Dir(f) &/ File.BaseName(f)
            fBak = "'" & fbas & ".bak'"
            If gcd.Drawing.RequiresFileRename Then
                Me.Action_Activate("file_saveas")
                Return
            Else
                If Exist(f) Then
                    If Exist(fBak) Then Shell "rm " & fBak Wait
                    Shell "mv '" & f & "' '" & fbas & ".bak'" Wait
                End If

                If File.Ext(f) = "dxf" Then
                    Dxf.SaveFile(f, gcd.Drawing)
                Else If File.Ext(f) = "dwg" Then
                    ' guardamos la version DXF en el dir adecuado, con el nombre elegido
                    't = main.dirDxfOut &/ Utils.FileWithoutExtension(Utils.FileFromPath(f)) & ".dxf"
                    t = Temp & ".dxf"
                    Dxf.SaveFile(t, gcd.Drawing)
                    t = gcd.oda_dxftodwg(t)
                    ' como el proceso de grabado pudo resultar en error, chequeo la existencia primero

                    If Exist(t) Then Move t To f

                End If

            Endif

        Case "file_saveas"

            f = gcd.Drawing.FileName
            fbas = File.Dir(f) &/ File.BaseName(f)
            fBak = "'" & fbas & ".bak'"

            Dialog.AutoExt = True
            Dialog.Filter = ["*.dxf", "DXF Drawing exchange 2010", "*.dwg", "DWG AutoCAD Drawing file 2010"]
            If Dialog.SaveFile() Then Return ' cancel saving

            f = Dialog.Path

            If Exist(f) Then
                If Message.Question(("The file exist"), ("Replace"), ("Cancel")) = 2 Then
                    f = ""
                Endif
            Endif

            If f = "" Then
                Print "Cancel"
            Else

                'If LCase(File.Ext(f)) <> "dxf" Then f &= ".dxf"
                If Exist(f) Then
                    If Exist(fBak) Then Shell "rm " & fBak Wait
                    Shell "mv '" & f & "' '" & fbas & ".bak'" Wait
                End If

                gcd.Drawing.FileName = f
                gcd.Drawing.RequiresFileRename = False
                Action_Activate("file_save")

                Me.Text = f

            Endif

        Case Like "cad*"

            ' actions, with & for additional parameters
            ' cadDimension_Linear&horizontal

            Dim o As Object, sRunWith As String, iParam As Integer, c As Class

            sActionParams = Split(sAction, "&")
            sRunWith = UCase(Mid(sActionParams[0], 4))
            Try iParam = CInt(sActionParams[1])

            o = gcd.CCC[sRunWith]
            If Not o Then Return
            gcd.clsJobPrevious = gcd.clsJob
            ' check if the class needs to be run trough other class
            If o.usewith = "" Then                        ' its a tool
                gcd.clsJob = o
                gcd.clsJob.start(iParam)

            Else                                           ' its propably an eentity

                gcd.clsJob = gcd.CCC[o.usewith]
                gcd.clsJob.start(o, iParam)

            End If

        Case Like "layer_change_*"

            Dim sLayerName As String

            sLayerName = Mid(sAction, 14)

            ' mbtLayers.Text = sLayerName
            ' iColor = gcd.Drawing.cLayers[sLayerName][dxf.codColor]
            ' mbtLayers.Picture = paintPlus.picCirculito(8, gcd.gColor[iColor], Color.ButtonForeground)

            ' informamos
            gcd.Drawing.CurrLayer = gcd.GetLayer(sLayerName)

            ' si tengo algo seleccionado, debo cambiar su color a este
            gcd.EditEntities("layer", gcd.Drawing.CurrLayer)

            clsEntities.DeSelection()

        Case Like "color_*"

            iColor = CInt(Mid(sAction, 7))
            mbtColors.Text = "Color " & CStr(iColor) 'Me.mbtColors.Children[iColor].Text
            If iColor = 256 Then mbtColors.Text = "ByLayer"
            If iColor = 257 Then mbtColors.Text = "ByBlock"

            mbtColors.Picture = paintPlus.picCirculito(8, gcd.gColor[iColor], Color.ButtonForeground)

            gcd.Drawing.CurrColor = iColor

            ' si tengo algo seleccionado, debo cambiar su color a este
            gcd.EditEntities("color", iColor)
            clsEntities.DeSelection()

        Case "more_colors"

            iColor = fColors.ShowModal()
            If iColor < 0 Then Return

            Me.Action_Activate("color_" & CStr(iColor))

        Case Like "linewt_change_*"

            gcd.Drawing.CurrLineWt = CInt(Mid(sAction, 15)) / 100

            gcd.EditEntities("linewt", gcd.Drawing.CurrLineWt)
            clsEntities.DeSelection()

        Case Like "ltype_change_*"

            gcd.Drawing.CurrLineType = gcd.FindLType(Mid(sAction, 14))

            gcd.EditEntities("linetype", gcd.Drawing.CurrLineType)
            clsEntities.DeSelection()

        Case "grid"
            Me.GridActive = Not Me.GridActive

        Case "ortho"
            gcd.Orthogonal = Not gcd.Orthogonal
        Case "snap"
            gcd.SnapMode = -gcd.SnapMode

    End Select

End

Public Sub LeerRecientes()

    'TODO esto deberia estar en un ini
    ' obtengo los lastopen

    Dim mnuLastOpen As New Menu(Me)
    Dim mnuFiles As Menu

    mnuLastOpen.Name = "LastOpenedFiles"
    mnuFiles = New Menu(mnuLastOpen)
    mnuFiles.Text = Config.FilesLastOpen1
    mnuFiles.Action = "file_open_" & Config.FilesLastOpen1

    mnuFiles = New Menu(mnuLastOpen)
    mnuFiles.Text = Config.FilesLastOpen2
    mnuFiles.Action = "file_open_" & config.filesLastOpen2

    mnuFiles = New Menu(mnuLastOpen)
    mnuFiles.Text = Config.FilesLastOpen3
    mnuFiles.Action = "file_open_" & config.filesLastOpen3

    mnuFiles = New Menu(mnuLastOpen)
    mnuFiles.Text = Config.FilesLastOpen4
    mnuFiles.Action = "file_open_" & config.filesLastOpen4

    mnuFiles = New Menu(mnuLastOpen)
    mnuFiles.Text = Config.FilesLastOpen5
    mnuFiles.Action = "file_open_" & config.filesLastOpen5

    MenuButton1.Menu = "LastOpenedFiles"

End

Public Sub GuardarParaMetros()

    If main.setting.lastopen1 <> "" Then config.LastOpen1 = main.setting.lastopen1
    If main.setting.lastopen2 <> "" Then config.LastOpen2 = main.setting.lastopen2
    If main.setting.lastopen3 <> "" Then config.LastOpen3 = main.setting.lastopen3
    If main.setting.lastopen4 <> "" Then config.LastOpen4 = main.setting.lastopen4
    If main.setting.lastopen5 <> "" Then config.LastOpen5 = main.setting.lastopen5

End

Public Sub AddFilesOpen(sFilename As String)

    ' verifico que ya lo tenga en la lista de recientes
    If sFilename = Config.FilesLastOpen1 Then Return ' nada que hacer

    ' ubico en primer lugar al archivo reciente
    If sFilename = Config.FilesLastOpen2 Then
        Swap Config.FilesLastOpen2, Config.FilesLastOpen1
        Return
    End If

    If sFilename = Config.FilesLastOpen3 Then
        Swap Config.FilesLastOpen3, Config.FilesLastOpen1
        Return
    End If
    If sFilename = Config.FilesLastOpen4 Then
        Swap Config.FilesLastOpen4, Config.FilesLastOpen1
        Return
    End If
    If sFilename = Config.FilesLastOpen5 Then
        Swap Config.FilesLastOpen5, Config.FilesLastOpen1
        Return
    End If

    ' no lo tengo, descarto el ultimo y lo agrego al principio, desplazando el resto
    Config.FilesLastOpen5 = Config.FilesLastOpen4
    Config.FilesLastOpen4 = Config.FilesLastOpen3
    Config.FilesLastOpen3 = Config.FilesLastOpen2
    Config.FilesLastOpen2 = Config.FilesLastOpen1
    Config.FilesLastOpen1 = sFilename

End

Public Sub VerifLastOpen(sA_Abrir As String)

    Dim loTengo As Integer
    ' reacomodo los Recientes, de maanera SIMPLE

    ' primero veo si lo tengo
    loTengo = False
    If sA_Abrir = mnuReciente1.text Then loTengo = 1
    If sA_Abrir = mnuReciente2.text Then loTengo = 2
    If sA_Abrir = mnuReciente3.text Then loTengo = 3
    If sA_Abrir = mnuReciente4.text Then loTengo = 4
    If sA_Abrir = mnuReciente5.text Then loTengo = 5

    If Not lotengo Then
        ' desplazo todos los recientes hacia abajo
        main.setting.lastopen5 = main.setting.lastopen4
        main.setting.lastopen4 = main.setting.lastopen3
        main.setting.lastopen3 = main.setting.lastopen2
        main.setting.lastopen2 = main.setting.lastopen1
        main.setting.lastopen1 = sA_Abrir

        GuardarParametros
        LeerRecientes

    End If
    sA_Abrir = ""

End

Public Sub form_Close()

    actions.ExitProgram

End

Public Sub form_Arrange()

    ' If Me.pnlToolbarLeft.Children.Count * 32 <= Me.pnlToolbarLeft.H Then ' los botones entran en una fila
    '     Me.pnlToolbarLeft.W = 32
    ' Else
    '     Me.pnlToolbarLeft.W = 64
    ' Endif

End

Public Sub glarea1_Resize()

    GLplus.Resize(glarea1)

End

Public Sub GLArea1_draw()

    Dim iParent As Integer
    Dim i As Integer
    Dim L As Layer

    If Not gcd.DrawingReady Then Return

    gcd.drwDrawingClass = gcd.drwOpenGLClass

    gl.Clear(gl.DEPTH_BUFFER_BIT Or gl.COLOR_BUFFER_BIT)

    gl.LoadIdentity

    gl.Translatef(gcd.Drawing.PanX, gcd.Drawing.PanY, 0)

    gl.Scalef(gcd.Drawing.ScaleZoom, gcd.Drawing.ScaleZoom, 1)

    ' el orden del dibujo es importante en paint, porque una cosa tapa a la otra; en openGL aparentemente es al reves, lo primero se dibuja primero

    ' Primero la grid
    ' DrawingAids.DrawGrid

    ' ' TEST
    ' Dim fArcParams As Float[]
    '
    ' ' aqui podria usar una rutina de arco entre 3 puntos
    ' fArcParams = puntos.Arc3Point(0, 0, -100, 50, -300, 20)
    ' ' traslado el centro
    ' gl.Translatef(fArcParams[0], fArcParams[1], 0)
    ' glPlus.ARC(fArcParams[2], fArcParams[3], fArcParams[4] - fArcParams[3], Color.Blue, 1, 0)
    ' gl.Translatef(-fArcParams[0], -fArcParams[1], 0)
    ' fArcParams = Null
    '
    If gcd.DrawBounds Then DrawingAids.DrawPolygons

    ' glPlus.Triangles(ftring, Color.Red, Color.Red)
    '
    ' glPlus.Triangles(ftring2, Color.Blue, Color.blue)
    ' en este momento le damos la posibilidad a la clase actuante a que dibuje lo que quiera

    ' If gcd.Drawing.HoveredEntityPrevious Then
    '     ' si no esta seleccionada, la resalto
    '     'If Not arrEntities[iEntity[3]].Selected Then
    '     'iParent = clsEntities.GetParentBlock(gcd.Drawing.iEntity[3]) ' esto verifica si tiene que resaltar el bloque completo
    '
    '     If gcd.DrawHoveredEntity Then gl.CallList(gcd.Drawing.HoveredEntityPrevious.glDrwListRemark)
    '     '     Gcd.CCC[gcd.Drawing.HoveredEntityPrevious.gender].DrawRemark(gcd.Drawing.HoveredEntityPrevious)
    '     ' End If
    ' End If

    If gcd.DrawHoveredEntity Then
        If gcd.Drawing.HoveredEntity Then gl.CallList(gcd.Drawing.HoveredEntity.glDrwListRemark)
    End If
    DrawingAids.DrawCoordenadas

    DrawingAids.DibujaHelper

    gl.CallList(gcd.Drawing.GlListSelectedEntities)

    For Each L In gcd.Drawing.oLayers
        If L.Visible Then gl.CallList(L.glList)
    Next

    gcd.clsJob.Draw()
    '
    'clsEntities.DrawArrays()

    ' POI dinamicos
    If gcd.Drawing.flgShowPOIinfo Then

        Select gcd.Drawing.iEntity[2]
            Case gcd.poiMidPoint
                glPlus.PolygonFilled([gcd.Drawing.iEntity[0] - gcd.Metros(4), gcd.Drawing.iEntity[1], gcd.Drawing.iEntity[0], gcd.Drawing.iEntity[1] + gcd.Metros(4), gcd.Drawing.iEntity[0] + gcd.Metros(4), gcd.Drawing.iEntity[1], gcd.Drawing.iEntity[0], gcd.Drawing.iEntity[1] - gcd.Metros(4)], Color.Blue, Color.Green)
            Case gcd.poiQuadrant
                glPlus.PolygonFilled([gcd.Drawing.iEntity[0] - gcd.Metros(6), gcd.Drawing.iEntity[1], gcd.Drawing.iEntity[0], gcd.Drawing.iEntity[1] + gcd.Metros(6), gcd.Drawing.iEntity[0] + gcd.Metros(6), gcd.Drawing.iEntity[1], gcd.Drawing.iEntity[0], gcd.Drawing.iEntity[1] - gcd.Metros(6)], Color.Cyan, Color.Cyan)

            Case 0
                ' nada
            Case gcd.poiCenter, gcd.poiBasePoint

                glPlus.CIRCLE([gcd.Drawing.iEntity[0], gcd.Drawing.iEntity[1]], gcd.Metros(4), Color.Cyan, True, False)
                'glPlus.Rectangle2D(gcd.Drawing.iEntity[0] - gcd.Metros(4), gcd.Drawing.iEntity[1] - gcd.Metros(4), gcd.Metros(8), gcd.Metros(8), Color.Blue,,,, Color.Blue, 1, 1)

            Case Else
                glPlus.Rectangle2D(gcd.Drawing.iEntity[0] - gcd.Metros(4), gcd.Drawing.iEntity[1] - gcd.Metros(4), gcd.Metros(8), gcd.Metros(8), Color.Blue,,,, Color.Blue, 1, 1)
        End Select

    Endif

    If gcd.flgNewPosition Then
        clsEntities.CollectVisibleEntities
        gcd.flgNewPosition = False
    End If

End

' NUEVO Protocolo del Mouse para OpenGL: todo se envia a la clsJob actuante

Public Sub GLArea1_MouseDown()

    gcd.clsJob.mouseDown()

End

Public Sub GLArea1_DblClick()

    gcd.clsJob.DblClick()

End

Public Sub GLArea1_MouseMove()

    If Not gcd.clsJob Then Return
    Xr = gcd.Xreal(Mouse.x)
    Yr = gcd.Yreal(Mouse.y)

    ' Universal:
    gcd.clsJob.MouseMove()

    Me.lblCoord.Text = Format(Xr, Config.FormatCoord) & " : " & Format(Yr, config.FormatInquiries)

    If Mouse.Middle Then
        cadPan.MouseMove()
    Else If Mouse.Left Then

    Else If Mouse.Right Then

    Else
        ' If gcd.flgsearchingallowed Then
        '     gcd.Drawing.HoveredEntity = clsMouseTracking.CheckAboveEntity(Xr, Yr)
        '     If gcd.Drawing.HoveredEntity Then gcd.redraw
        '     ' If gcd.Drawing.HoveredEntityPrevious <> gcd.Drawing.HoveredEntity Then
        '     '     gcd.Drawing.HoveredEntityPrevious = gcd.Drawing.HoveredEntity
        '     '     gcd.Drawing.HoveredEntity = Null
        '     '
        '     ' Endif
        ' End If
        ReSearch

    End If

    '   If gcd.clsJob.gender <> "Pan" Then
    '     gcd.clsJobPreZoom = gcd.clsJob
    '     gcd.clsJob = cadPan
    '     gcd.clsJob.Start()
    '     ' glarea1.Refresh  ' glarea1.Refresh
    '     '
    '     '
    '   Else
    '
    '     gcd.clsJob = gcd.clsJobPreZoom
    '
    '   End If
    '
    ' End If

End

Public Sub GLArea1_MouseUp()

    gcd.clsJob.MouseUp()

End

Public Sub GLArea1_MouseWheel()

    gcd.clsJob.MouseWHEEL()

End

Public Sub TabPanel1_MouseWheel()

    Stop Event

End

Public Sub redraw()

    $hDrawTimer.Trigger
    Wait 0.001

End

Public Sub ReSearch()

    $hSearchTimer.Trigger
    Wait 0.001

End

' Public Sub txtInput_KeyRelease()
'
'     If Key.code = Key.Esc Then
'         txtInput.Hide
'         Me.SetFocus
'     End If
'
'     If (Key.code = Key.Enter) Or (Key.code = Key.Return) Then
'         gcd.clsJob.KeyText(txtInput.Text)
'
'         txtInput.Hide
'         Me.SetFocus
'     End If
'
' End

Public Sub Form_Keyrelease()

    Dim com As Variant
    Dim umx As Integer     '' Index in undo array
    Dim uEnty As Entity    '' Undo entity
    Dim aEnty, e As Entity    '' Actual entity
    Dim imx As Integer     '' Index in Entities array
    Dim SelectMode As Boolean

    ' Print Key.Code
    Dim t As Float = Timer

    ' If txtInput.Visible Then Return

    Select Key.Code

        Case Key.Enter, Key.Return
            Debug KeysAccumulator
            ' txtInput.Visible = False
            ' gcd.clsJob.KeyText(txtInput.Text)
            ' txtInput.Text = ""
            '
            ' Me.SetFocus
            '            Form_Activate()

            gcd.clsJob.KeyText("")
            KeysAccumulator = ""

        Case Key.f2
            ' t = Timer
            ' Dim NE As New Entity
            ' Debug "Creando 500.000 lineas"
            ' For a = 1 To 500000
            '     NE = cadLine.NewEntity([Rnd(-100, 100), Rnd(-100, -100), Rnd(100, 100), Rnd(100, 100)])
            '     Ngcd.CCC[e.gender].finish(ne)
            '     gcd.Drawing.oEntities.Add(ne, ne.Handle)
            '
            ' Next
            ' Debug "Creadas", Timer - t
            ' t = Timer
            ' gcd.FillLayers()
            ' gcd.Regen
            ' cadZoomE.Start()
            ' clsEntities.CollectVisibleEntities
            '
            ' Debug "Regen en ", Timer - t
            ' Dim oka As Boolean
            ' t = Timer
            ' For Each NE In gcd.Drawing.oEntities
            '     oka = Ngcd.CCC[e.gender].MouseOverMe(NE, 2000, 2000, 10)
            ' Next
            ' Debug "Tracking via Gcd.CCC[e.gender] en ", Timer - t
            '
            ' t = Timer
            '
            ' NE = clsMouseTracking.CheckAboveEntity(2000, 2000, 10)
            '
            ' Debug "Tracking via clsMouseTRacking en ", Timer - t
            '
            ' ' lleno poi
            ' t = Timer
            ' For Each NE In gcd.Drawing.oEntities
            '     Inc a
            '     gcd.Drawing.poiLines.Insert(NE.p.Copy())
            '     gcd.Drawing.oExtras.Add(ne.Handle, Str(a))
            ' Next
            ' Debug "Llenado del POI en ", Timer - t
            ' t = Timer
            ' a = puntos.inPolySegment(gcd.Drawing.poiLines, 2000, 2000, 10)
            ' Debug "Busqueda via POI en ", Timer - t
            ' Stop
            ' ftring = puntos.PolygonTriangulation3([185, -315, 185, -295, 179, -295, 179, -296, 184, -296, 184, -314, 179, -314, 179, -315])

            'ftring2 = puntos.PolygonTriangulation([185, -315, 185, -295, 179, -295, 179, -296, 184, -296, 184, -314, 179, -314, 179, -315])

            'puntos.Translate(ftring2, 80, 0)
            ' Dim NE As New Entity
            ' ne = cadLWPolyline.NewEntity(ftring2)
            ' gcd.Drawing.oEntities.Add(ne, ne.Handle)
            '
            ' ftring2 = [0, 0, 0, 20, -10, 20, -10, 15, -5, 15, -5, 10, -10, 10, -10, 0, 0, 0]
            ' 'ftring2 = puntos.InvertPolyline(ftring2)
            ' ne = cadLWPolyline.NewEntity(ftring2)
            ' gcd.Drawing.oEntities.Add(ne, ne.Handle)
            '
            ' ftring2 = New Float[]
            ' ftring2 = puntos.LinePolyIntersection([-10, 8, -1, 12], ne.p)
            ' Stop
        Case Key.F3
            ' test
            Utils.SaveClass(gcd.Drawing.oEntities[gcd.Drawing.oEntities.First], User.home &/ "SaveClassTest.json")

            Utils.SaveClass(gcd.Drawing, User.home &/ "SaveClassTestDrawing.json")
        Case Key.f5

            If FInspector.MyState > 0 Then FInspector.Close

            If gcd.Drawing.oSelected.Count > 0 Then
                FInspector.run(gcd.Drawing.oSelected[gcd.Drawing.oSelected.First])
            End If

        Case Key.f6

            gcd.DrawBounds = Not gcd.DrawBounds
            Me.redraw
        Case Key.F4

            gcd.DrawHatch = Not gcd.DrawHatch
            gcd.RegenList

        Case Key.BackSpace

            KeysAccumulator = Left(KeysAccumulator, -1)
            gcd.clsJob.KeyPress()

        Case Key.F11

        Case Key.Esc

            gcd.clsJob.KeyText("U")

        Case Key.Space
            Stop Event

        Case Key.Del
            gcd.clsJob.KeyText("Erase")

        Case Key.ControlKey
            KeysAccumulator = "Function"

        Case Else
            ' A GOOD KEY
            If InStr(KeysAccumulator, "Function") > 0 Then

                ' Select Key.Code
                '   Case Asc("1") ' Properties
                '
                '     Select PropertiesFlag
                '       Case 1 ' Tools
                '         PropertiesFlag = 2
                '         pnlProperties.Visible = True
                '         pnlIcons.Visible = False
                '         'btnSelectionMode.Value = False
                '       Case 2 ' Props
                '         PropertiesFlag = 0
                '         pnlProperties.Visible = False
                '         pnlIcons.Visible = False
                '         'btnSelectionMode.Value = True
                '
                '       Case Else ' Invisible
                '         PropertiesFlag = 1
                '         pnlProperties.Visible = False
                '         pnlIcons.Visible = True
                '
                '     End Select
                '
                '     If PropertiesFlag = False Then
                '       pnlProperties.Visible = True
                '       PropertiesFlag = True
                '       pnlIcons.Visible = False
                '       btnSelectionMode.Value = False
                '     Else
                '       pnlProperties.Visible = False
                '       PropertiesFlag = False
                '       pnlIcons.Visible = True
                '       btnSelectionMode.Value = True
                '     Endif
                '
                '   Case Asc("2") ' Layers
                '
                '     'Case Asc("3") ' Blocks
                '
                '     'Case Asc("4...") ' More...
                '     'KeysAccumulator &= "-" & Key.Text
                '     'Case Else
                '     '    KeysAccumulator = ""
                '     'pnlProperties.Visible = False
                '     'pnlDebug.Visible = False
                '
                '   Case Asc("3") ' Raw properties for debuging
                '     If RawFlag = False Then
                '       pnlRaw.Visible = True
                '       RawFlag = True
                '     Else
                '       pnlRaw.Visible = False
                '       RawFlag = False
                '     Endif
                '
                '   Case Asc("a"), Asc("A") ' Select/Unselect All
                '     SelectMode = True
                '     For Each aEnty In gcd.Drawing.arrEntities
                '       If aEnty.Selected Then
                '         SelectMode = False
                '         Break
                '       Endif
                '     Next
                '
                '     If SelectMode Then
                '       For Each aEnty In gcd.Drawing.arrEntities
                '         If aEnty.Selected = False Then
                '           aEnty.Selected = True
                '         Endif
                '       Next
                '     Else
                '       For Each aEnty In gcd.Drawing.arrEntities
                '         If aEnty.Selected Then
                '           aEnty.Selected = False
                '         Endif
                '       Next
                '     Endif
                '     fMain.regen
                '
                '   Case Asc("z"), Asc("Z") ' Undo
                '
                '     If gcd.Drawing.arrUndo.Count > 0 Then
                '       umx = gcd.Drawing.arrUndo.Max
                '
                '       uEnty = gcd.Drawing.arrUndo[umx]
                '       For Each aEnty In gcd.Drawing.arrEntities
                '         If aEnty.Handle = uEnty.Handle Then
                '           gcd.Drawing.arrEntities.Remove(imx, 1)
                '           gcd.Drawing.arrEntities.Add(uEnty, imx)
                '           gcd.Drawing.arrUndo.Remove(umx, 1)
                '           fMain.regen
                '           'gcd.Redraw
                '           Break
                '         Endif
                '         Inc imx
                '       Next
                '
                '     Endif
                '   Case Else
                '     KeysAccumulator = ""
                '
                ' End Select

            Else
                If key.text <> "" Then

                    KeysAccumulator &= Key.Text
                    'gcd.clsJob.KeyPress()

                    DrawingAids.ErrorMessage = ""
                    DrawingAids.Refresh
                End If
                ' If fmain.txtInput.Visible Then Return
                ' If Key.Normal <> "" Then
                '     fmain.txtInput.X = fmain.W / 2
                '     fmain.txtInput.Y = fmain.h / 2
                '     fmain.txtInput.SetFocus()
                '     fmain.txtInput.Text = Key.Text
                '     fmain.txtInput.Visible = True
                ' End If

            Endif

    End Select

    'DrawingAids.DibujaHelper

End

' Public Sub tbLayerForm_Click()
'
'     fLayersOnScreen.Move(tbLayerForm.ScreenX, tbLayerForm.ScreenY + tbLayerForm.h)
'     fLayersOnScreen.Show()
'
' End

Public Sub grdLayers_Click()

    If flgShowingLayers Then
        fLayersOnScreen.Hide
        flgShowingLayers = False

    Else
        If grdLayers.Column = 1 Then ' Visibility
            gcd.Drawing.CurrLayer.Visible = Not gcd.Drawing.CurrLayer.Visible

            If gcd.Drawing.CurrLayer.Visible Then grdLayers[0, 1].Picture = fLayersOnScreen.picVisibleOn Else grdLayers[0, 1].Picture = fLayersOnScreen.picVisibleOff

        Else If grdLayers.Column = 2 Then ' frozen
            gcd.Drawing.CurrLayer.Frozen = Not gcd.Drawing.CurrLayer.Frozen

            If gcd.Drawing.CurrLayer.Frozen Then grdLayers[0, 2].Picture = fLayersOnScreen.picFrozenOn Else grdLayers[0, 2].Picture = fLayersOnScreen.picFrozenOff

        Else If grdLayers.Column = 3 Then ' lock
            gcd.Drawing.CurrLayer.Locked = Not gcd.Drawing.CurrLayer.Locked

            If gcd.Drawing.CurrLayer.Locked Then grdLayers[0, 3].Picture = fLayersOnScreen.picLockedOn Else grdLayers[0, 3].Picture = fLayersOnScreen.picLockedOff

        Else

            flgShowingLayers = True
            fLayersOnScreen.Show()
            fLayersOnScreen.Move(grdLayers.ScreenX, grdLayers.ScreenY + grdLayers.h + 1)
            ' puede venir un cambio de Layers, lo que con una seleccion implica que se cambian
            ' las propiedades de dichas entidades y hay que regenerar
            fLayersOnScreen.Y = grdLayers.ScreenY + grdLayers.h + 1
        End If
    End If

End

' Public Sub FillWindowMenu()
'
'     Dim d As Drawing
'     Dim mItem As Menu
'
'     mnuWindow.Children.Clear
'
'     For Each d In gcd.Drawings
'         mItem = New Menu(mnuWindow)
'         mItem.Text = d.FileName
'         If d = gcd.Drawing Then mItem.Checked = True Else mItem.Checked = False
'         mItem.Action = "windowchange_" & d.FileName
'     Next
'
'     mItem = New Menu(mnuWindow)
'     mItem.Text = "" ' separador
'
'     ' y ahora agrego dos
'     mItem = New Menu(mnuWindow)
'     mItem.Text = ("Close")
'     mItem.Action = "window_close"
'
'     mItem = New Menu(mnuWindow)
'     mItem.Text = ("Close all")
'     mItem.Action = "window_closeall"
'
' End

' Public Sub ToggleButton3_Click()
'
'     If Not ToggleButton3.Value Then
'         ToggleButton3.Tag = CStr(ToggleButton3.Parent.h)
'         ToggleButton3.Parent.h = ToggleButton3.H
'     Else
'
'         ToggleButton3.Parent.h = CInt(ToggleButton3.tag)
'     End If
'
' End
'
' Public Sub ToggleButton4_Click()
'
'     If Not ToggleButton4.Value Then
'         ToggleButton4.Tag = CStr(ToggleButton4.Parent.h)
'         ToggleButton4.Parent.h = ToggleButton4.H
'     Else
'
'         ToggleButton4.Parent.h = CInt(ToggleButton4.tag)
'     End If
'
' End

' Public Sub tmrAutosave_Timer()
'
'     ' el autosave funciona solo si guarde antes, o sea si el dibujo tiene nombre
'     ' ademas se guarda solo en formato dxf, para acelerar el proceso
'
'     If Not gcd.Drawing.RequiresFileRename Then
'         If gcd.Drawing.RequiresSaving Then
'             If Dxf.SaveFile(gcd.Drawing.FileName & ".Autosave", gcd.Drawing.cModel) < 0 Then
'                 Print "Autosave error"
'             Else
'                 Print ("Autosaved to ") & gcd.Drawing.FileName & ".Autosave"
'             Endif
'         End If
'     End If
'
' End

' Public Sub tbnInspector_MouseUp()
'
'     If Mouse.Left Then
'
'         Config.TrackShowInspector = Not Config.TrackShowInspector
'         tbnInspector.Value = Config.TrackShowInspector
'         If Not Config.TrackShowInspector Then
'             Try fInspector.Close
'         Endif
'
'     Else If Mouse.Right Then
'
'         fDetectOptions.Show()
'
'     Endif
'
' End

Public Sub tbnOrtho2_Click()

    gcd.DrawBounds = Not gcd.DrawBounds
    Me.redraw

End
