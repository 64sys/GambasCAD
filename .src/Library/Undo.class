' Gambas class file

' This class implemets the Undo/Redo actions

Private cUndo As New Collection[]
' cUndo[]
'   cStage["1"]
'       "name"="Editar nudo"
'       "1"=clsNudo object
'   cStage["2"]
'       "name"="Editar barras"
'       "1"=clsBarra object
'       "A2"=clsBarra object addition
'       "D3"=clsBarra object deletion
'       "4"=clsBarra object

Private cRedo As New Collection[]
Public UndoStage As Integer
Public RedoStage As Integer
Private IsStageOpen As Boolean = False

Public Const TypeModify As Integer = 1
Public Const TypeCreate As Integer = 2
Public Const TypeDelete As Integer = 3

Public Function AddUndoItem(oItem As Object)

    ' agrego un item a la coleccion activa, si no hay instancia activa, la creo
    cUndo.Last.Add(oItem, oItem.Id)

End

'' Adds an undo stage where one or more stuff can be Undo'ed at once
Public Function OpenUndoStage(sName As String, iStageType As Integer) As Boolean

    Dim cStage As New Collection

    If sName = "" Then sName = ""
    cUndo.Add(cStage)        ' agrego al array que acumula acciones
    cStage.Add(sName, "name_" & CStr(iStageType))                   ' el primer item es el nombre de las acciones, ej: "Editar nudos"
    IsStageOpen = True

End

Public Function CloseUndoStage() As Boolean

    IsStageOpen = False

End

'' Esto debe ser llamado cuando el user presiona el boton de Undo
Public Sub DoUndo()

    Dim cLastUndo As Collection
    Dim FirstOne As Boolean = True
    Dim iType As Integer
    Dim indice As String
    Dim c As Variant
    Dim NewRedo As New Collection

    If cUndo.Count = 0 Then Return
    cLastUndo = cUndo.Last

    For Each c In cLastUndo
        ' el primero es accion
        If FirstOne Then
            iType = CInt(Mid(cLastUndo.Key, 6))
            FirstOne = False
            cRedo.Add(NewRedo)
            NewRedo.Add(c, cLastUndo.Key)
            Continue
        Endif
        Select Case iType
            Case Me.TypeModify
                indice = cLastUndo.Key

                NewRedo.Add(gcd.Drawing.Sheet.Entities[indice], cLastUndo.Key)
                c.Container.Entities[indice] = c

            Case Me.TypeCreate
                indice = cLastUndo.Key
                NewRedo.Add(gcd.Drawing.Sheet.Entities[indice], cLastUndo.Key)
                gcd.Drawing.Sheet.Entities.Remove(indice)

            Case Me.TypeDelete
                indice = cLastUndo.Key
                NewRedo.Add("nothing", cLastUndo.Key)
                gcd.Drawing.Sheet.Entities.Add(c, indice)

        End Select

    Next

    cUndo.Remove(cUndo.Max)

End

'' Esto debe ser llamado cuando el user presiona el boton de Undo
Public Sub DoRedo()

    Dim cLastRedo As Collection
    Dim FirstOne As Boolean = True
    Dim iType As Integer
    Dim indice As String
    Dim c As Variant
    Dim NewUndo As New Collection

    If cRedo.Count = 0 Then Return
    cLastRedo = cRedo.Last

    For Each c In cLastRedo
        ' el primero es accion
        If FirstOne Then
            iType = CInt(Mid(cLastRedo.Key, 6))
            FirstOne = False
            cUndo.Add(NewUndo)
            NewUndo.Add(c, cLastRedo.Key)
            Continue
        Endif
        Select Case iType
            Case Me.TypeModify
                indice = cLastRedo.Key
                NewUndo.Add(gcd.Drawing.Sheet.Entities[indice], cLastRedo.Key)
                gcd.Drawing.Sheet.Entities[indice] = c
            Case Me.TypeCreate
                indice = cLastRedo.Key
                NewUndo.Add(cLastRedo[cLastRedo.Key], cLastRedo.Key)
                cLastRedo[cLastRedo.Key].Container.Entities.Add(cLastRedo[cLastRedo.Key], cLastRedo[cLastRedo.Key].id)
            Case Me.TypeDelete
                indice = cLastRedo.Key
                NewUndo.Add(cLastRedo[cLastRedo.Key], cLastRedo.Key)
                cLastRedo[cLastRedo.Key].Container.Entities.Remove(cLastRedo[cLastRedo.Key].id)

        End Select

    Next

    cRedo.Remove(cRedo.Max)

End
