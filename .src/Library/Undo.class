' Gambas class file

' This class implemets the Undo/Redo actions

Public cUndo As New UndoStage[]
' cUndo[]
'   cStage["1"]
'       "name"="Editar nudo"
'       "1"=clsNudo object
'   cStage["2"]
'       "name"="Editar barras"
'       "1"=clsBarra object
'       "A2"=clsBarra object addition
'       "D3"=clsBarra object deletion
'       "4"=clsBarra object

Public cRedo As New UndoStage[]
Public UndoStage As Integer
Public RedoStage As Integer
Private IsStageOpen As Boolean = False

Public Const TypeModify As Integer = 1
Public Const TypeCreate As Integer = 2
Public Const TypeDelete As Integer = 3

Public Function AddUndoItem(oItem As Entity, Optional iType As Integer = -1)

    Dim eCopy As Entity
    ' agrego un item a la coleccion activa, si no hay instancia activa, la creo
    If iType < 0 Then iType = cUndo.Last.iTypeDefault

    Select Case iType
        Case TypeCreate

            cUndo.Last.cCreate.Add(oItem, oItem.Id)
        Case TypeModify
            ' necesito hacer una copia
            eCopy = clsEntities.ClonEntity(oItem, False)

            cUndo.Last.cModify.Add(eCopy, oItem.Id)
        Case TypeDelete

            cUndo.Last.cDelete.Add(oItem, oItem.Id)
    End Select

End

'' Adds an undo stage where one or more stuff can be Undo'ed at once
Public Function OpenUndoStage(sName As String, iStageType As Integer) As Boolean

    Dim cStage As New UndoStage

    If IsStageOpen Then Error.Raise("Undo stage already open")
    If sName = "" Then sName = "<no description>"
    cUndo.Add(cStage)        ' agrego al array que acumula acciones
    cStage.Name = sName   ' el primer item es el nombre de las acciones, ej: "Editar nudos"
    IsStageOpen = True
    cStage.iTypeDefault = iStageType

End

Public Function CloseUndoStage() As Boolean

    IsStageOpen = False

End

'' Esto debe ser llamado cuando el user presiona el boton de Undo
Public Sub DoUndo()

    Dim FirstOne As Boolean = True
    Dim iType As Integer
    Dim indice As String
    Dim c As Variant
    Dim e As Entity
    Dim NewRedo As New UndoStage

    If cUndo.Count = 0 Then Return

    For Each e In cUndo.Last.cCreate
        indice = cUndo.Last.cCreate.Key
        NewRedo.cCreate.Add(gcd.Drawing.Sheet.Entities[indice], indice)
        gcd.Drawing.Sheet.Entities.Remove(indice)

    Next

    For Each e In cUndo.Last.cModify
        indice = cUndo.Last.cModify.Key
        NewRedo.cModify.Add(gcd.Drawing.Sheet.Entities[indice], indice)
        e.Container.Entities[indice] = e

    Next

    For Each e In cUndo.Last.cDelete
        indice = cUndo.Last.cDelete.Key
        NewRedo.cDelete.Add(e, indice)
        gcd.Drawing.Sheet.Entities.Add(e, indice)

    Next

    NewRedo.iTypeDefault = cUndo.Last.iTypeDefault
    NewRedo.Name = cUndo.Last.Name
    cRedo.Add(NewRedo)
    cUndo.Remove(cUndo.Max)

End

'' Esto debe ser llamado cuando el user presiona el boton de Undo
Public Sub DoRedo()

    Dim cLastRedo As UndoStage
    Dim FirstOne As Boolean = True
    Dim iType As Integer
    Dim indice As String
    Dim e As Entity
    Dim NewUndo As New UndoStage

    If cRedo.Count = 0 Then Return

    For Each e In cRedo.Last.cCreate
        indice = cRedo.Last.cCreate.Key
        NewUndo.cCreate.Add(gcd.Drawing.Sheet.Entities[indice], indice)
        cRedo.Last.cCreate[indice].Container.Entities.Add(cRedo.Last.cCreate[indice], indice)

    Next

    For Each e In cRedo.Last.cModify
        indice = cRedo.Last.cModify.Key
        NewUndo.cModify.Add(gcd.Drawing.Sheet.Entities[indice], indice)
        e.Container.Entities[indice] = e

    Next

    For Each e In cRedo.Last.cDelete
        indice = cRedo.Last.cDelete.Key
        NewUndo.cDelete.Add(e, indice)
        cRedo.Last.cDelete[indice].Container.Entities.remove(indice)

    Next

    cUndo.Add(NewUndo)
    cRedo.Remove(cRedo.Max)

End
