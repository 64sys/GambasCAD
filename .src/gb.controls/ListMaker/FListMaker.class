' Gambas class file

Private $Internal As Collection
Private $RowType As Integer
Private $ObjectType As String

Private $a As Integer[] = [gb.Boolean, gb.Byte, gb.Short, gb.Integer, gb.Long, gb.Single, gb.Float, gb.Date, gb.String]
Private $d As Collection = ["Boolean": gb.Boolean, "Byte": gb.Byte, "Short": gb.Short, "Integer": gb.Integer, "Long": gb.Long, "Single": gb.Single, "Float": gb.Float, "Date": gb.Date, "String": gb.String]
Private $t As Collection = ["Boolean[]": gb.Boolean, "Byte[]": gb.Byte, "Short[]": gb.Short, "Integer[]": gb.Integer, "Long[]": gb.Long, "Single[]": gb.Single, "Float[]": gb.Float, "Date[]": gb.Date, "String": gb.String]
'Private $n As Integer[] = [gb.Byte, gb.Short, gb.Integer, gb.Long, gb.Single, gb.Float, gb.Date]
'Private $Numbers As String[] = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "-", "."]
Private $iRow As Integer
Private $iColumn As Integer
Property List As Variant
Private $Column As Integer
Private $Row As Integer

Public Sub _new()

    $Internal = New Collection

End

Private Sub Showlist(Optional iSel As Integer = -1)

    Dim r As Integer
    Dim va As Variant

    TableView1.Clear
    TableView1.Rows.Count = $Internal.Count

    r = 0
    TableView1.Columns.Count = 4

    Select $ObjectType
        Case "Collection"
            TableView1.Columns[0].W = 0 ' working Key
            TableView1.Columns[1].W = 1 ' collection Key
            TableView1.Columns[1].Expand = True
            TableView1.Columns[2].W = 1
            TableView1.Columns[2].Expand = True
            TableView1.Columns[3].W = 0

        Case Else
            TableView1.Columns[0].W = 0
            TableView1.Columns[1].W = 0
            TableView1.Columns[2].W = 1
            TableView1.Columns[2].Expand = True
            If $ObjectType <> "String[]" Then
                TableView1.Columns[2].Alignment = Align.Center
            Endif
            TableView1.Columns[3].W = 0

    End Select

    For Each va In $Internal
        TableView1[r, 0].Text = $Internal.Key
        TableView1[r, 1].Text = va[0]
        TableView1[r, 2].Text = va[1]
        TableView1[r, 3].Text = va[2]
        'If $ObjectType = "Collection" Then
        '  TableView1[r, 3].Text = va[1]
        'Else
        'Endif
        Inc r
    Next

    If iSel > -1 Then
        TableView1.Rows.Select(iSel, 1)
    Endif

    Debug $Row & ":" & $Column

End

Private Function List_Read() As Variant

    Return GetList()

End

Private Function GetList() As Variant

    Dim aBoolean As New Boolean[]
    Dim aByte As New Byte[]
    Dim aShort As New Short[]
    Dim aInteger As New Integer[]
    Dim aLong As New Long[]
    Dim aSingle As New Single[]
    Dim aFloat As New Float[]
    Dim aDate As New Date[]
    Dim aString As New String[]
    Dim aVariant As New Variant[]
    Dim oCtion As New Collection
    Dim v As Variant

    Select $ObjectType
        Case "Collection"

            For Each v In $Internal
                If Not oCtion.Exist(v[1]) Then
                    oCtion[v[1]] = v[2]
                Else
                    Debug v[1] & "Already Exist"
                Endif
            Next
            Return oCtion

        Case "Variant[]"
            For Each v In $Internal
                aVariant.Add(v)
            Next
            Return aVariant

        Case "Boolean[]"
            For Each v In $Internal
                aBoolean.Add(v)
            Next
            Return aBoolean

        Case "Byte[]"
            For Each v In $Internal
                aByte.Add(v)
            Next
            Return aByte

        Case "Short[]"
            For Each v In $Internal
                aShort.Add(v)
            Next
            Return aShort

        Case "Integer[]"
            For Each v In $Internal
                aInteger.Add(v)
            Next
            Return aInteger

        Case "Long[]"
            For Each v In $Internal
                aLong.Add(v)
            Next
            Return aLong

        Case "Single[]"
            For Each v In $Internal
                aSingle.Add(v)
            Next
            Return aSingle

        Case "Float[]"
            For Each v In $Internal
                aFloat.Add(v)
            Next
            Return aFloat

        Case "Date[]"
            For Each v In $Internal
                aDate.Add(v)
            Next
            Return aDate

        Case "String[]"
            For Each v In $Internal
                aString.Add(v)
            Next
            Return aString

        Case Else
            Return Null

    End Select

End

Private Sub List_Write(vList As Variant)

    Dim i As Integer
    Dim v As Variant
    Dim sKey As String

    $ObjectType = Object.Type(vList)

    Select $ObjectType
        Case "Collection"
            For Each v In vList
                If $a.Exist(TypeOf(v)) Then
                    sKey = UUID()
                    $Internal[sKey] = [vList.Key, v, TypeOf(v)]
                Endif
            Next
        Case "Variant[]"
            For i = 0 To vList.Max
                If $a.Exist(TypeOf(vList[i])) Then
                    sKey = UUID()
                    $Internal[sKey] = [CStr(i), vList[i], TypeOf(vList[i])]
                Endif
            Next

        Case "Boolean[]", "Byte[]", "Short[]", "Integer[]", "Long[]", "Single[]", "Float[]", "Date[]", "String[]"
            For i = 0 To vList.Max
                sKey = UUID()
                $Internal[sKey] = [CStr(i), vList[i], TypeOf(vList[0])]
            Next
    End Select

    showlist()

End

Public Sub TableView1_Activate()

    TableView1.Edit()
    $iColumn = TableView1.Column
    $iRow = TableView1.Row

End

Public Sub TableView1_Save(Row As Integer, Column As Integer, Value As String)

    Dim o As Object

    'If $Internal[TableView1[Row, 0].Text][0] = Value Then Return 'Evitamos asignaciones y eventos in√∫tiles
    Select Column
        Case 1
            $Internal[TableView1[Row, 0].Text][0] = Value
            TableView1[Row, Column].Text = Value
            o = Me.Parent
            o.Raise_Changed($Internal)
        Case 2
            Select CInt(TableView1[Row, 3].Text)
                Case gb.String
                    $Internal[TableView1[Row, 0].Text][1] = Value
                Case gb.Float
                    $Internal[TableView1[Row, 0].Text][1] = CFloat(Value)
                Case gb.Integer, gb.Byte, gb.Short, gb.Long
                    $Internal[TableView1[Row, 0].Text][1] = Val(Value)
                Case Else
                    $Internal[TableView1[Row, 0].Text][1] = Value

            End Select
            TableView1[Row, Column].Text = Value
            o = Me.Parent
            o.Raise_Changed($Internal)
    End Select

End

Public Sub TableView1_KeyPress()

    Select Key.Code
        Case Key.Insert, Key.Delete, Key.Up, Key.Down
            Update(Key.Code)
    End Select

End

Private Sub Update(iMode As Integer)

    Dim oTmp As New Collection
    Dim r As Integer
    'Dim v As Variant
    Dim iType As Integer
    Dim fropt As FSelect
    Dim sKey As String
    Dim vDef As String
    Dim o As Object

    Select iMode
        Case Key.Insert
            If $ObjectType = "Collection" Then
                fropt = New FSelect
                iType = fropt.Run(("Please select data type"), $d, ("Data type"), $RowType, ("Acept"), ("Cancel"))
            Else
                If $t.Exist($ObjectType) Then
                    iType = $t[$ObjectType]
                Endif
            Endif
            '' Defaults
            Select iType
                Case 9
                    vDef = UUID()
                Case Else
                    vDef = 0
            End Select

            For r = 0 To $Internal.Keys.Max
                If r = $Row Then
                    sKey = UUID()
                    oTmp[sKey] = [CStr(r), vDef, iType]
                    oTmp[$Internal.Keys[r]] = $Internal[$Internal.Keys[r]]
                Else
                    oTmp[$Internal.Keys[r]] = $Internal[$Internal.Keys[r]]
                Endif
            Next
            $Internal.Clear
            $Internal = oTmp.Copy()
            o = Me.Parent
            o.Raise_Changed($Internal)
            showlist()

        Case Key.Delete
            For r = 0 To $Internal.Keys.Max
                If r <> $Row Then
                    oTmp[$Internal.Keys[r]] = $Internal[$Internal.Keys[r]]
                Endif
            Next
            $Internal.Clear
            $Internal = oTmp.Copy()
            $Internal = oTmp.Copy()
            o = Me.Parent
            o.Raise_Changed($Internal)
            showlist()

        Case Key.Up
            If Key.Control Then
                If $Row > 0 Then
                    For r = 0 To $Internal.Keys.Max
                        If $Row - 1 = r Then
                            oTmp[$Internal.Keys[r]] = $Internal[$Internal.Keys[$Row]]
                            oTmp[$Internal.Keys[$Row]] = $Internal[$Internal.Keys[r]]
                        Else
                            If $Row <> r Then
                                oTmp[$Internal.Keys[r]] = $Internal[$Internal.Keys[r]]
                            Endif
                        Endif
                    Next
                    $Internal.Clear
                    $Internal = oTmp.Copy()
                    o = Me.Parent
                    o.Raise_Changed($Internal)
                    showlist($Row)
                Endif
            Endif

        Case Key.Down
            If Key.Control Then
                If $Row < $Internal.Keys.Max Then
                    For r = 0 To $Internal.Keys.Max
                        If $Row = r Then
                            oTmp[$Internal.Keys[r]] = $Internal[$Internal.Keys[r + 1]]
                            oTmp[$Internal.Keys[r + 1]] = $Internal[$Internal.Keys[r]]
                        Else
                            If $Row + 1 <> r Then
                                oTmp[$Internal.Keys[r]] = $Internal[$Internal.Keys[r]]
                            Endif
                        Endif
                    Next
                    $Internal.Clear
                    $Internal = oTmp.Copy()
                    o = Me.Parent
                    o.Raise_Changed($Internal)
                    Showlist($Row)
                Endif
            Endif

    End Select

End

Public Sub TableView1_Select()

    $Column = TableView1.Column
    $Row = TableView1.Row
    $RowType = CInt(TableView1[TableView1.Row, 3].Text)

    Debug $Row & ":" & $Column

End

Private Function UUID() As String

    Return RTrim(File.Load("/proc/sys/kernel/random/uuid"))

End
