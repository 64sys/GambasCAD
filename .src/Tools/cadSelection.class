' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco

' this is the Main Job, either we are doing this or other job
Inherits ToolsBase
' Create Static
Public Const Gender As String = "DEFAULT"

Public Const ModePointSelection As Integer = 1             ' only mark a point
Public Const ModeRectSelection As Integer = 2              ' make a rect
Public Const ModeNewSelection As Integer = 3          ' select some entities
Public Const ModeSelectEntitiesListed As Integer = 4    '  but only from EntityType list\
Public Const ModeAddEntities As Integer = 5             ' add select some entities
Public Const ModeRemoveEntities As Integer = 6          ' remove select some entities

Public EntityType As String[]

Public iEntityForEdit As Integer = -1
Public GripPoint As Grip
Public GripHovered As Grip
Public GripCopying As Boolean = False
'Public GripCopying As Boolean = False

Public dX As Float
Public dY As Float
Public ToolActive As Boolean = False
Public PanActive As Boolean = False
Public GripActive As Boolean = False
Public RectActive As Boolean = False

' Funcionamiento:

' ToolActive: significa que otra Tool (Copy, Move, etc) le pidio a esta que modifique la seleccion de entidas

' A MouseDown
' A.1 Izquierdo
' A.1.1 No estoy sobre ninguna entidad -> Inicio una seleccion rectangular ActionActive = ActionRectActive
' A.1.2 Estoy sobre una entidad
' A.1.2.1 No esta seleccionada -> seleccionar
' A.1.2.2 Esta seleccionada previamente
' A.1.2.2.1 Estoy sobre un grip -> Inicio edicion por grip ActionActive = ActionGripActive (solo si ToolActive=False)
' A.1.2.2.2 No estoy sobre un grip -> deseleccionar
' A.2 Derecho
' A.2.1 ToolActive = False?
' A.2.1.1 No tengo ninguna seleccion previa-> Repito el ultimo comando, independientemente de si estoy sobre una entidad o no
' A.2.1.2 Tengo una seleccion previa -> Menu: Cortar, Copiar, Agrupar, Desagrupar, Llevar al layer actual, etc
' A.2.2 ToolActive = True? -> Finalizo la seleccion y vuelvo a la Tool
' A.3 Medio -> Inicio el Paneo ActionActive = ActionPanActive

' B MouseMove
' B.1 ActionActive = ActionRectActive: actualizo coordenadas del punto final del Rect
' B.2 ActionActive = ActionGripActive: modifico la entidad con la nueva posicion del punto
' B.3 ActionActive = ActionPanActive: mando la coordenada a cadPan
' B.4 ActionActive = 0: nada

' C MouseUp
' C.1 Izquierdo
' C.1.1 ActionActive = ActionRectActive -> Finalizo la seleccion por recuadro
' C.1.2 ActionActive = ActionGripActive -> Finalizo la edicion por grips
' C.1.3 ActionActive = ActionPanActive -> nada
' C.1.4 ActionActive = 0
' C.2 Derecho -> nada
' C.3 Medio -> ActionActive = ActionPanActive -> finalizo el paneo

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 2) As Boolean
    ' Modes:
    '       0 = Move, all points in the element must be selected, or click on it.
    '       1 = Stretch, selection may be partial, each element is called to see if the support stretching

    Me.Mode = _Mode

    If Me.Mode = ModeNewSelection Then
        fMain.PopupMenu = ""                    ' no hay menu contextual
        Me.Prompt = "New selection"
        If gcd.clsJobPrevious.gender = cadEntityBuilder.gender Then
            If cadEntityBuilder.LastEntity Then
                Me.Prompt &= " or <rigth click> to repeat " & cadEntityBuilder.LastEntity.gender
            End If
        End If
    Else If Me.Mode = ModeAddEntities Then
        Me.Prompt = "Add entities to selection"
    Else If Me.Mode = ModeRemoveEntities Then
        Me.Prompt = "Remove entities from selection"

    Else
        Utils.MenuMaker(fMain, "mToolsBase", Me.ContextMenu)
        gcd.Drawing.Sheet.GlSheet.PopupMenu = "mToolsBase"
    End If

    Me.PoiChecking = True
    gcd.DrawHoveredEntity = True
    GripPoint = Null

End

' Public Sub DblClick()
'
'     Dim k As Single
'     Dim e As Entity
'     Dim te As Entity
'
'
'
'     Me.EntityForEdit = clsMouseTracking.CheckAboveEntity(gcd.Xreal(Mouse.x), gcd.Yreal(Mouse.y))
'     Return
'
'     If Not gcd.flgSearchingPOI Then
'         gcd.Drawing.iEntity = clsMouseTracking.CheckBestPOI(gcd.Xreal(mouse.x), gcd.Yreal(mouse.Y))
'     Else    ' estoy buscando, pero me movi, asi que me desengancho del POI anterior
'
'         gcd.Drawing.iEntity[0] = gcd.Xreal(mouse.x)
'         gcd.Drawing.iEntity[1] = gcd.Yreal(mouse.y)
'         gcd.Drawing.iEntity[2] = -1                 ' POI type
'
'     End If
'
'     If gcd.Drawing.iEntity[3] >= 0 Then
'
'         'Stop
'         ' I comment the abobe line because its stop my tool also. What is the idea whit stop?
'         '  aca podes lanzar tu editor de texto u otras propiedades
'         k = gcd.Drawing.iEntity[3]
'         e = gcd.Drawing.Entities[k]
'
'         ' Select e.Gender
'         '   Case "Text"
'         '     If EditingText = False Then
'         '       ' Copying the entity for undo
'         '       te = clsEntities.ClonEntity(e)
'         '       te.Handle = e.Handle
'         '       ftx = New FText([pnlDrawing.ScreenX + 7, pnlDrawing.ScreenY + pnlDrawing.H - 7], e)
'         '       ftx.Run()
'         '       While EditingText = False
'         '         Wait 0.1
'         '       Wend
'         '       gcd.regen
'         '       EditingText = False
'         '     Endif
'         ' End Select
'     Endif
'
' End

Public Function MouseDown()

    Dim i As Integer, e As Entity

    'GripPoint = -1
    Me.SelStartX = mouse.X
    Me.SelStartY = mouse.Y
    Me.SelStartXr = gcd.Xreal(Me.SelStartX)
    Me.SelStartYr = gcd.Yreal(Me.SelStartY)

    dX = Me.SelStartXr
    dY = Me.SelStartYr

    Me.SelEndX = Me.SelStartX
    Me.SelEndy = Me.SelStartY

    Me.SelEndXr = Me.SelStartXr
    Me.SelEndyr = Me.SelStartYr

    Me.PoiChecking = False

    ' A.1 Izquierdo
    If Mouse.Left Then
        If Not Me.ToolActive Then
            ' veo si esta en un grip(solo si ToolActive = False)

            ' chequeo si estoy sobre un grip
            GripPoint = FindGrip(Me.SelStartXr, Me.SelStartYr)

            If GripPoint Then

                ' creo una entidad al vuelo, clonada de la engripada
                Me.OriginalEntityForEdit = clsEntities.ClonEntity(GripPoint.AsociatedEntity, False)
                Me.EntityForEdit = GripPoint.AsociatedEntity
                gcd.Drawing.Sheet.SkipSearch = GripPoint.AsociatedEntity

                Return
            End If

        End If

        If Not gcd.Drawing.HoveredEntity Then 'Or Me.ModeRectSelection Then
            ' A.1.1 No estoy sobre ninguna entidad -> Inicio una seleccion rectangular ActionActive = ActionRectActive
            Me.RectActive = True
        Else
            ' A.1.2 Estoy sobre una entidad

            If Not gcd.Drawing.Sheet.EntitiesSelected.Exist(gcd.Drawing.HoveredEntity.Id) Then
                ' A.1.2.1 No esta seleccionada -> seleccionar
                gcd.Drawing.Sheet.EntitiesSelected.add(gcd.Drawing.HoveredEntity, gcd.Drawing.HoveredEntity.Id)
                gcd.Drawing.Sheet.Grips.Clear
                gcd.CCC[gcd.Drawing.HoveredEntity.Gender].generategrips(gcd.Drawing.HoveredEntity)
                clsEntities.glGenDrawListSel
                fMain.FillProperties(gcd.Drawing.Sheet.EntitiesSelected)
                gcd.Redraw
            Else
                ' A.1.2.2 Esta seleccionada previamente
                ' A.1.2.2.2 No estoy sobre un grip -> deseleccionar
                gcd.Drawing.Sheet.EntitiesSelected.Remove(gcd.Drawing.HoveredEntity.Id)
                fMain.FillProperties(gcd.Drawing.Sheet.EntitiesSelected)
                clsEntities.glGenDrawListSel
                gcd.Redraw
            End If

        Endif

        Return ' este return es para evitar clicks simultaneos
    End If

    If Mouse.Right Then

        ' A.2 Derecho
        If Not Me.ToolActive Then
            ' A.2.1 ToolActive = False?
            If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then
                ' A.2.1.1 No tengo ninguna seleccion previa-> Repito el ultimo comando, independientemente de si estoy sobre una entidad o no
                If gcd.clsJobPrevious Then

                    If gcd.clsJobPrevious.gender = cadEntityBuilder.gender Then
                        If cadEntityBuilder.LastEntity Then

                            gcd.clsJob = gcd.clsJobPrevious
                            gcd.clsJob.Start()

                        Endif

                    Else

                        If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then              'Sin entidades seleccionadas podria significar cancelar

                            gcd.clsJob = gcd.clsJobPrevious
                            gcd.clsJob.Cancel
                        Else If gcd.Drawing.Sheet.EntitiesSelected.Count = 1 Then
                            gcd.clsJob = gcd.clsJobPrevious
                            gcd.clsJob.Start()

                        Else ' tenemos varias entidades
                            gcd.clsJob = gcd.clsJobPrevious
                            gcd.clsJob.Start()

                        End If
                    End If
                End If
            Else
                ' A.2.1.2 Tengo una seleccion previa -> Menu: Cortar, Copiar, Agrupar, Desagrupar, Llevar al layer actual, etc
                ' Esto salta solo, pero debo configurarlo en algun lado
                gcd.clsJob = gcd.clsJobPrevious
                gcd.clsJob.Start()

            End If

        Else
            ' A.2.2 ToolActive = True? -> Finalizo la seleccion y vuelvo a la Tool

        End If
        Return ' este return es para evitar clicks simultaneos
    End If

    If Mouse.MIddle Then
        ' A.3 Medio -> Inicio el Paneo ActionActive = ActionPanActive

        Return ' este return es para evitar clicks simultaneos
    End If

    '         If gcd.Drawing.Sheet.Viewport Then
    '
    '             ' si el click esta fuera del viewport, lo desestimo
    '             If Me.SelStartXr < gcd.Drawing.Sheet.Viewport.X0 Or Me.SelStartXr > gcd.Drawing.Sheet.Viewport.X1 Or Me.SelStartYr < gcd.Drawing.Sheet.Viewport.Y0 Or Me.SelStartYr > gcd.Drawing.Sheet.Viewport.Y1 Then
    '                 gcd.Drawing.Sheet.Viewport = Null ' Desactivo el viewport
    '             Else
    '
    '                 gcd.Drawing.GLAreaInUse.Mouse = Mouse.SizeAll
    '                 Me.active = True
    '             End If
    '         Else
    '
    '
    '
    '             If Me.Mode = Me.ModeRectSelection Then
    '                 Me.Active = True
    '
    '             Else
    '
    '
    '                 If gcd.Drawing.HoveredEntity.selected Then
    '
    '
    '                 Else
    '                     clsEntities.SelectElem(gcd.Drawing.HoveredEntity)                 '   -> la selecciono
    '
    '                 Endif
    '                 Me.Active = False
    '
    '                 clsEntities.GLGenDrawListSel(0)
    '
    '
    '             End If
    '         End If
    '     End If
    ' End If

End

Public Sub MouseUp()

    Dim Crossing As Boolean = False
    Dim s, tipo As String
    Dim t As Float = Timer
    Dim e As Entity

    Me.SelEndX = mouse.x
    Me.SelEndy = mouse.Y

    ' Paso a coordenadas reales
    Me.StartXr = gcd.Xreal(Me.SelStartX)
    Me.StartYr = gcd.Yreal(Me.SelStartY)
    Me.EndXr = gcd.Xreal(Me.SelEndX)
    Me.Endyr = gcd.Yreal(Me.SelEndy)

    ' If gcd.Drawing.Sheet.Viewport Then
    '     '
    '     gcd.Drawing.GLAreaInUse.Mouse = Mouse.Cross
    '     gcd.flgNewPosition = True
    '     Me.active = False
    '     Return
    ' End If
    '

    If Mouse.Left Then
        ' C.1 Izquierdo

        Me.PoiChecking = True
        If Me.RectActive Then
            ' C.1.1 ActionActive = ActionRectActive -> Finalizo la seleccion por recuadro
            Me.RectActive = False

            ' corrijo para start<end
            If Me.SelStartX > Me.SelEndX Then
                crossing = True
                Swap Me.SelStartX, Me.SelEndX
            Else
                crossing = False
            End If
            If Me.SelStartY < Me.SelEndy Then Swap Me.SelStartY, Me.SelEndy                     ' this is FLIPPED

            tipo = "nueva"
            If Mouse.Shift Then tipo = "resta" ' estos elementos de la seleccion anterior
            If Mouse.Control Then tipo = "suma" ' elementos a la seleccion anterior

            ' Paso a coordenadas reales
            Me.SelStartXr = gcd.Xreal(Me.SelStartX)
            Me.SelStartYr = gcd.Yreal(Me.SelStartY)
            Me.SelEndXr = gcd.Xreal(Me.SelEndX)
            Me.SelEndyr = gcd.Yreal(Me.SelEndy)

            ' veo si el rectangulo es suficientemente grande como para representar una seleccion por rectangulo
            If (Me.SelEndX - Me.SelStartX + (-Me.SelEndy + Me.SelStartY)) > 10 Then

                Me.selectionCount = clsEntities.SelectionSquare(Me.SelStartXr, Me.SelStartYr, Me.SelEndXr, Me.SelEndyr, tipo, crossing)
                Debug "Select parsing time ", Timer - t

            Else
                clsEntities.DeSelection()

            End If
            e = gcd.Drawing.Sheet.EntitiesSelected[gcd.Drawing.Sheet.EntitiesSelected.Last]
            If e Then
                'gcd.Drawing.Sheet.Grips.Clear
                gcd.CCC[e.Gender].generategrips(e)
            Endif
            fProps.FillProperties(gcd.Drawing.Sheet.EntitiesSelected)
            clsEntities.GLGenDrawListSel()

            Me.Prompt = ("Selected") & " " & Str$(Me.selectionCount) & " " & ("elements")

            If gcd.clsJobCallBack Then
                Try gcd.clsJobCallBack.run()
                Return
            Else

                ' vamos a darle mas funcionalidad
                If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then

                Else If gcd.Drawing.Sheet.EntitiesSelected.Count = 1 Then

                    gcd.Drawing.Sheet.GlSheet.PopupMenu = "mColors"

                Else ' tenemos varias entidades

                    gcd.Drawing.Sheet.GlSheet.PopupMenu = "mEntities"

                End If
            Endif
        End If

        If GripPoint Then

            ' C.1.2 ActionActive = ActionGripActive -> Finalizo la edicion por grips
            ' guardo todo
            s = GripPoint.ToolTip & (" in ") & GripPoint.AsociatedEntity.Gender
            gcd.Drawing.uUndo.OpenUndoStage(s, Undo.TypeModify)
            gcd.Drawing.uUndo.AddUndoItem(Me.OriginalEntityForEdit)
            Me.OriginalEntityForEdit = Null
            clsEntities.glGenDrawList(Me.EntityForEdit)
            clsEntities.glGenDrawListLAyers(Me.EntityForEdit.pLayer)
            Me.EntityForEdit = Null
            e = GripPoint.AsociatedEntity
            gcd.Drawing.Sheet.Grips.Clear
            gcd.CCC[e.Gender].generategrips(e)
            GripPoint = Null

        End If

        If Me.Mode = Me.PanActive Then
            ' C.1.3 ActionActive = ActionPanActive -> nada
        End If

        If Me.Mode = False Then
            ' C.1.4.1 Estoy sobre una entidad

        Endif
        ' C.1.4 ActionActive = 0

        Return ' este return es para evitar clicks simultaneos
    End If

    If Mouse.Right Then
        ' C.2 Derecho -> nada
        Return ' este return es para evitar clicks simultaneos
    End If

    If Mouse.MIddle Then

        ' C.3 Medio -> ActionActive = ActionPanActive -> finalizo el paneo
        Return ' este return es para evitar clicks simultaneos
    End If

    gcd.Redraw

End

Public Sub MouseMove()

    Dim g As Grip, e As Entity

    Me.SelEndX = mouse.X
    Me.SelEndy = mouse.Y
    Me.SelEndXr = gcd.Xreal(Me.SelEndX)
    Me.SelEndyr = gcd.Yreal(Me.SelEndy)

    GripHovered = FindGrip(Me.SelStartXr, Me.SelStartYr)

    ' yo soy el responsable de chequear POI
    If Not gcd.flgSearchingPOI Then
        If GripPoint Then
            'e = GripPoint.AsociatedEntity

            gcd.Drawing.iEntity = clsMouseTracking.CheckBestPOI(Me.SelEndXr, Me.SelEndYr)

            If (gcd.Drawing.iEntity[2] > 0) Then

                Me.SelEndXr = gcd.Drawing.iEntity[0]
                Me.SelEndYr = gcd.Drawing.iEntity[1]

                ' Else
                '

            End If
            Me.SelEndXr = gcd.Near(Me.SelEndXr)
            Me.SelEndYr = gcd.Near(Me.SelEndYr)
        End If
    End If
    If Me.Active And Me.ModeRectSelection Then
        ' B.1 ActionActive = ActionRectActive: actualizo coordenadas del punto final del Rect
        ' (se hace mas arriba)
    Else If GripPoint Then
        ' B.2 ActionActive = ActionGripActive: modifico la entidad con la nueva posicion del punto
        If GripCopying Then

        Else

            GripEdit
        Endif
        DrawingAids.txtFrom = GripPoint.ToolTip

    Else If Me.Active And Me.PanActive Then
        ' B.3 ActionActive = ActionPanActive: mando la coordenada a cadPan
        ' (ni siquiera deberiamos estar aca, deberiamos estar en cadPan.class)
    Else
        ' B.4 ActionActive = 0: nada
    End If

    ' Else

    ' End If

End

Public Function KeyText(EnteredText As String)

    ' in this case, we try to run the command wich is a class
    Dim o As Object, RunWith As String, c As Class

    EnteredText = UCase(Trim(EnteredText))
    If EnteredText = "" Then Return                                ' no BS here

    Select Case EnteredText
        Case "CENTER"
            gcd.PanTo(0, 0)
            gcd.Redraw
            'gcd.regen
        Case "REGEN"
            gcd.regen
        Case "REGENALL"
            gcd.PanToOrigin
            gcd.regen
        Case "REDRAW"
            gcd.Redraw

        Case Else
            'o = cadDimension ' a test
            gcd.clsJobPrevious = gcd.clsJob

            If gcd.CCC.Exist(EnteredText) Then
                o = gcd.CCC[EnteredText]
            Else

                DrawingAIds.ErrorMessage = "Command not recognized"
                Return
            Endif

            ' check if the class needs to be run trough other
            If o.usewith = "" Then                        ' its a tool
                gcd.clsJob = o
                gcd.clsJob.start

            Else                                                    ' its propably an eentity

                gcd.clsJob = gcd.CCC[o.usewith]
                gcd.clsJob.start(o)

            End If

    End Select

    Return

    ' TODO: dejar comentado mientras hagamos debug
    '' catch

    DrawingAIds.ErrorMessage = "Command not recognized"
    '
    '

End

Public Sub Draw() ' esta rutina es llamada por FCAD en el evento DrawingArea_Draw
    ' por ultimo, y para que se vea arriba, la seleccion

    If Me.RectActive Then

        ' si estamos dentro un viewport no hay nada que dibujar, porque no estamos seleccionando nada
        If gcd.Drawing.Sheet.Viewport Then Return

        If Me.SelStartX > Me.SelEndX Then                               ' Seleccion crossing, o sea que si cualquier arista del rectangulo cruza el bounding poligon, queda seleccionado

            glx.Rectangle2D(Me.SelStartXr, Me.SelStartYr, Me.SelEndXr - Me.SelStartXr, Me.SelEndyr - Me.SelStartYr, Color.RGB(224, 220, 207, 215),,,, Color.red, 1, gcd.stiDashedSmall, 2)

        Else                                                            ' seleccion full, todos los puntos deben estar adentro

            glx.Rectangle2D(Me.SelStartXr, Me.SelStartYr, Me.SelEndXr - Me.SelStartXr, Me.SelEndyr - Me.SelStartYr, Color.RGB(224, 220, 207, 215),,,, Color.Green, 1, gcd.stiDashedSmall, 2)

        End If
        Return
    End If

    If Me.EntityForEdit Then Gcd.CCC[Me.EntityForEdit.Gender].Draw(Me.EntityForEdit)
    If Me.OriginalEntityForEdit Then
        If GripCopying Then
        Else
            Gcd.CCC[Me.OriginalEntityForEdit.Gender].DrawShadow(Me.OriginalEntityForEdit)
        End If
    End If
    If GripPoint Then

        Gcd.CCC[GripPoint.AsociatedEntity.Gender].DrawEditing(GripPoint)
        If GripCopying Then
        Else

            Gcd.CCC[GripPoint.AsociatedEntity.Gender].DrawShadow(Me.EntityForEdit)
        Endif
        DrawingAids.DrawSnapText()

    Else If GripHovered Then

        DrawingAids.Helper.texto = GripHovered.ToolTip
        DrawingAids.Helper.dX = 15
        DrawingAids.Helper.dY = 15

    Endif

    'EntityForEdit.Gcd.CCC[e.gender].drawremark(EntityForEdit)
    'gl.CallList(gcd.Drawing.GlListEntitiesSelected)
    'clsEntities.DrawPoiSymbols(EntityForEdit)

    ' Else
    '
    '     gl.CallList(gcd.Drawing.GlListEntitiesSelected)
    ' End If

End

Public Sub GripEdit()

    If GripPoint Then
        If GripCopying Then
            ' GripPoint.X = Me.SelEndXr
            ' GripPoint.Y = Me.SelEndYr
            ' gcd.CCC[GripPoint.AsociatedEntity.Gender].translate(GripPoint.AsociatedEntity, Me.SelEndXr - Me.SelStartXr, Me.SelEndYr - Me.SelStartYr)

        Else

            GripPoint.X = Me.SelEndXr
            GripPoint.Y = Me.SelEndYr
            gcd.CCC[GripPoint.AsociatedEntity.Gender].GripEdit(GripPoint)
        Endif
        gcd.redraw

    Endif

End

Public Function FindGrip(x As Float, y As Float) As Grip

    Dim g As Grip

    For Each g In gcd.Drawing.Sheet.Grips
        If puntos.Around(x, y, g.x, g.y, gcd.Metros(Config.GripProximityDistance)) Then

            Return g
        Endif
        '
    Next
    DrawingAids.txtFrom = ""
    Return Null

End

Public Sub KeyDown(iCode As Integer)

    If iCode = Key.ControlKey Then GripCopying = True Else GripCopying = False

End
