' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Inherits ToolsBase
Public Const Gender As String = "MTEXTS"

Public StepsDone As Integer

Public UserResponse As Integer  ' 1 = Cancel ; 2 =
Public entHatch As Entity

Public Function Start(Optional filename As Variant, _mode As Integer = 0) As Boolean

    Dim xf As String[]
    Dim f As String
    Dim iREt, nsel, i As Integer
    Dim eBorder As Entity
    Dim p, p2 As Pattern
    Dim hp As HatchPattern
    Dim h As Hatch
    Dim c, s, x, y As Float

    ' desde el grafico entramos siempre a esta parte de la clase
    ' yo tengo q saber el estado de la comunicacion con el user
    ' entonces verifico

    Select Case StepsDone
        Case 0

            fMText.Show

            '     Debug gcd.Drawing.LastHatchFile
            '
            '     Select Case iRet
            '         Case 2 ' busqueda de contorno
            '             gcd.clsJobPrevious = Me
            '             gcd.clsJob = cadSelection
            '
            '             gcd.Drawing.Sheet.GlSheet.PopupMenu = ""
            '
            '             StepsDone = 1 ' cuando vuelvo aca, ya tengo un contorno
            '
            '         Case 1 ' el user cancelo el hetch
            '             gcd.clsJobPrevious = Me
            '             gcd.clsJob = cadSelection
            '             StepsDone = 0 ' cuando vuelvo aca, empiezo de nuevo
            '
            '     End Select
            '
            ' Case 1 ' vengo de seleccionar los parametros de hatch
            '
            '     nSel = gcd.Drawing.EntitiesSelected.Count
            '     If nsel = 0 Then Return
            '     If (gcd.Drawing.EntitiesSelected[gcd.Drawing.EntitiesSelected.First].Gender <> "LWPOLYLINE") And (gcd.Drawing.EntitiesSelected[gcd.Drawing.EntitiesSelected.First].PolyLine.Count < 6) Then
            '         Message("El contorno esta mal definido")
            '
            '     Else
            '         StepsDone = 2
            '         iRet = FHatch.Showmodal()
            '
            '         Debug gcd.Drawing.LastHatchFile
            '
            '         Select Case iRet
            '             Case 2 ' nueva busqueda de contorno
            '                 gcd.clsJobPrevious = Me
            '                 gcd.clsJob = cadSelection
            '                 StepsDone = 1 ' cuando vuelvo aca, ya tengo un contorno
            '
            '             Case 1 ' el user cancelo el hetch
            '                 gcd.clsJobPrevious = Me
            '                 gcd.clsJob = cadSelection
            '                 StepsDone = 0 ' cuando vuelvo aca, empiezo de nuevo
            '
            '             Case 3 ' confirma el Hatch
            '
            '                 entHatch = gcd.Drawing.LastEntity
            '                 entHatch.Handle = gcd.NewHandle()
            '                 entHatch.PolyLine.Clear
            '                 entHatch.pBlock.PolyLines.Clear
            '
            '                 For Each eBorder In gcd.Drawing.EntitiesSelected
            '                     Select Case eBorder.Gender  ' veo si me sirve de borde
            '                         Case "LINE"
            '
            '                             entHatch.pBlock.eSegments.Add(eBorder)
            '                         Case "LWPOLYLINE"
            '                             entHatch.pBlock.eSegments.Add(eBorder)
            '                         Case Else
            '
            '                     End Select
            '
            '                 Next
            '
            '
            '
            '
            '
            '                 gcd.Drawing.Entities.Add(entHatch, entHatch.Handle)
            '
            '                 Gcd.CCC[entHatch.gender].Finish(entHatch)
            '
            '                 'LastEntity = entHatch                                       ' save it to repeat on rigth click
            '
            '                 gcd.clsJobPrevious = Me
            '                 gcd.clsJob = cadSelection
            '                 cadSelection.PoiChecking = True
            '                 DrawingAids.CleanTexts
            '
            '                 'clsEntities.GLGenDrawList
            '
            '                 gcd.Regen()
            '                 StepsDone = 0
            '         End Select
            '
            '     Endif

    End Select

End

Public Sub MouseUp()

    Dim X, Y, f As Float

    If Mouse.Right Then
        gcd.clsJob.KeyText("U")
        Return
    End If


    ' we are waiting for a point

    X = gcd.Near(gcd.Xreal(mouse.x))
    Y = gcd.Near(gcd.Yreal(mouse.y))

    ' y si tengo enganche?

    If (gcd.Drawing.iEntity[2] > 0) Then

        ' esto re enganchado

        X = gcd.Drawing.iEntity[0]
        Y = gcd.Drawing.iEntity[1]


    End If

    If Me.Active Then ' ya tengo un punto
        Me.SelEndX = mouse.X
        Me.SelEndy = mouse.Y
        Me.SelEndXr = gcd.Xreal(Me.SelEndX)
        Me.SelEndyr = gcd.Yreal(Me.SelEndy)
        Me.Active = False
    Else
        Me.Active = True
        Me.SelStartX = mouse.X
        Me.SelStartY = mouse.Y
        Me.SelStartXr = gcd.Xreal(Me.SelStartX)
        Me.SelStartYr = gcd.Yreal(Me.SelStartY)

        Me.SelEndX = mouse.X
        Me.SelEndy = mouse.Y
        Me.SelEndXr = gcd.Xreal(Me.SelEndX)
        Me.SelEndyr = gcd.Yreal(Me.SelEndy)
    End If


End

Public Sub MouseMove()

    If Me.Active Then

        Me.SelEndX = mouse.X
        Me.SelEndy = mouse.Y
        Me.SelEndXr = gcd.Xreal(Me.SelEndX)
        Me.SelEndyr = gcd.Yreal(Me.SelEndy)
    End If


End

Public Function KeyText(EnteredText As String)

    ' in this case, we try to run the command wich is a class
    Dim o As Object, RunWith As String, c As Class

    EnteredText = UCase(Trim(EnteredText))
    If EnteredText = "" Then Return                                ' no BS here

    Select Case EnteredText
        Case "REGEN"
            gcd.regen
        Case "REDRAW"
            gcd.Redraw

        Case Else
            'o = cadDimension ' a test
            gcd.clsJobPrevious = gcd.clsJob

            If gcd.CCC.Exist(EnteredText) Then
                o = gcd.CCC[EnteredText]
            Else

                DrawingAids.ErrorMessage = "Command not recognized"
                Return
            Endif

            ' check if the class needs to be run trough other
            If o.usewith = "" Then                        ' its a tool
                gcd.clsJob = o
                gcd.clsJob.start

            Else                                                    ' its propably an eentity

                gcd.clsJob = gcd.CCC[o.usewith]
                gcd.clsJob.start(o)

            End If

    End Select

    Return

    ' TODO: dejar comentado mientras hagamos debug
    '' catch

    DrawingAids.ErrorMessage = "Command not recognized"
    '
    '

End

Public Sub Draw() ' esta rutina es llamada por FCAD en el evento DrawingArea_Draw
    ' por ultimo, y para que se vea arriba, la seleccion

    'If Me.ActionActive = Me.ActionRectActive Then

    GLplus.Rectangle2D(Me.SelStartXr, Me.SelStartYr, Me.SelEndXr - Me.SelStartXr, Me.SelEndyr - Me.SelStartYr, Color.Blue,,,, Color.DarkBlue, 1,, 2)

    'End If


End

