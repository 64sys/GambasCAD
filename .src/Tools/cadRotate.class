' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco
Inherits ToolsBase
Create Static
Public Const Gender As String = "ROTATE"

Private Radianes As Float

Private glSelectedList As Integer

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean
    ' Llamada por FCAD al inicio de la aplicacion de esta herramienta

    Dim i As Integer
    ' Aprovechamos para establecer los helpers (comentarios de ayuda en pantalla)
    Me.PointsDone = 0
    Me.PointsTotal = 2

    DrawingAids.CmdLineHelper = ("Rotate") & " "

    If gcd.Drawing.EntitiesSelected.Count = 0 Then                                     ' we have no elements in the selection

        Me.Prompt = ("Select entities to ROTATE")

        DrawingAids.Helper.texto = DrawingAids.CmdLineHelper & ": " & ("Select entities")

        gcd.clsJobPrevious = Me
        gcd.clsJob = cadSelection

    Else
        Me.Prompt = CStr(gcd.Drawing.EntitiesSelected.Count) & ("selected entities to ROTATE, mark base point") & ("or _ADD/_REM to modify selection")
        ' need the first point
        DrawingAids.Helper.texto = ("ROTATE") & ":" & ("mark Base point")
        'DrawingAids.CmdLineHelper = DrawingAids.CmdLineHelper & Str(gcd.Drawing.SelectedEntities.count) & " " & ("elements")

        clsEntities.GLGenDrawListAll(True)
        gcd.Redraw

    Endif
    Me.Active = True
    gcd.ToolActive = True

End

' Public Function NewParameter(vParam As Variant[], Optional Definitive As Boolean = False) As Boolean
'
'     If Me.PointsDone = 0 Then
'         If vParam[0] = "point" Then
'
'             ' enganio al evento mouse
'             MouseMove(gcd.Xpix(vParam[1]), gcd.Ypix(vParam[2]))
'             MouseUp(gcd.Xpix(vParam[1]), gcd.Ypix(vParam[2]))
'
'         Endif
'     End If
'
' End

Public Function MouseUp()

    Dim i As Integer, E As Entity

    Inc Me.PointsDone

    If Me.PointsDone = 1 Then ' acabo de marcar el punto base

        ' ya tengo cosas seleccionadas
        DrawingAids.Helper.texto = DrawingAids.CmdLineHelper & ": " & ("Angle") & " [90]"

        ' punto real base
        Me.SelStartXr = gcd.Near(gcd.Xreal(mouse.x))
        Me.SelStartYr = gcd.Near(gcd.Yreal(mouse.y))

        Me.glTranslate[0] = Me.SelStartXr
        Me.glTranslate[1] = Me.SelStartYr
        Me.glTranslate[2] = 0

        gl.PushMatrix
        gl.NewList(gcd.Drawing.GlListEntitiesSelected, gl.COMPILE)                      ' genero los graficos dentro de la lista
        gl.Translatef(-Me.SelStartXr, -Me.SelStartYr, 0)
        For Each E In gcd.Drawing.EntitiesSelected
            gl.CallList(E.glDrwList)
        Next
        gl.EndList
        gl.PopMatrix

        ' prevenir acciones tontas como hacer click en otro elemento antes de terminar con el actual
        ' TODO: reparar -> gcd.CurrDrawing.DesHabilitarBotones
    Else If Me.PointsDone = 2 Then ' acabo de marcar el punto destino
        '     ' permitir otros trabajos
        '     ' TODO: reparar -> gcd.CurrDrawing.HabilitarBotones
        'Me.SelEndXr = puntos.Near(gcd.xreal(mouse.x)
        'Me.SelEndyr = puntos.Near(gcd.Yreal(mouse.y))

        'Radianes = Ang(Me.SelEndXr - Me.SelStartXr, Me.SelEndYr - Me.SelStartYr)
        '
        Me.Finish()

    Endif

End

' Public Sub Draw()               ' called by gcd.CurrDrawing.drwArea_Draw
'
'     gl.PushMatrix
'
'     gl.Translatef(-Me.glTranslate[0], -Me.glTranslate[1], -Me.glTranslate[2])
'     gl.Rotatef(Me.glAngle, Me.glRotate[0], Me.glRotate[1], Me.glRotate[2])
'     gl.Translatef(Me.glTranslate[0], Me.glTranslate[1], Me.glTranslate[2])
'     gl.Scalef(Me.glScale[0], Me.glScale[1], Me.glScale[2])
'     gl.CallList(gcd.CurrDrawing.GlListSelectedEntities)                      ' si GL no tiene contexto, la lista no se genera. Es necesario que la instancia de FCAD este cargada.
'
'     gl.PopMatrix
'
' End

Public Function MouseMove() ' called by FCAD-> DrawingArea_MouseMove

    If Me.PointsDone = 1 Then
        '     ' we compare Real values from the starting point to the location
        '     ' represente by the mouse now, taking account that the drawing
        '     ' could have being moved by the mouse wheel
        '
        '     ' new Real position is
        Me.SelEndXr = gcd.Near(gcd.Xreal(mouse.x))
        Me.SelEndyr = gcd.Near(gcd.Yreal(mouse.y))

        Radianes = Ang(Me.SelEndXr - Me.SelStartXr, Me.SelEndYr - Me.SelStartYr)

        Me.glAngle = Deg(Radianes)

        DrawingAids.Helper.texto = DrawingAids.CmdLineHelper & ": " & ("Angle") & " [90]" & Format$(Me.glAngle, "0.0")

    End If

    gcd.Redraw

End

Public Function KeyText(EnteredText As String) ' esta rutina es llamada por FCAD en el evento FCAD_KeyPress cuando recibe una texto + <Enter>

    If Me.PointsDone = 1 Then

        If EnteredText = "" Then                        ' enter es Ortogonal
            Radianes = 90 / 180 * Pi
            Inc Me.PointsDone
            Me.Finish

        Else
            Radianes = CFloat(EnteredText) / 180 * Pi
            Inc Me.PointsDone
            Me.Finish
        End If

    End If

    ' catch

    DrawingAids.ErrorMessage = ("Bad input")

End

Public Sub Finish()

    Dim E As Entity, ip As Integer, Prot As New Float[]

    If Me.PointsDone = Me.PointsTotal Then

        For Each E In gcd.Drawing.EntitiesSelected

            gcd.CCC[e.gender].Rotate(E, radianes)

        Next

        clsEntities.Finish

    Endif

    gl.DeleteLists(glSelectedList, 1)
    gcd.clsJobPrevious = Me
    gcd.clsJob = cadSelection
    DrawingAids.CleanTexts
    clsEntities.DeSelection()
    gcd.regen
    Me.Active = False
    gcd.ToolActive = False

End
