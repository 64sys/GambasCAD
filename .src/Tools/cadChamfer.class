' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Inherits ToolsBase
Public Const Gender As String = "CHAMFER"

Public E1 As Entity
Public E2 As Entity
Public GripPoint As Integer = -1
Public dX As Float
Public dY As Float
Public ChamferSize As Float

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean
    ' Modes:
    '       0 = Move, all points in the element must be selected, or click on it.
    '       1 = Stretch, selection may be partial, each element is called to see if the support stretching

    Me.Mode = _Mode
    Me.PointsDone = 0
    Me.PointsTotal = 3
    Me.PoiChecking = False
    Me.EntityChecking = True

    Try Me.ChamferSize = gcd.Drawing.Headers.CHAMFERA

    If Me.ChamferSize = 0 Then Me.ChamferSize = 1

    Me.Prompt = ("enter size") & "[" & Str(Me.ChamferSize) & "]"

    clsEntities.DeSelection()           ' elimino cualquier seleccion previa

End

Public Function KeyText(EnteredText As String) ' esta rutina es llamada por FCAD en el evento FCAD_KeyPress cuando recibe una texto + <Enter>

    If Me.PointsDone = 0 Then       ' introduciendo el radio

        Try Me.ChamferSize = Val(EnteredText)

        If Me.ChamferSize = 0 Then
            DrawingAIds.ErrorMessage = ("Bad input")
        Else
            Me.Prompt = ("Select first line")
            Me.PointsDone = 1
        End If
    End If

End

Public Function MouseDown()

    Dim i As Integer

    GripPoint = -1
    Me.SelStartX = mouse.x
    Me.SelStartY = mouse.y
    Me.SelStartXr = gcd.Xreal(Me.SelStartX)
    Me.SelStartYr = gcd.Yreal(Me.SelStartY)

    dX = Me.SelStartXr
    dY = Me.SelStartYr

    Me.SelEndX = Me.SelStartX
    Me.SelEndy = Me.SelStartY

    Me.SelEndXr = Me.SelStartXr
    Me.SelEndyr = Me.SelStartYr

    Me.PoiChecking = False

    If Me.PointsDone = 1 Then       ' estamos seleccionando la primer entidad

        If Mouse.Left Then

            Me.EntityForEdit = gcd.Drawing.HoveredEntity

            If IsNull(Me.EntityForEdit) Then Return                         ' 1.1.2 el mouse no esta enganchado, pero esta arriba de una entidad

            Me.E1 = Me.EntityForEdit
            clsEntities.SelectElem(Me.EntityForEdit)                 '   -> la selecciono
            Me.Prompt = ("Select second line")
            Me.PointsDone = 2

            Me.Active = False
            clsEntities.GLGenDrawListSel(0)

        End If
    Else If Me.PointsDone = 2 Then       ' estamos seleccionando la segunda entidad
        If Mouse.Left Then

            Me.EntityForEdit = gcd.Drawing.HoveredEntity

            If IsNull(Me.EntityForEdit) Then Return                         ' 1.1.2 el mouse no
            If (Me.EntityForEdit <> Me.E1) Then

                Me.E2 = Me.EntityForEdit
                DoChamfer
                Me.Active = False

            Else

                Me.Active = True
            End If
        End If

    End If

End

Public Function DoChamfer() As Boolean

    Dim d, dx, dy, m1, m2, angle As Float
    Dim flxIntersec As New Float[]
    Dim hr1 As Float
    Dim I2x, I2y, Cx, Cy, T1x, T1y, T2x, T2y As Float
    Dim l1, l2, lc, lc2 As Float
    Dim alpha, StartAngle As Float
    Dim EndAngle As Float
    Dim eLine As Entity

    ' intenta hacer el Chamfer entre las dos entidades seleccionadas, devuelve True si tiene exito

    Select Case e1.Gender
        Case "LINE"
            Select Case e2.Gender
                Case "LINE"
                    gcd.Drawing.uUndo.OpenUndoStage("Chamfer", Undo.TypeModify)
                    gcd.Drawing.uUndo.AddUndoItem(e1)

                    gcd.Drawing.uUndo.AddUndoItem(e2)
                    ' determino el punto de interseccion de ambas lineas
                    flxIntersec = puntos.lineLineIntersection([e1.P[0], e1.P[1]], [e1.P[2], e1.P[3]], [e2.P[0], e2.P[1]], [e2.P[2], e2.P[3]])
                    ' ahora veo cual punto de los dos esta mas lejos de la interseccion
                    ' linea 1
                    If puntos.distancia(e1.P[0], e1.P[1], flxIntersec[0], flxIntersec[1]) >= puntos.distancia(e1.P[2], e1.P[3], flxIntersec[0], flxIntersec[1]) Then
                        e1.P[2] = flxIntersec[0]
                        e1.P[3] = flxIntersec[1]
                    Else
                        Swap e1.P[0], e1.P[2]
                        Swap e1.P[1], e1.P[3]
                        e1.P[2] = flxIntersec[0]
                        e1.P[3] = flxIntersec[1]

                    Endif

                    ' linea 2
                    If puntos.distancia(e2.P[0], e2.P[1], flxIntersec[0], flxIntersec[1]) >= puntos.distancia(e2.P[2], e2.P[3], flxIntersec[0], flxIntersec[1]) Then
                        e2.P[2] = flxIntersec[0]
                        e2.P[3] = flxIntersec[1]
                    Else
                        Swap e2.P[0], e2.P[2]
                        Swap e2.P[1], e2.P[3]
                        e2.P[2] = flxIntersec[0]
                        e2.P[3] = flxIntersec[1]

                    Endif

                    ' ahora necesito el angulo entre ambas lineas
                    alpha = puntos.Angle([e1.P[0] - flxIntersec[0], e1.P[1] - flxIntersec[1]], [e2.P[0] - flxIntersec[0], e2.P[1] - flxIntersec[1]])

                    ' verifico que las tangentes esten sobre las lineas
                    hr1 = Me.ChamferSize / 2 / Sin(alpha / 2)

                    ' largo de las lineas
                    l1 = puntos.distancia(e1.P[0], e1.P[1], e1.P[2], e1.P[3])
                    l2 = puntos.distancia(e2.P[0], e2.P[1], e2.P[2], e2.P[3])

                    If (hr1 > l1) Or (hr1 > l2) Then
                        ' el punto tangente cae fuera de las lineas
                        Return
                    Endif

                    ' obtengo los puntos tangentes
                    t1x = e1.p[2] + (e1.P[0] - e1.P[2]) * hr1 / l1
                    t1y = e1.p[3] + (e1.P[1] - e1.P[3]) * hr1 / l1

                    t2x = e2.p[2] + (e2.P[0] - e2.P[2]) * hr1 / l2
                    t2y = e2.p[3] + (e2.P[1] - e2.P[3]) * hr1 / l2

                    ' corrijo el largo de las lineas
                    e1.P[2] = t1x
                    e1.P[3] = t1y

                    e2.P[2] = t2x
                    e2.P[3] = t2y

                    ' creo otra linea
                    ' para ello veo cual angulo es el inicial

                    eLine = cadLine.NewEntity([e1.P[2], e1.P[3], e2.P[2], e2.P[3]], True)
                    cadLine.Finish(eLine)
                    clsEntities.glGenDrawList(eline)
                    clsEntities.glGenDrawList(e1)
                    clsEntities.glGenDrawList(e2)

                    gcd.Drawing.Sheet.Entities.Add(eLine, eLine.Id)

                    gcd.Drawing.uUndo.AddUndoItem(eLine, Undo.TypeCreate)
                    gcd.Drawing.uUndo.CloseUndoStage()

                    Me.Finish

            End Select

    End Select

End
