' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco
Inherits ToolsBase
Create Static
Public Const Gender As String = "MOVE"
Public Offset As Float

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean
    ' Llamada por FCAD al inicio de la aplicacion de esta herramienta

    ' Aprovechamos para establecer los helpers (comentarios de ayuda en pantalla)
    Dim i As Integer, E As Entity

    Me.PointsDone = 0
    Me.PointsTotal = 2

    ' this affects the gl Drawing list

    run
    Me.Active = True
    gcd.Drawing.Sheet.GlSheet.PopupMenu = ""
    fmain.PopupMenu = ""

End

'' cadSelection o algun otro proceso nos devuelve el control
Public Sub Run()

    If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then                                     ' we have no elements in the selection

        Me.Prompt = ("Move") & ": " & ("Select entities")

        gcd.clsJobCallBack = Me
        gcd.clsJob = cadSelection
        cadSelection.Prompt = Me.Prompt
        cadSelection.ReturnOnFirstSelection = False

    Else                                                                    ' need the first point

        'DrawingAids.CmdLineHelper = DrawingAids.CmdLineHelper & ": " & ("Base point")
        Me.Prompt = ("Move") & " " & Str(gcd.Drawing.Sheet.EntitiesSelected.Count) & " " & ("elements") & "-> " & ("Base point") & ":"

        Me.NextParamType = "P"
        ' armamos el menu contextual y lo asignamos a la GL area
        gcd.Drawing.Sheet.GlSheet.PopupMenu = Me.Gender

        Me.PointsDone = 1

        gcd.SnapMode = Config.SnapModeSaved                 ' vuelvo al Snap Guardado

        clsEntities.GLGenDrawListSel(0)                     ' genero drawing lists
        clsEntities.GLGenDrawListAll(True)

        ' gcd.Drawing.uUndo.OpenUndoStage("Move entities", Undo.TypeModify)
        ' For Each E In gcd.Drawing.EntitiesSelected
        '     gcd.Drawing.uUndo.AddUndoItem(clsEntities.ClonEntity(E, False))
        ' Next
        gcd.Redraw

    Endif

End

Public Sub PuntoBase()

    ' punto real base
    Me.SelStartXr = Me.LastX
    Me.SelStartYr = Me.LastY

    ' volvemos el Snap al original
    gcd.SnapMode = Config.SnapModeSaved

    ' ya tengo cosas seleccionadas
    DrawingAIds.Helper.texto = ("Final point")
    Me.Prompt = ("Move") & " " & Str(gcd.Drawing.Sheet.EntitiesSelected.Count) & " " & ("elements") & ": " & ("Final point")
    Me.PointsDone = 2

End

Public Sub NewParameter(tipo as string, vValor as Variant, Optional definitive as Boolean=False)

    select case lcase(tipo)
        case "point"

            if definitive then

                If Me.PointsDone = 1 Then ' acabo de marcar el punto base
                    Inc Me.PointsDone

                    Me.SelStartXr = vValor[0]
                    Me.SelStartYr = vValor[1]

                    gcd.DrawOriginals = True

                    ' ya tengo cosas seleccionadas
                    Me.Prompt = ("Move:") & " " & Str(gcd.Drawing.Sheet.EntitiesSelected.count) & " " & ("elements") & ": " & ("Final point")

                    ' volvemos el Snap al original
                    gcd.SnapMode = Config.SnapModeSaved

                    ' prevenir acciones tontas como hacer click en otro elemento antes de terminar con el actual
                    ' TODO: reparar -> gcd.CurrDrawing.DesHabilitarBotones
                Else If Me.PointsDone = 2 Then ' acabo de marcar el punto destino
                    ' permitir otros trabajos
                    Me.SelEndXr = vValor[0]
                    Me.SelEndYr = vValor[1]
                    clsEntities.Move(Me.SelEndXr - Me.SelStartXr, Me.SelEndyr - Me.SelStartYr)

                    gcd.Drawing.uUndo.CloseUndoStage()

                    Dim e As Entity

                    For Each E In gcd.Drawing.Sheet.EntitiesSelected
                        clsEntities.glGenDrawList(e)
                    Next

                    clsEntities.glGenDrawListLAyers()
                    Me.Finish

                Endif
            else

                If Me.PointsDone = 2 Then ' puedo redibujar
                    Me.SelEndXr = vValor[0]
                    Me.SelEndYr = vValor[1]

                    Me.glTranslate[0] = Me.SelEndXr - Me.SelStartXr
                    Me.glTranslate[1] = Me.SelEndyr - Me.SelStartYr
                    Me.glTranslate[2] = 0

                    gcd.redraw
                end if
            end if
        case else

    end Select

end