' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco
Inherits ToolsBase
Create Static
Public Const Gender As String = "MOVE"
Public Offset As Float

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean
    ' Llamada por FCAD al inicio de la aplicacion de esta herramienta

    ' Aprovechamos para establecer los helpers (comentarios de ayuda en pantalla)
    Dim i As Integer, E As Entity

    Me.PointsDone = 0
    Me.PointsTotal = 2

    ' this affects the gl Drawing list

    If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then                                     ' we have no elements in the selection

        Me.Prompt = ("Move") & ": " & ("Select entities")

        gcd.clsJobPrevious = Me
        gcd.clsJob = cadSelection

    Else                                                                    ' need the first point

        'DrawingAids.CmdLineHelper = DrawingAids.CmdLineHelper & ": " & ("Base point")
        Me.Prompt = ("Move") & " " & Str(gcd.Drawing.Sheet.EntitiesSelected.Count) & " " & ("elements") & "-> " & ("Base point") & ":"

        Me.NextParamType = "P"
        ' armamos el menu contextual y lo asignamos a la GL area
        gcd.Drawing.Sheet.GlSheet.PopupMenu = Me.Gender

        Me.PointsDone = 1

        gcd.SnapMode = Config.SnapModeSaved                 ' vuelvo al Snap Guardado

        clsEntities.GLGenDrawListSel(0)                     ' genero drawing lists
        clsEntities.GLGenDrawListAll(True)

        ' gcd.Drawing.uUndo.OpenUndoStage("Move entities", Undo.TypeModify)
        ' For Each E In gcd.Drawing.EntitiesSelected
        '     gcd.Drawing.uUndo.AddUndoItem(clsEntities.ClonEntity(E, False))
        ' Next
        gcd.Redraw

    Endif
    Me.Active = True
    gcd.ToolActive = True

End

Public Function KeyText(EnteredText As String)

    Super.KeyText(EnteredText)
    If Me.PointsDone = 1 Then ' acabo de marcar el punto base
        PuntoBase
    Else If Me.PointsDone = 2 Then ' acabo de marcar el punto final

        PuntoFinal

    End If

End

Public Sub PuntoBase()

    ' punto real base
    Me.SelStartXr = Me.LastX
    Me.SelStartYr = Me.LastY

    ' volvemos el Snap al original
    gcd.SnapMode = Config.SnapModeSaved

    ' ya tengo cosas seleccionadas
    DrawingAIds.Helper.texto = ("Final point")
    Me.Prompt = ("Move") & " " & Str(gcd.Drawing.Sheet.EntitiesSelected.Count) & " " & ("elements") & ": " & ("Final point")
    Me.PointsDone = 2

End

Public Sub PuntoFinal()

    Me.SelEndXr = Me.LastX
    Me.SelEndYr = Me.LastY

    clsEntities.Move(Me.SelEndXr - Me.SelStartXr, Me.SelEndyr - Me.SelStartYr)

    gcd.Drawing.uUndo.CloseUndoStage()

    Me.Finish

End

Public Function MouseUp()

    If Mouse.Right Then
        Me.Cancel()

    Else If Mouse.Left Then

        If Me.PointsDone = 1 Then ' acabo de marcar el punto base

            PuntoBase
            ' prevenir acciones tontas como hacer click en otro elemento antes de terminar con el actual
            ' TODO: reparar -> gcd.CurrDrawing.DesHabilitarBotones
        Else If Me.PointsDone = 2 Then ' acabo de marcar el punto destino
            ' permitir otros trabajos
            ' TODO: reparar -> gcd.CurrDrawing.HabilitarBotones

            ' job finished correctly

            ' and now we move
            PuntoFinal
        Endif
    End If

End

Public Function MouseMove()

    Super.MouseMove()

    If Me.PointsDone = 2 Then
        ' we compare Real values from the starting point to the location
        ' represente by the mouse now, taking account that the drawing
        ' could have being moved by the mouse wheel
        Me.SelEndXr = Me.LastX
        Me.SelEndYr = Me.LastY

        Me.glTranslate[0] = Me.SelEndXr - Me.SelStartXr
        Me.glTranslate[1] = Me.SelEndyr - Me.SelStartYr

    End If
    gcd.Redraw

End
