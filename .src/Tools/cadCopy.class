' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco
Inherits ToolsBase
Create Static
Public Const Gender As String = "COPY"
' Add more if needed
public Multiple as Boolean=False

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean
    ' Llamada por FCAD al inicio de la aplicacion de esta herramienta

    ' Aprovechamos para establecer los helpers (comentarios de ayuda en pantalla)
    Dim i As Integer, E As Entity

    Me.PointsDone = 0
    Me.PointsTotal = 2
    Multiple=False

    If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then                                     ' we have no elements in the selection

        Me.Prompt = ("Copy") & ": " & ("Select entities")

        gcd.clsJobCallBack = Me
        gcd.clsJob = cadSelection
        cadSelection.Prompt = Me.Prompt
        cadSelection.ReturnOnFirstSelection = False

    Else                                                                    ' need the first point

        Me.Prompt = ("Copy") & " " & Str(gcd.Drawing.Sheet.EntitiesSelected.count) & " " & ("elements") & ": " & ("Base point")
        Me.NextParamType = "P"
        ' armamos el menu contextual y lo asignamos a la GL area
        gcd.Drawing.Sheet.GlSheet.PopupMenu = Me.Gender

        Me.PointsDone = 0

        gcd.SnapMode = Config.SnapModeSaved                 ' vuelvo al Snap Guardado

        clsEntities.GLGenDrawListSel(0 )                     ' genero drawing lists
    Endif

    Me.Active = True

    gcd.Drawing.Sheet.GlSheet.PopupMenu = ""
    fmain.PopupMenu = ""
    DrawingAIds.Helper.texto = Me.Prompt

End

'' cadSelection o algun otro proceso nos devuelve el control
Public Sub Run()

    If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then                                     ' we have no elements in the selection

        Me.Prompt = ("Copy") & ": " & ("Select entities")

        gcd.clsJobCallBack = Me
        gcd.clsJob = cadSelection
        cadSelection.Prompt = Me.Prompt
        cadSelection.ReturnOnFirstSelection = False

    Else                                                                    ' need the first point

        Me.Prompt = ("Copy") & " " & Str(gcd.Drawing.Sheet.EntitiesSelected.count) & " " & ("elements") & ": " & ("Base point")

    Endif

End

Public Sub NewParameter(tipo as string, vValor as Variant, Optional definitive as Boolean=False)

    select case lcase(tipo)
        case "point"

            if definitive then

                Inc Me.PointsDone

                If Me.PointsDone = 1 Then ' acabo de marcar el punto base
                    Me.SelStartXr = vValor[0]
                    Me.SelStartYr = vValor[1]

                    gcd.DrawOriginals = True

                    ' ya tengo cosas seleccionadas
                    Me.Prompt = ("Copy") & " " & Str(gcd.Drawing.Sheet.EntitiesSelected.count) & " " & ("elements") & ": " & ("Final point")

                    ' volvemos el Snap al original
                    gcd.SnapMode = Config.SnapModeSaved

                    ' prevenir acciones tontas como hacer click en otro elemento antes de terminar con el actual
                    ' TODO: reparar -> gcd.CurrDrawing.DesHabilitarBotones
                Else If Me.PointsDone = 2 Then ' acabo de marcar el punto destino
                    ' permitir otros trabajos
                    Me.SelEndXr = vValor[0]
                    Me.SelEndYr = vValor[1]
                    Me.Finish

                Endif
            else

                If Me.PointsDone = 1 Then ' puedo redibujar
                    Me.SelEndXr = vValor[0]
                    Me.SelEndYr = vValor[1]

                    Me.glTranslate[0] = Me.SelEndXr - Me.SelStartXr
                    Me.glTranslate[1] = Me.SelEndyr - Me.SelStartYr
                    Me.glTranslate[2] = 0

                    gcd.redraw
                end if
            end if
        case else
            if trim(lcase(vvalor)) = "m" then multiple= True
            if trim(lcase(vvalor)) = "_cancel" then me.Cancel
    end Select

end

Public Sub Finish()

    Dim e As Entity
    Dim cContainer As Collection

    cContainer = clsEntities.ClonElements(, False) ' let make a copy of them
    ' and now we move
    clsEntities.Move(Me.SelEndXr - Me.SelStartXr, Me.SelEndyr - Me.SelStartYr, cContainer)

    gcd.Drawing.uUndo.OpenUndoStage("Copy entities", Undo.TypeCreate)
    For Each E In cContainer
        clsEntities.glGenDrawList(e)
        gcd.Drawing.uUndo.AddUndoItem(E)
        gcd.Drawing.Sheet.Entities.Add(e, e.Id)
    Next
    gcd.Drawing.uUndo.CloseUndoStage()

    clsEntities.glGenDrawListLAyers()
    gcd.redraw
    if Multiple then
        Me.PointsDone = 1
        Run

    Else

        clsEntities.DeSelection()
        gcd.Drawing.RequiresSaving = True
        gcd.Drawing.iEntity.Clear
        gcd.clsJobPrevious = Me
        gcd.clsJob = cadSelection
        gcd.clsJob.start()
        DrawingAIds.CleanTexts
        gcd.StepsDone = 0
        gcd.DrawOriginals = False
        Me.Active = False
    end if

End
