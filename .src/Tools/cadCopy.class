' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco
Inherits ToolsBase
Create Static
Public Const Gender As String = "COPY"
' Add more if needed

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean
    ' Llamada por FCAD al inicio de la aplicacion de esta herramienta

    ' Aprovechamos para establecer los helpers (comentarios de ayuda en pantalla)
    Dim i As Integer, E As Entity

    Me.PointsDone = 0
    Me.PointsTotal = 2

    If gcd.Drawing.Sheet.EntitiesSelected.Count = 0 Then                                     ' we have no elements in the selection

        Me.Prompt = ("Copy") & ": " & ("Select entities")

        gcd.clsJobPrevious = Me
        gcd.clsJob = cadSelection

    Else                                                                    ' need the first point

        Me.Prompt = ("Copy") & " " & Str(gcd.Drawing.Sheet.EntitiesSelected.count) & " " & ("elements") & ": " & ("Base point")




    Endif

    Me.Active = True
    gcd.ToolActive = True

End



Public Function MouseUp()

    Inc Me.PointsDone

    If Me.PointsDone = 1 Then ' acabo de marcar el punto base
        gcd.DrawOriginals = True

        ' ya tengo cosas seleccionadas
        DrawingAIds.Helper.texto = ("Final point")

        ' volvemos el Snap al original
        gcd.SnapMode = Config.SnapModeSaved

        ' prevenir acciones tontas como hacer click en otro elemento antes de terminar con el actual
        ' TODO: reparar -> gcd.CurrDrawing.DesHabilitarBotones
    Else If Me.PointsDone = 2 Then ' acabo de marcar el punto destino
        ' permitir otros trabajos

        Me.Finish

    Endif

End

Public Function MouseMove()

    Dim X, Y As Float
    ' we are waiting for a point

    X = gcd.Near(gcd.Xreal(mouse.x))
    Y = gcd.Near(gcd.Yreal(mouse.y))

    ' yo soy el responsable de chequear POI
    If Not gcd.flgSearchingPOI Then
        gcd.Drawing.iEntity = clsMouseTracking.CheckBestPOI(X, Y)


        If (gcd.Drawing.iEntity[2] > 0) Then

            ' esto re enganchado

            X = gcd.Drawing.iEntity[0]
            Y = gcd.Drawing.iEntity[1]
        End If
    End If

    If Me.PointsDone = 0 Then
        Me.SelStartXr = X
        Me.SelStartYr = Y

    Else If Me.PointsDone = 1 Then
        ' we compare Real values from the starting point to the location
        ' represente by the mouse now, taking account that the drawing
        ' could have being moved by the mouse wheel

        ' new Real position is
        Me.SelEndXr = X
        Me.SelEndyr = Y

        If gcd.Orthogonal Then

            If Abs(Me.SelEndXr - Me.SelStartXr) > Abs(Me.SelEndyr - Me.SelStartYr) Then ' X prevails

                Me.SelEndyr = Me.SelStartYr

            Else

                Me.SelEndXr = Me.SelStartXr

            Endif

        End If

        Me.glTranslate[0] = Me.SelEndXr - Me.SelStartXr
        Me.glTranslate[1] = Me.SelEndyr - Me.SelStartYr
        Me.glTranslate[2] = 0

    End If
    gcd.Redraw

End

Public Sub Finish()

    Dim e As Entity
    Dim cContainer As Collection

    cContainer = clsEntities.ClonElements(, False) ' let make a copy of them
    ' and now we move
    clsEntities.Move(Me.SelEndXr - Me.SelStartXr, Me.SelEndyr - Me.SelStartYr, cContainer)


    gcd.Drawing.uUndo.OpenUndoStage("Copy entities", Undo.TypeCreate)
    For Each E In cContainer
        clsEntities.glGenDrawList(e)
        gcd.Drawing.uUndo.AddUndoItem(E)
        gcd.Drawing.Sheet.Entities.Add(e, e.Id)
    Next
    gcd.Drawing.uUndo.CloseUndoStage()

    clsEntities.glGenDrawListLAyers()

    clsEntities.DeSelection()
    gcd.Drawing.RequiresSaving = True
    gcd.Drawing.iEntity.Clear
    gcd.clsJobPrevious = Me
    gcd.clsJob = cadSelection
    gcd.clsJob.start()
    DrawingAIds.CleanTexts
    gcd.StepsDone = 0
    gcd.DrawOriginals = False
    Me.Active = False
    gcd.ToolActive = False

End

