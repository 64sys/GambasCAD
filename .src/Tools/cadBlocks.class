' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Inherits ToolsBase
'Create Private
'Create Static
Public Const Gender As String = "BLOCKS"

Public eBlock As Block

Public fBlock As New Punto2d

Public eInsert As Entity
Public iStage As Integer
' Block insertion vars
Public fBlockScaleX As Float = 1
Public fBlockScaleY As Float = 1
Public fBlockDegRotation As Float = 0
Public fBlockInvert As Integer = 1

Public cAttdef As New Collection

Public Function Start(Optional sfilename As Variant, Optional _mode As Integer = 0) As Boolean

    If sfilename = 0 Then fBlocks.Show

End

Public Sub Draw()

    If Not eInsert Then Return

    gl.PushMatrix
    gl.Translatef(Me.SelEndXr, Me.SelEndYr, 0)
    gl.Rotatef(fBlockDegRotation, 0, 0, 1)
    gl.Scalef(fBlockScaleX * fBlockInvert, fBlockScaleY, 1)

    gl.CallList(eInsert.glDrwList)

    gl.PopMatrix

End

' Public Function MouseUp()
'
'     Super.MouseUp
'
'     ' creo el bloque (si no existe y luego el insert)
'
'     If Mouse.Left Then
'         InsertInsert
'     End If
'
' End

'' En esta rutina armo el insert que definiio el user y lo preparo para ser ubicado en el dibujo
Public Sub SetInsert(sBlockName As String, ScaleXYZ As Float, Rotation As Float, bInvert As Boolean)

    'Debug "Create", iStage
    ' Armo una entidad Insert y la meto en oSelected para que sea dibujada
    Dim tmpBlock As Block
    Dim e, e2 As Entity

    eInsert = cadInsert.NewEntity()'New Entity
    eInsert.pBlock.name = sBlockName
    'eInsert.sParam[cadInsert.sdaBlockName] = sBlockName

    'tmpBlock = clsEntities.FIndBlock(sBlockName, gcd.Drawing.Blocks)' gcd.Drawing.oBlocks[icvBlocksInUse.Item.Key]

    ' For Each e In tmpBlock.entities
    '     If e.Gender = cadEndBlk.Gender Then Continue
    '     e2 = clsEntities.ClonEntity(e)
    '     eInsert.pBlock.entities.Add(e2, e2.Id)
    ' Next

    eInsert.fParam[cadInsert.ipaEscX] = 1'ScaleXYZ
    eInsert.fParam[cadInsert.ipaEscY] = 1'ScaleXYZ
    eInsert.fParam[cadInsert.ipaEscZ] = 1'ScaleXYZ
    eInsert.fParam[cadInsert.ipaRotacion] = 0' Rotation
    'If bInvert Then eInsert.fParam[cadInsert.ipaEscX] *= -1

    ' gcd.Drawing.oSelected.Clear
    ' gcd.Drawing.oSelected.Add(eInsert, "1")
    fBlockDegRotation = Rotation
    fBlockScaleX = ScaleXYZ
    fBlockScaleY = ScaleXYZ

    If bInvert Then fBlockInvert = -1 Else fBlockInvert = 1

    ' aca voy a digerir el inserto

    cadInsert.InsertParts(eInsert, True)

    clsEntities.glGenDrawList(eInsert)

End

Public Sub CovertAttdefToAttrib(eParent As Entity)
    'insertion place:
    ' 0 = entity.P[0],[1]
    ' 1 = entity.pBlock.entities.P[0],[1]
    ' 2 = entity.pBlock.x0,y0

    Dim et, etnew As Entity

    For Each ET In eParent.pBlock.entities

        If (et.Gender = "INSERT") Then

            If et.pBlock Then CovertAttdefToAttrib(et.pBlock.entities)

        Else

            If et.Gender = "ATTDEF" Then

                ' convierto
                et.Gender = "ATTRIB"
                et.visible = True
                et.LineType = eParent.LineType
                et.colour = eParent.colour
                et.LineWIdth = eParent.LineWIdth
                et.sParam[0] = gcd.cATTDEF[et.Id][2]
            End If
            Gcd.CCC[et.gender].Scale(et, eParent.fParam[cadInsert.ipaEscX], eParent.fParam[cadInsert.ipaEscY])
            Gcd.CCC[et.gender].Rotate(et, Rad(eParent.fParam[cadInsert.ipaRotacion]))
            Gcd.CCC[et.gender].translate(et, eParent.p[0], eParent.p[1])
            et.Container = eParent.pBlock
            Gcd.CCC[et.gender].Finish(et)

            'cDestination.Add(etnew, etnew.Id)

        End If
        clsEntities.glGenDrawList(et)

    Next

End

Public Sub ATTDEF_List(eList As Collection, eParent As Entity, cDestination As Collection, Optional InsertionPlace As Integer = 0)
    'insertion place:
    ' 0 = entity.P[0],[1]
    ' 1 = entity.pBlock.entities.P[0],[1]
    ' 2 = entity.pBlock.x0,y0

    Dim et, etnew As Entity

    ' gl.PushMatrix
    ' If InsertionPlace = 0 Then
    '     gl.Translatef(fMain.pixels(eParent.p[0]) / gcd.CurrDrawing.ScaleZoom, fMain.pixels(eParent.p[1]) / gcd.CurrDrawing.ScaleZoom, 0)
    ' Else If InsertionPlace = 1 Then
    '     ' absolute coordinate, so each entity has its own position
    '     ' nothing to translate
    ' Else If InsertionPlace = 2 Then
    '     gl.Translatef(fMain.pixels(eParent.pBlock.x0) / gcd.CurrDrawing.ScaleZoom, fMain.pixels(eParent.pBlock.y0) / gcd.CurrDrawing.ScaleZoom, 0)
    '
    ' End If
    '
    ' gl.Rotatef(eParent.fParam[Me.ipaRotacion], 0, 0, 1)
    '
    ' gl.Scalef(eParent.fParam[Me.ipaEscX], eParent.fParam[Me.ipaEscY], eParent.fParam[Me.ipaEscZ])

    For Each ET In eList

        If (et.Gender = "INSERT") Then

            If et.pBlock Then ATTDEF_List(et.pBlock.entities, et, cDestination)

        Else

            If et.Gender = "ATTDEF" Then

                ' creo una entidad nueva
                etnew = clsEntities.ClonEntity(et)
                etnew.Gender = "ATTRIB"
                etnew.visible = True
                etnew.LineType = eParent.LineType
                etnew.colour = eParent.colour
                etnew.LineWIdth = eParent.LineWIdth
                etnew.sParam[0] = gcd.cATTDEF[et.Id][2]
                Gcd.CCC[etnew.gender].Scale(etnew, eParent.fParam[cadInsert.ipaEscX], eParent.fParam[cadInsert.ipaEscY])
                Gcd.CCC[etnew.gender].Rotate(etnew, Rad(eParent.fParam[cadInsert.ipaRotacion]))
                If InsertionPlace = 0 Then
                    Gcd.CCC[etnew.gender].translate(etnew, eParent.p[0], eParent.p[1])
                End If

                Gcd.CCC[etnew.gender].Finish(etnew)

                cDestination.Add(etnew, etnew.Id)
            End If
        End If
        clsEntities.glGenDrawList(etnew)

    Next

End
'' Ubico al Insert en su posicion definitiva (DEPRE y a sus partes en la cole de entidades)

Public Sub InsertInsert()

    Dim e As Entity

    ' eInsert.pBlock = eBlock
    eInsert.Id = gcd.NewId()
    'eInsert.HandleOwner = "1"

    ' eInsert.Gcd.CCC[e.gender] = cadInsert
    ' eInsert.pLayer = gcd.Drawing.CurrLayer
    ' eInsert.colour = gcd.Drawing.CurrColor
    eInsert.LineType = gcd.Drawing.CurrLineType
    eInsert.LineWIdth = gcd.Drawing.CurrLineWt
    eInsert.Gender = cadInsert.Gender
    eInsert.p[0] = Me.LastX
    eInsert.P[1] = Me.LastY

    eInsert.fParam[cadInsert.ipaEscX] = FBlockscaleX * fBlockInvert

    eInsert.fParam[cadInsert.ipaEscY] = FBlockscaleY

    eInsert.fParam[cadInsert.ipaRotacion] = FBlockdegRotation

    Dim c As New Collection, sDetails As String[]
    ' buen momento para ver si tiene ATTDEF
    gcd.cATTDEF = New Collection
    For Each e In eInsert.pBlock.entities
        If e.Gender = "ATTDEF" Then
            sDetails = New String[]
            sDetails.Add(e.sParam[cadAttrib.sdaTag])
            sDetails.Add(e.sParam[cadAttrib.sdaPromt])
            sDetails.Add(e.sParam[cadText.sdaText]) ' respuesta
            gcd.cAttdef.Add(sDetails, e.Id)

        Endif
    Next
    If gcd.cATTDEF.Count > 0 Then FAttrib.SetAttribs()

    CovertAttdefToAttrib(eInsert)

    'depre cadInsert.BuildPOI(eInsert)

    clsEntities.glGenDrawList(eInsert)

    eInsert.Container = gcd.Drawing.Sheet.Block

    gcd.Drawing.Sheet.Entities.Add(eInsert, eInsert.Id)

    eInsert = Null
    ' ahora agrego las entidades del Inserto

    gcd.CCC["ENTITYBUILDER"].LastEntity = eInsert     ' save it to repeat on rigth click

    gcd.clsJobPrevious = Me
    gcd.clsJob = cadSelection
    gcd.clsJob.start()
    DrawingAIds.CleanTexts

    gcd.regen()

End

Public Sub NewParameter(tipo As String, vValor As Variant, Optional definitive As Boolean = False)

    Select Case LCase(tipo)
        Case "point"

            If definitive Then

                Me.SelEndXr = vValor[0]
                Me.SelEndYr = vValor[1]
                InsertInsert
                Me.Finish

            Else

                Me.SelEndXr = vValor[0]
                Me.SelEndYr = vValor[1]

                gcd.redraw
            End If
    End Select

End
