' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Inherits ToolsBase
'Create Private
'Create Static
Public Const Gender As String = "BLOCKS"

Public eBlock As Block

Private drwInsert As Drawing
Public fBlock As New Punto2d

Public eInsert As Entity
Public iStage As Integer
' Block insertion vars
Public fBlockScaleX As Float = 1
Public fBlockScaleY As Float = 1
Public fBlockDegRotation As Float = 0
Public fBlockInvert As Integer = 1


Public Function Start(Optional sfilename As Variant, Optional _mode As Integer = 0) As Boolean

    Dim xf As String[]
    Dim f As String
    Dim iREt As Integer

    If sfilename = 0 Then fBlocks.Show
    iStage = Int(Rnd(0, 1000))
    Debug "Start ", iStage
    Return
    eBlock = New Block
    eBlock.name = ""
    Me.EntityChecking = True
    drwInsert = New Drawing

    eBlock.entities = New Collection

    Dxf.LoadFile(sFilename, drwInsert, True, True, True, 0, True)         ' cargo la entidad
    'gcd.ImpEnty6(cModelPreview["ENTITIES"] , eBlock.entities)
    eBlock.name = Utils.FileWithoutExtension(Utils.FileFromPath(sFilename))

    'If iret = 0 Then Finish

    ' el user eligio un bloque y lo quiere insertar en algun punto

End

Public Sub Draw()


    If Not eInsert Then Return


    gl.PushMatrix
    gl.Translatef(fBlock.x, fBlock.y, 0)
    gl.Rotatef(fBlockDegRotation, 0, 0, 1)
    gl.Scalef(fBlockScaleX * fBlockInvert, fBlockScaleY, 1)

    gl.CallList(eInsert.glDrwList)

    gl.PopMatrix

End

Public Function MouseMove() ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseMove

    fBlock.x = gcd.Near(gcd.Xreal(mouse.x))
    fBlock.y = gcd.Near(gcd.Yreal(mouse.y))

    ' y si tengo enganche?

    ' If gcd.CurrentDrawing.iEntity[2] >= 0 Then
    '
    '     ' esto re enganchado
    '
    '     fBlock.x = gcd.CurrentDrawing.iEntity[0]
    '     fBlock.y = gcd.CurrentDrawing.iEntity[1]
    '
    ' End If

End

Public Function MouseUp() ' called by FCAD-> DrawingArea_MouseUp

    ' creo el bloque (si no existe y luego el insert)
    Dim i, ie As Integer
    Dim sBloque As String



    ' eInsert.pBlock = eBlock
    eInsert.Handle = gcd.NewHandle()
    eInsert.HandleOwner = "1"

    ' eInsert.Gcd.CCC[e.gender] = cadInsert
    ' eInsert.pLayer = gcd.CurrentDrawing.CurrLayer
    ' eInsert.colour = gcd.CurrentDrawing.CurrColor
    ' eInsert.LineType = gcd.CurrentDrawing.CurrLineType
    ' eInsert.LineWidth = gcd.CurrentDrawing.CurrLineWt
    ' eInsert.Gender = cadInsert.Gender
    eInsert.P[0] = fBlock.x
    eInsert.P[1] = fBlock.y

    eInsert.fParam[cadInsert.ipaEscX] = FBlockscaleX * fBlockInvert
    eInsert.fParam[cadInsert.ipaEscY] = FBlockscaleY


    eInsert.fParam[cadInsert.ipaRotacion] = FBlockdegRotation
    Gcd.CCC[eInsert.gender].Finish(eInsert)

    gcd.CurrentDrawing.oEntities.Add(eInsert, eInsert.Handle)

    ENTITYBUILDER.LastEntity = eInsert                                       ' save it to repeat on rigth click

    gcd.clsJobPrevious = Me
    gcd.clsJob = cadSelection
    DrawingAids.CleanTexts



    gcd.regen

End

Public Sub SetInsert(sBlockName As String, ScaleXYZ As Float, Rotation As Float, bInvert As Boolean)

    'Debug "Create", iStage
    ' Armo una entidad Insert y la meto en oSelected para que sea dibujada
    eInsert = cadInsert.NewEntity()'New Entity
    eInsert.Gender = cadInsert.Gender
    eInsert.pBlock = clsEntities.FIndBlock(sBlockName)' gcd.currentDrawing.oBlocks[icvBlocksInUse.Item.Key]
    eInsert.fParam[cadInsert.ipaEscX] = 1' ScaleXYZ
    eInsert.fParam[cadInsert.ipaEscY] = 1' ScaleXYZ
    eInsert.fParam[cadInsert.ipaEscZ] = 1' ScaleXYZ
    eInsert.fParam[cadInsert.ipaRotacion] = 0'Rotation
    'If bInvert Then eInsert.fParam[cadInsert.ipaEscX] *= -1

    ' gcd.currentDrawing.oSelected.Clear
    ' gcd.currentDrawing.oSelected.Add(eInsert, "1")
    fBlockDegRotation = Rotation
    fBlockScaleX = ScaleXYZ
    fBlockScaleY = ScaleXYZ

    If bInvert Then fBlockInvert = -1 Else fBlockInvert = 1

    clsEntities.glGenDrawList(eInsert)



End
