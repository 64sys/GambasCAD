' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Inherits ToolsBase
Public Const Gender As String = "HATCHS"

Public StepsDone As Integer

Public UserResponse As Integer  ' 1 = Cancel ; 2 =
Public entHatch As Entity

Public Function Start(Optional filename As Variant, Optional _mode As Integer = 0) As Boolean

    Dim xf As String[]
    Dim f As String
    Dim iREt, nsel, i As Integer
    Dim eBorder As Entity
    Dim p, p2 As Pattern
    Dim hp As HatchPattern
    Dim h As Hatch
    Dim c, s, x, y As Float


    ' desde el grafico entramos siempre a esta parte de la clase
    ' yo tengo q saber el estado de la comunicacion con el user
    ' entonces verifico

    Select Case StepsDone
        Case 0 ' nuevo hatch

            iRet = FHatch.Showmodal()

            Debug gcd.Drawing.LastHatchFile

            Select Case iRet
                Case 2 ' busqueda de contorno
                    gcd.clsJobPrevious = Me
                    gcd.clsJob = cadSelection

                    StepsDone = 1 ' cuando vuelvo aca, ya tengo un contorno

                Case 1 ' el user cancelo el hetch
                    gcd.clsJobPrevious = Me
                    gcd.clsJob = cadSelection
                    StepsDone = 0 ' cuando vuelvo aca, empiezo de nuevo

            End Select

        Case 1 ' vengo de seleccionar los parametros de hatch

            nSel = gcd.Drawing.SelectedEntities.Count
            If nsel = 0 Then Return
            If (gcd.Drawing.SelectedEntities[gcd.Drawing.SelectedEntities.First].Gender <> "LWPOLYLINE") And (gcd.Drawing.SelectedEntities[gcd.Drawing.SelectedEntities.First].PolyLine.Count < 6) Then
                Message("El contorno esta mal definido")

            Else
                StepsDone = 2
                iRet = FHatch.Showmodal()

                Debug gcd.Drawing.LastHatchFile

                Select Case iRet
                    Case 2 ' nueva busqueda de contorno
                        gcd.clsJobPrevious = Me
                        gcd.clsJob = cadSelection
                        StepsDone = 1 ' cuando vuelvo aca, ya tengo un contorno

                    Case 1 ' el user cancelo el hetch
                        gcd.clsJobPrevious = Me
                        gcd.clsJob = cadSelection
                        StepsDone = 0 ' cuando vuelvo aca, empiezo de nuevo

                    Case 3 ' confirma el Hatch

                        entHatch = cadHatch.NewEntity(, True)

                        h = New Hatch

                        entHatch.pBlock = h
                        entHatch.pBlock.eSegments = New Entity[]

                        h.SeedPoints.Insert([0, 0])

                        hp = gcd.HatchPatterns[UCase(gcd.Drawing.LastHatchPattern)]

                        entHatch.sParam[Gcd.CCC["HATCH"].sdaPattern] = gcd.Drawing.LastHatchPattern
                        entHatch.sParam[Gcd.CCC["HATCH"].sdaPaternFile] = gcd.Drawing.LastHatchFile

                        entHatch.fParam[Gcd.CCC["HATCH"].ipaScale] = gcd.Drawing.LastScale

                        entHatch.fParam[Gcd.CCC["HATCH"].ipaRotation] = gcd.Drawing.LastAngle

                        entHatch.pLayer = gcd.Drawing.CurrLayer ' "0" 'gcd.GetpLayer(fMain.CurrentLayer)




                        For Each p In hp.patterns
                            p2 = New Pattern
                            entHatch.pBlock.Patterns.Add(p2)
                            p2.AngleDeg = p.AngleDeg + entHatch.fParam[cadHatch.ipaRotation]
                            p2.BaseX = p.BaseX * entHatch.fParam[Gcd.CCC["HATCH"].ipaScale]
                            p2.BaseY = p.BaseY * entHatch.fParam[Gcd.CCC["HATCH"].ipaScale]
                            p2.OffsetX = p.OffsetX * entHatch.fParam[Gcd.CCC["HATCH"].ipaScale]
                            p2.OffsetY = p.OffsetY * entHatch.fParam[Gcd.CCC["HATCH"].ipaScale]

                            '  ' rotate point
                            ' xnew = px * c - pz * s
                            ' ynew = px * s + pz * c
                            c = Cos(p2.AngleDeg * Pi / 180)
                            s = Sin(p2.AngleDeg * Pi / 180)

                            x = p2.BaseX
                            y = p2.BaseY

                            p2.BaseX = X * c - Y * s
                            p2.BaseY = X * s + Y * c

                            x = p2.OffsetX
                            y = p2.OffsetY

                            p2.OffsetX = X * c - Y * s
                            p2.OffsetY = X * s + Y * c

                            For i = 0 To p.DashLength.max
                                p2.DashLength.Add(p.DashLength[i] * entHatch.fParam[Gcd.CCC["HATCH"].ipaScale])
                            Next

                        Next





                        For Each eBorder In gcd.Drawing.SelectedEntities
                            Select Case eBorder.Gender  ' veo si me sirve de borde
                                Case "LINE"

                                    entHatch.pBlock.eSegments.Add(eBorder)
                                Case "LWPOLYLINE"
                                    entHatch.pBlock.eSegments.Add(eBorder)
                                Case Else

                            End Select

                        Next

                        ' seteo el patron


                        hp = gcd.HatchPatterns[UCase(entHatch.sParam[Gcd.CCC["HATCH"].sdaPattern])]
                        For Each p In hp.patterns
                            entHatch.pBlock.Patterns.Add(p)
                            p.BaseX *= entHatch.fParam[Gcd.CCC["HATCH"].ipaScale]
                            p.BaseY *= entHatch.fParam[Gcd.CCC["HATCH"].ipaScale]
                            p.OffsetX *= entHatch.fParam[Gcd.CCC["HATCH"].ipaScale]
                            p.OffsetY *= entHatch.fParam[Gcd.CCC["HATCH"].ipaScale]
                            For i = 0 To p.DashLength.max
                                p.DashLength[i] *= entHatch.fParam[Gcd.CCC["HATCH"].ipaScale]
                            Next



                        Next

                        gcd.Drawing.Entities.Add(entHatch, entHatch.Handle)

                        Gcd.CCC[entHatch.gender].Finish(entHatch)

                        'LastEntity = entHatch                                       ' save it to repeat on rigth click

                        gcd.clsJobPrevious = Me
                        gcd.clsJob = cadSelection
                        cadSelection.PoiChecking = True
                        DrawingAids.CleanTexts

                        'clsEntities.GLGenDrawList

                        gcd.Regen()
                        StepsDone = 0
                End Select

            Endif

    End Select

End
