' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Martin Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Inherits ToolsBase
Public Const Gender As String = "Blocks"

Public eBlock As New Block
Private cModelPreview As Collection
Public fBlock As New Punto2d

Public Function Start(Optional sfilename As Variant, Optional _mode As Integer = 0) As Boolean

    Dim xf As String[]
    Dim f As String
    Dim iREt As Integer


    eBlock.name = ""
    Me.EntityChecking = True
    cModelPreview = New Collection

    eBlock.entities = New Entity[]


    Dxf.LoadFile(sFilename, cModelPreview)         ' cargo la entidad
    gcd.ImpEnty6(cModelPreview["ENTITIES"], eBlock.entities)

    'If iret = 0 Then Me.Finish

    ' el user eligio un bloque y lo quiere insertar en algun punto

End

Public Sub Draw()

    Dim ET As Entity, i As Integer

    If eBlock.entities.Count = 0 Then Return

    gl.PushMatrix
    gl.Translatef(fBlock.x, fBlock.y, 0)
    ' gl.Rotatef(FBlock.degRotation, 0, 0, 1)
    ' gl.Scalef(FBlock.scaleX, fBlock.scaleY, 1)

    For Each ET In eBlock.entities
        'et.visible = True


        et.pLayer = gcd.CurrDrawing.CurrLayer
        et.colour = gcd.CurrDrawing.CurrColor
        et.ColorToPaint = gcd.gColor[et.colour]

        et.LineType = gcd.CurrDrawing.CurrLineType

        et.LineWidth = gcd.CurrDrawing.CurrLineWt

        et.ClassHandler.Draw(et)
    Next

    gl.PopMatrix

End

Public Function MouseMove(mouseX As Integer, mouseY As Integer) ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseMove

    fBlock.x = puntos.Near(fMain.Xreal(mouseX))
    fBlock.y = puntos.Near(fMain.yreal(mouseY))

    ' y si tengo enganche?

    If gcd.CurrDrawing.iEntity[2] >= 0 Then

        ' esto re enganchado

        fBlock.x = gcd.CurrDrawing.iEntity[0]
        fBlock.y = gcd.CurrDrawing.iEntity[1]

    End If

End

Public Function MouseUp(mouseX As Integer, mouseY As Integer) ' called by FCAD-> DrawingArea_MouseUp

    ' creo el bloque (si no existe y luego el insert)
    Dim entInsert As New Entity
    Dim i, ie As Integer
    Dim sBloque As String
    Dim entPart As Entity

    ' busco el bloque

    For i = 0 To gcd.CurrDrawing.arrBlocks.Max

        If gcd.CurrDrawing.arrBlocks[i].name = FBlock.BlockName Then Break

    Next

    If i = gcd.CurrDrawing.arrBlocks.Count Then ' armo el bloque

        gcd.CurrDrawing.arrBlocks.Add(eBlock)
        eBlock.name = FBlock.BlockName
        For ie = 0 To FBlock.entyBlock.Max
            eBlock.entities.Add(clsEntities.ClonEntity(FBlock.entyBlock[ie]))
        Next

    End If

    ' ahora creo el insert

    gcd.CurrDrawing.arrEntities.Add(entInsert)
    entInsert.Block = eBlock.name
    entInsert.ClassHandler = cadInsert
    entInsert.Layer = fMain.CurrentLayer
    entInsert.Gender = cadInsert.Gender
    entInsert.P.Add(fBlock.x)
    entInsert.P.Add(fBlock.y)

    entInsert.fParam.Add(FBlock.scaleX)
    entInsert.fParam.Add(FBlock.scaleY)
    entInsert.fParam.Add(FBlock.degRotation)
    entInsert.ClassHandler.Finish(entInsert)

    EntityBuilder.LastEntity = entInsert                                       ' save it to repeat on rigth click

    ' limpio el selector de bloques

    FBlock.entyBlock.Clear
    FBlock.Name = ""

    gcd.clsJobPrevious = Me
    gcd.clsJob = clsDefaultJob
    clsDrawingAids.CleanTexts

    fMain.regen

End
