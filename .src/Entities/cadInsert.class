' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static

Public Const Gender As String = "Insert"
Public Const HelperTrabajo As String = ("Inserts a block")
Public Const ParamType As String = "TPFFF"
Public Const ParamHelper As String = "BlockName; Position ; X scale ; Y scale ; Rotation"
Public Const ParamDefault As String = "<no name>; 0,0 ; 1 ;1 ; 0"
Public Const GAMBASCADENTITY As String = "EntityBase"
Public Const USEWITH As String = "EntityBuilder"
Public Const DrawingOrder As Integer = 0        ' 1 = draws first
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const OrthogonalIgnored As Boolean = False
Public Const OrthogonalForced As Boolean = False
Public Const StretchAble As Boolean = True           ' Si lo puedo deformar
Public Selected As Boolean

Public DrawAble As Boolean = False          ' True si durante la construccion ya tiene suficientes elementos para poder hacer una representacion digna
Public Visible As Boolean = True            ' si esta entidad puede ser mostrada independientmente
Public Finished As Boolean = False          ' colocar en true cuando se llegue a completar
Public StepsDone As Integer                 ' esto lo cambia cls ElementBuilder durante la construccion

' DXF Read/Export

Public Const DXF_Reading As Boolean = True
Public Const DXF_Export As Boolean = True

' fParam helpers
Public Const TotalParams As Integer = 4
Public Const ipaEscX As Integer = 0
Public Const ipaEscY As Integer = 1
Public Const ipaEscZ As Integer = 2
Public Const ipaRotacion As Integer = 3

' special vars

Public CurrLType As Integer
Public CurrColor As Integer
Public CurrLwt As Float

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

    Dim i As Integer

    If OnlySelected Then

        For i = 0 To e.Psel.Max
            If e.Psel[i] Then

                e.P[i * 2] += dx
                e.P[i * 2 + 1] += dy

            Endif
        Next

    Else

        puntos.Translate(e.p, dx, dy)
    Endif

End

Public Sub Rotate(e As Entity, radians As Float)

    puntos.Rotate(e.P, radians)
    E.fParam[Me.ipaRotacion] += radians

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

    Dim i As Integer

    E.fParam[Me.ipaEscX] *= sX
    E.fParam[Me.ipaEscY] *= sY
    For i = 0 To e.p.max Step 2

        e.P[i] = e.P[i] * sX
        e.P[i + 1] = e.P[i + 1] * sY

    Next

End

Public Sub Draw(oE As Entity, Optional Relative As Boolean = True)

    Dim ET As Entity, i As Integer
    Dim pBlockToDraw As Block

    If Not oe.Finished Then Return

    ' gl.PushMatrix
    ' If Relative Then gl.Translatef(fMain.pixels(oE.p[0]) / gcd.CurrDrawing.ScaleZoom, fMain.pixels(oE.p[1]) / gcd.CurrDrawing.ScaleZoom, 0)
    ' gl.Rotatef(oE.fParam[Me.ipaRotacion], 0, 0, 1)
    ' gl.Scalef(oE.fParam[Me.ipaEscX], oE.fParam[Me.ipaEscY], oE.fParam[Me.ipaEscZ])
    If oe.pBlock Then Draw_List(oe.pBlock.entities, oe, Relative)

End

Public Sub Draw_List(eList As Entity[], eParent As Entity, Optional Relative As Boolean = True)

    Dim et As Entity

    gl.PushMatrix
    If Relative Then gl.Translatef(fMain.pixels(eParent.p[0]) / gcd.CurrDrawing.ScaleZoom, fMain.pixels(eParent.p[1]) / gcd.CurrDrawing.ScaleZoom, 0)

    gl.Scalef(eParent.fParam[Me.ipaEscX], eParent.fParam[Me.ipaEscY], eParent.fParam[Me.ipaEscZ])
    gl.Rotatef(eParent.fParam[Me.ipaRotacion], 0, 0, 1)
    For Each ET In eList
        et.visible = True
        et.LineType = eParent.LineType
        et.colour = eParent.colour
        et.LineWidth = eParent.LineWidth

        If et.Gender = "Insert" Then

            If et.pBlock Then Draw_List(et.pBlock.entities, et)
        Else
            et.ClassHandler.Draw(et)
        End If

    Next
    gl.PopMatrix

End

'' A selected version of the entity
Public Sub DrawSelected(oE As Entity)

    ' Dim ET As Entity, i As Integer
    '
    ' ' FIXME this does not work for Inserts cointaining other inserst
    '
    ' For i = oe.iInsert + 1 To gcd.CurrDrawing.arrEntities.max
    '   If gcd.CurrDrawing.arrEntities[i].iInsert <> oe.iInsert Then Break
    '   gcd.CurrDrawing.arrEntities[i].ClassHandler.DrawSelected(gcd.CurrDrawing.arrEntities[i])
    '
    ' Next

End

'' A fat version of the entity
Public Sub DrawRemark(oE As Entity)

    Dim ET As Entity, i As Integer

    ' DEPRECADO
    ' For i = oe.iInsert + 1 To gcd.CurrDrawing.arrEntities.max
    '     If gcd.CurrDrawing.arrEntities[i].iInsert = -1 Then Break
    '     gcd.CurrDrawing.arrEntities[i].ClassHandler.DrawRemark(gcd.CurrDrawing.arrEntities[i])
    '
    ' Next

End

'' A fat version of the entity
' Public Sub DrawRemarkBackup(oE As Entity)
'
'   Dim ET As Entity, i As Integer
'
'   i = clsEntities.FIndBlockID(oE.Block)
'   If i < 0 Then Return
'
'   gl.PushMatrix
'   gl.Translatef(fMain.pixels(oE.p[0]) / gcd.CurrDrawing.ScaleZoom, fMain.pixels(oE.p[1]) / gcd.CurrDrawing.ScaleZoom, 0)
'   gl.Rotatef(oE.fParam[2], 0, 0, 1)
'   gl.Scalef(oE.fParam[0], oE.fParam[1], 1)
'
'   For Each ET In gcd.CurrDrawing.arrBlocks[i].entities
'     et.visible = True
'     et.ClassHandler.DrawRemark(et)
'   Next
'   gl.PopMatrix
'
' End

Public Function Draw2(oE As Entity)

    ' If Not oE.Visible Then Return
    '
    ' Dim ET As Entity, i As Integer
    ' paint.save
    ' paint.Translate(fMain.pixels(oE.p[0]) / gcd.CurrDrawing.ScaleZoom, fMain.pixels(oE.p[1]) / gcd.CurrDrawing.ScaleZoom)
    ' paint.Scale(oE.fParam[0], oE.fParam[1])
    ' paint.Rotate(oE.fParam[2])
    ' gcd.ScaleLines = (Abs(oE.fParam[0]) + Abs(oE.fParam[1])) / 2
    ' For Each ET In gcd.CurrDrawing.arrBlocks[i].entities
    '   et.Draw
    ' Next
    ' gcd.ScaleLines = 1
    ' paint.Restore

End
'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity, Optional arrIndex As Integer = -1) As Integer

    If arrIndex < 0 Then arrIndex = gcd.CurrDrawing.arrEntities.Max       ' si este valor no es provisto , estos POI son de la ultima entidad

    oe.PoiPoints.Clear
    oe.PoiType.Clear
    oe.Polygon.Clear

    ' points
    oe.poiPoints.insert([oE.p[0], oE.p[1]])
    oe.poiType.Add(gcd.poiBasePoint)
    'oe.poiEntities.Add(arrIndex)

    ' polygon
    Dim fLimits As Float[]
    If IsNull(oe.pBlock) Then Return ' Stop
    fLimits = clsEntities.ComputeLimits(oe.pBlock.entities)
    If IsNull(fLimits) Then Return
    oe.Polygon.Insert([fLimits[0], fLimits[1], fLimits[2], fLimits[1], fLimits[2], fLimits[3], fLimits[0], fLimits[3]])
    puntos.Scale(oe.Polygon, oe.fParam[cadInsert.ipaEscX], oe.fParam[cadInsert.ipaEscY])
    puntos.Rotate(oe.Polygon, oe.fParam[cadInsert.ipaRotacion] * Pi / 180) ' TODO: verificar orden de esta y la siguiente linea
    puntos.Translate(oe.Polygon, oe.P[0], oe.P[1])
    'If oe.fParam[cadInsert.ipaRotacion] <> 0 Then Stop

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(oE As Entity) As Boolean

    Dim ET As Entity, i As Integer

    'Print "Finish en EntityBase"

    '  BuildPOI(oe)

    ' busco el tipo de linea, si hace falta

    oE.psel.resize(oE.p.count / 2)

    oE.DrawAble = True
    oE.Selected = False
    oE.Finished = True

End
'

Public Sub ExportDXFCol(e As Entity, ByRef cExport As Collection) As Boolean

    cExport.Add("INSERT", dxf.codEntity)
    clsEntities.DXFExportCommonCol(e, cExport)
    cExport.Add("AcDbBlockReference", "100")
    cExport.Add(e.pBlock.name, dxf.codName)
    cExport.Add(CStr(e.p[0]), dxf.codX0)
    cExport.Add(CStr(e.p[1]), dxf.codY0)
    cExport.Add("0", dxf.codZ0)

    cExport.Add(CStr(e.fParam[Me.ipaEscX]), "40")           ' X scale factor
    cExport.Add(CStr(e.fParam[Me.ipaEscY]), "41")           ' Y scale factor
    cExport.Add(CStr(e.fParam[Me.ipaEscZ]), "42")           ' Z scale factor
    cExport.Add(CStr(e.fParam[Me.ipaRotacion]), "50")       ' rotation

    cExport.Add("1", "70")
    cExport.Add("1", "71")
    cExport.Add("0", "44")
    cExport.Add("0", "45")

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer

    e.fParam.Resize(Me.TotalParams)
    ' tengo q presuponer que las escalas son = 1
    e.fParam[Me.ipaEscX] = 1    ' esc X
    e.fParam[Me.ipaEscY] = 1    ' esc Y
    e.fParam[Me.ipaEscZ] = 1    ' esc Z

    For i = 0 To sClaves.Max

        If sClaves[i] = "2" Then e.pBlock = clsEntities.FIndBlock(sValues[i])
        If sClaves[i] = "10" Then e.P.Add(CFloat(sValues[i]))         ' X
        If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))         ' Y
        If sClaves[i] = "41" Then e.fParam[Me.ipaEscX] = CFloat(sValues[i])         ' esc X
        If sClaves[i] = "42" Then e.fParam[Me.ipaEscY] = CFloat(sValues[i])         ' esc Y
        If sClaves[i] = "43" Then e.fParam[Me.ipaEscZ] = CFloat(sValues[i])         ' esc Z
        If sClaves[i] = "50" Then e.fParam[Me.ipaRotacion] = CFloat(sValues[i])      ' rotacion
    Next

    If e.fParam[Me.ipaEscZ] = 0 Then e.fParam[Me.ipaEscZ] = 1    ' esc Z
    ' esc Z

    Return True

    '' catch

    Return False

End
