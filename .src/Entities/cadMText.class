' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
' Fast
Inherits CadText
Public Const Gender As String = "MText"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const CmdLineHelper As String = ("Inserts a multiline text")
Public Const ParamType As String = "PAFT"
Public Const ParamHelper As String = "Start point;Angle;Heigth;"     ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ; 0 ; 10 ; "

' esto es para texto RTF o complejos
Private Printing As Boolean

Private TextAngle As Float

Private TextLines As New String[]
Private TextHeigth As New Float[]
Private TextPosX As New Float[]
Private TextBoxWidth As New Float[]
Private TextPosY As New Float[]
Private TextBoxHeight As New Float[]
Private TextAlignment As New Integer[]
Private TextFont As New String[]
Private TextBold As New Boolean[]

Private CurrentTextLines As String
Private CurrentTextHeigth As Float
Private CurrentTextPosX As Float
Private OriginalTextPosX As Float
Private CurrentTextBoxWidth As Float
Private CurrentTextPosY As Float
Private CurrentTextBoxHeight As Float
Private CurrentTextAlignment As Integer     ' horizontal alignment 0 left/1 center/2 right
Private CurrentTextFont As String
Private CurrentTextBold As Boolean
Private CurrentTextItalic As Boolean
Private CurrentTextCrossed As Boolean
Private CurrentTextAngle As Float
Private CurrentTextColor As Integer
Private NewLine As Boolean

Private LastTextLengh As Integer

' to create the contour

Public MyPolygon As New Float[]

Public TxtStyles As New TextStyle[] ' creados a partir de {}
Public TxtStyle As TextStyle ' el que estoy usando

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    Dim f As Float
    Dim ip As Integer

    If Me.StepsDone = 0 Then  '  posicion

        If vParam[0] <> "point" Then Return False

        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]

        If definitive Then Return True

    Else If Me.StepsDone = 1 Then ' angulo del texto

        If vParam[0] <> "float" Then Return False

        eBuild.fParam[Me.ipaTextAngle] = vParam[1]
        eBuild.fParam[Me.ipaAttchmPoint] = 0
        eBuild.fParam[Me.ipaDrawingDirec] = 0

        If definitive Then Return True

    Else If Me.StepsDone = 2 Then   ' altura

        If vParam[0] <> "float" Then Return False

        eBuild.fParam[Me.ipaTextHeight] = vParam[1]

        If definitive Then Return True

    Else If Me.StepsDone = 3 Then    ' texto

        If vParam[0] <> "text" Then Return False

        eBuild.stringdata[Me.sdaText] = vParam[1]

        If definitive Then Return True

    Else
        Return False
    End If

End

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

    Dim i As Integer

    If OnlySelected Then

        For i = 0 To e.Psel.Max
            If e.Psel[i] Then

                e.P[i * 2] += dx
                e.P[i * 2 + 1] += dy

            Endif
        Next

    Else

        puntos.Translate(e.p, dx, dy)
    Endif

    CreatePolygon(e)
    BuildPOI(e)

End

Public Sub Rotate(e As Entity, radians As Float)

    puntos.Rotate(e.P, radians)

    ' el parametro lo tengo que pasar a grados porque la rutina que dibuja el texto usa eso
    E.fParam[Me.ipaTextAngle] += radians * 180 / Pi

    CreatePolygon(e)
    BuildPOI(e)

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

    Dim i As Integer

    E.fParam[Me.ipaTextHeight] *= sY
    For i = 0 To e.p.max Step 2

        e.P[i] = e.P[i] * sX
        e.P[i + 1] = e.P[i + 1] * sY

    Next

    CreatePolygon(e)
    BuildPOI(e)

End

'' A fat version of the line
Public Sub DrawSelected(oE As Entity)

    GLplus.Polygon(oE.Polygon, config.ColorForSelected, oE.LineWidth, gcd.stiDashed)

End

'' A fat version of the line
Public Sub DrawRemark(oE As Entity)

    If Not oE.Visible Then Return

    GLplus.Polygon(oE.Polygon, gcd.GetGBColor(oE.Colour, oe.pLayer), oE.LineWidth, gcd.stiDashed)

End

Public Function Draw2(oE As Entity)

    Printing = True
    Draw(oe)
    Printing = False

End

Public Sub CreatePolygon(oE As Entity)

    Dim tRect As New Float[]

    oE.Polygon.Clear

    ' tRect = glPlus.MTextExtends(oE.stringdata[Me.sdaText], oE.p[0], oE.p[1], oE.fParam[Me.ipaTextHeight])

    ' armo el poligono , que ya tiene la escala
    If Abs(Me.MyPolygon[0]) > 1e9 Then Return
    oE.Polygon.Insert([Me.MyPolygon[0], Me.MyPolygon[1]])
    oE.Polygon.Insert([Me.MyPolygon[0], Me.MyPolygon[3]])
    oE.Polygon.Insert([Me.MyPolygon[2], Me.MyPolygon[3]])
    oE.Polygon.Insert([Me.MyPolygon[2], Me.MyPolygon[1]])

    ' puntos.Rotate(oE.Polygon, oE.fParam[0] * Pi / 180)
    ' puntos.Translate(oE.Polygon, oE.P[0], oE.P[1])

End
'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity) As Integer

    ' points

    oe.PoiPoints.Clear
    oe.PoiType.Clear

    oe.poiPoints.insert([oE.p[0], oE.p[1]])
    oe.poiType.Add(gcd.poiBasePoint)
    'oe.poiEntities.Add(arrIndex)

End

Public Sub Draw(oE As Entity)

    If Not oE.Visible Then Return
    'If oe.Handle = "7BD36" Then Stop
    TextAngle = oe.fParam[Me.ipaTextAngle]
    ' voy a procesar texto
    CurrentTextPosX = oE.p[0]
    CurrentTextPosY = oE.p[1]
    CurrentTextHeigth = oE.fParam[Me.ipaTextHeight]
    CurrentTextBoxWidth = oE.fParam[Me.ipaRectangleWidth]

    If CurrentTextHeigth = 0 Then CurrentTextHeigth = 1

    Select Case oe.fParam[Me.ipaAttchmPoint]

        Case 1      ' Top/Left
            CurrentTextPosY -= CurrentTextHeigth
            CurrentTextAlignment = 0
        Case 2      ' Top/Center
            CurrentTextPosY -= CurrentTextHeigth
            CurrentTextAlignment = 1
        Case 3      ' Top/Right
            CurrentTextPosY -= CurrentTextHeigth
            CurrentTextAlignment = 2
        Case 4      ' Middle/Left
            CurrentTextPosY -= CurrentTextHeigth / 2
            CurrentTextAlignment = 0
        Case 5      ' Middle/Center
            CurrentTextPosY -= CurrentTextHeigth / 2
            CurrentTextAlignment = 1
        Case 6      ' Middle/Right
            CurrentTextPosY -= CurrentTextHeigth / 2
            CurrentTextAlignment = 2
        Case 7      ' Bottom/Left
            CurrentTextPosY -= 0
            CurrentTextAlignment = 0
        Case 8      ' Bottom/Center
            CurrentTextPosY -= 0
            CurrentTextAlignment = 1
        Case 9      ' Bottom/Right
            CurrentTextPosY -= 0
            CurrentTextAlignment = 2

    End Select

    ' guardo
    OriginalTextPosX = CurrentTextPosX

    CurrentTextAngle = oE.fParam[Me.ipaTextAngle] * 180 / Pi
    CurrentTextColor = gcd.GetGBColor(oE.Colour, oe.pLayer)

    'If InStr(oE.Handle, "1C1DD12D") > 0 Then Stop
    '
    ' If InStr(oE.stringdata[0], "Madera Blanda ") > 0 Then Stop

    MyPolygon.Clear
    MyPolygon.insert([1e10, 1e10, -1e10, -1e10])

    ' https://ezdxf.readthedocs.io/en/stable/tutorials/mtext.html
    ' https://ezdxf.readthedocs.io/en/stable/dxfentities/mtext.html#mtext-inline-codes

    ' MTEXT tiene in-line formatting, ver esa web
    ProcessText3(oE.stringdata[Me.sdaText])

    CreatePolygon(oe)

    'glPlus.DrawMultilineText(oE.stringdata[0], oE.p[0], oE.p[1], oE.fParam[0], oE.fParam[1], gcd.GetGBColor(oE.Colour, oe.pLayer))

    'If oE.stringdata[0] <> "" Then CreatePolygon(oe)

End

Public Sub ProcessText(RTF As String)

    ' hay 3 posibilidades , empieza con:
    ' {
    ' \
    ' TEXTO cualquiera

    ' busco lo que esta entre {}
    Dim p1, p2, p3 As Integer
    Dim sRemains, sToProcess As String

    NewLine = True
    sRemains = rtf
    If SRemains = "" Then Return
    If Left$(sRemains, 1) = "}" Then                    '}more4}{more5}
        ProcessText(Mid(sRemains, 2))
        Return
    Endif
    'Debug rtf
    'If InStr(LCase(rtf), "plano de instalacion electrica") > 0 Then Stop
    'Do
    p1 = InStr(rtf, "{")
    If p1 > 1 Then                              'sToProcess{sRemains}{more{more here}}
        sToProcess = Left$(sRemains, p1 - 1)
        sRemains = Mid$(sRemains, p1)

        ProcessPart(sToProcess)
        ProcessText(sRemains)

    Else
        p3 = InStr(rtf, "{", p1 + 1)
        p2 = InStr(sRemains, "}")
        If (p3 > 0) And (p3 > p2) Then          '{sRemains}{more{more here}}
            sToProcess = Mid$(sRemains, 2, p2 - 2) 'sRemains
            sRemains = Mid$(sRemains, p2 + 1)       '{more{more here}}

            ProcessPart(sToProcess)
            ProcessText(sRemains)

        Else If p2 > 0 Then                                            '{more1{more here2{and more3}}more4}{more5}
            sToProcess = Mid$(sRemains, 2, p2 - 2)     'more1
            sRemains = Mid$(sRemains, p2 + 1)           'more here2{and more3}}more4}{more5}

            ProcessPart(sToProcess)
            ProcessText(sRemains)
        Else

            ProcessPart(sRemains)

        Endif

    Endif
    'Loop Until Len(sRemains) = 0
    ' Code   Description
    ' \L   Start underline
    ' \l   Stop underline
    ' \O   Start overline
    ' \o   Stop overline
    ' \K   Start strike-through
    ' \k   Stop strike-through
    ' \P   New paragraph (new line)
    ' \p   Paragraphs properties: indentation, alignment, tabulator stops
    ' \pi \pxi \pxt    Control codes for bullets, numbered paragraphs, tab stops and columns - e.g. bullets: \pxi-3,l3,t3;, tab stops: \pxt10,t12;
    ' \X    Paragraph wrap on the dimension line (only in dimensions)

    ' \X   Paragraph wrap on the dimension line (only in dimensions)
    ' \Q   Slanting (oblique) text by angle - e.g. \Q30;
    ' \H   Text height - e.g. relative \H3x; absolut \H3;
    ' \W   Text width - e.g. relative \W0.8x; absolut \W0.8;
    ' \T   Tracking, character spacing - e.g. relative \T0.5x; absolut \T2;
    ' \F   Font selection e.g. \Fgdt;o - GDT-tolerance
    ' \S   Stacking, fractions e.g. \SA^ B; space after “^” is required to avoid caret decoding, \SX/Y; \S1#4;
    ' \A   Alignment
    '
    '     \A0; = bottom
    '     \A1; = center
    '     \A2; = top
    '
    ' \C   Color change
    '
    '     \C1; = red
    '     \C2; = yellow
    '     \C3; = green
    '     \C4; = cyan
    '     \C5; = blue
    '     \C6; = magenta
    '     \C7; = white
    '
    ' \~   Non breaking space
    ' {}   Braces - define the text area influenced by the code, codes and braces can be nested up to 8 levels deep
    ' \   Escape character - e.g. \{ = “{”

End

Public Sub ProcessText2(RTF As String)

    ' busco lo que esta entre {} y anidaciones

    Dim p1, p2 As Integer
    Dim sRemains, sToProcess As String
    Dim Abro, Cierro As New Integer[]
    Dim stxEnviar As New String[]
    Dim partes As Integer
    Dim iAbro As Integer
    Dim iCierro As Integer
    Dim iProf As Integer

    sRemains = rtf
    'Debug rtf
    'If InStr(LCase(rtf), "plano de instalacion electrica") > 0 Then Stop
    p1 = 0
    Do
        p1 = InStr(rtf, "{", P1 + 1)
        If p1 > 0 Then Abro.Add(p1)
    Loop Until p1 = 0

    p1 = 0
    Do
        p1 = InStr(rtf, "}", P1 + 1)
        If p1 > 0 Then Cierro.Add(p1)
    Loop Until p1 = 0

    If Abro.Max <> Cierro.Max Then Stop

    iAbro = 0
    iCierro = 0
    iProf = 0

    If Abro.Count = 0 Then
        ProcessPart(sRemains)
    Endif

    Do

        If Abro[iAbro] > Cierro[iCierro] Then

        Endif
    Loop

End

Public Sub ProcessText3(RTF As String)

    ' voy a hacer una gran division
    ' separo el texto a imprimir en lineas \P
    ' busco lo que esta entre {}
    Dim p1, p2, p3 As Integer
    Dim sLines As New String[]
    Dim sRemains, sToProcess As String

    sLines = Utils.SplitComplex(rtf, "\\P")

    If sLines.Count > 1 Then Stop

    For Each sRemains In sLines
        Print sRemains
        ProcessPart2(sRemains)
    Next

    ' NewLine = True
    ' sRemains = rtf
    ' If SRemains = "" Then Return
    ' If Left$(sRemains, 1) = "}" Then                    '}more4}{more5}
    '     ProcessText(Mid(sRemains, 2))
    '     Return
    ' Endif
    ' 'Debug rtf
    ' 'If InStr(LCase(rtf), "plano de instalacion electrica") > 0 Then Stop
    ' 'Do
    ' p1 = InStr(rtf, "{")
    ' If p1 > 1 Then                              'sToProcess{sRemains}{more{more here}}
    '     sToProcess = Left$(sRemains, p1 - 1)
    '     sRemains = Mid$(sRemains, p1)
    '
    '     ProcessPart(sToProcess)
    '     ProcessText(sRemains)
    '
    ' Else
    '     p3 = InStr(rtf, "{", p1 + 1)
    '     p2 = InStr(sRemains, "}")
    '     If (p3 > 0) And (p3 > p2) Then          '{sRemains}{more{more here}}
    '         sToProcess = Mid$(sRemains, 2, p2 - 2) 'sRemains
    '         sRemains = Mid$(sRemains, p2 + 1)       '{more{more here}}
    '
    '         ProcessPart(sToProcess)
    '         ProcessText(sRemains)
    '
    '     Else If p2 > 0 Then                                            '{more1{more here2{and more3}}more4}{more5}
    '         sToProcess = Mid$(sRemains, 2, p2 - 2)     'more1
    '         sRemains = Mid$(sRemains, p2 + 1)           'more here2{and more3}}more4}{more5}
    '
    '         ProcessPart(sToProcess)
    '         ProcessText(sRemains)
    '     Else
    '
    '         ProcessPart(sRemains)
    '
    '     Endif
    '
    ' Endif
    ' 'Loop Until Len(sRemains) = 0
    ' Code   Description
    ' \L   Start underline
    ' \l   Stop underline
    ' \O   Start overline
    ' \o   Stop overline
    ' \K   Start strike-through
    ' \k   Stop strike-through
    ' \P   New paragraph (new line)
    ' \p   Paragraphs properties: indentation, alignment, tabulator stops
    ' \pi \pxi \pxt    Control codes for bullets, numbered paragraphs, tab stops and columns - e.g. bullets: \pxi-3,l3,t3;, tab stops: \pxt10,t12;
    ' \X    Paragraph wrap on the dimension line (only in dimensions)

    ' \X   Paragraph wrap on the dimension line (only in dimensions)
    ' \Q   Slanting (oblique) text by angle - e.g. \Q30;
    ' \H   Text height - e.g. relative \H3x; absolut \H3;
    ' \W   Text width - e.g. relative \W0.8x; absolut \W0.8;
    ' \T   Tracking, character spacing - e.g. relative \T0.5x; absolut \T2;
    ' \F   Font selection e.g. \Fgdt;o - GDT-tolerance
    ' \S   Stacking, fractions e.g. \SA^ B; space after “^” is required to avoid caret decoding, \SX/Y; \S1#4;
    ' \A   Alignment
    '
    '     \A0; = bottom
    '     \A1; = center
    '     \A2; = top
    '
    ' \C   Color change
    '
    '     \C1; = red
    '     \C2; = yellow
    '     \C3; = green
    '     \C4; = cyan
    '     \C5; = blue
    '     \C6; = magenta
    '     \C7; = white
    '
    ' \~   Non breaking space
    ' {}   Braces - define the text area influenced by the code, codes and braces can be nested up to 8 levels deep
    ' \   Escape character - e.g. \{ = “{”

End

' procesa una linea de MText con todos sus modificadores
Public Function ProcessPart2(sLine As String) As String

    Dim s2, sFont, s3, s4, sTab, sPrint As String
    Dim p1, p2, p3, p4, p5 As Integer
    Dim fAlign, fAlignR, fRect As New Float[]

    Dim angulo As Float, hText As New PaintExtents, lText As String
    Dim FontScalePrev As Float
    Dim iSpace As Integer
    Dim s5 As String
    Dim stxWords As String[]
    Dim i4 As Integer

    s2 = sLine

    ' reemplazo caracteres especiales
    s2 = Replace(s2, "%%D", "U+00B0")
    s2 = Replace(s2, "%%P", "U+00B1")
    s2 = Replace(s2, "%%C", "U+2205")

    Do ' proceso la linea hasta que no me queden mas caracteres
        If Left$(s2, 1) = "{" Then  ' voy a modificar los parametros del estilo de texto
            TxtStyle = New TextStyle
            TxtStyles.Add(TxtStyle)
            s2 = Mid(s2, 2)
        End If

        If Left$(s2, 1) = "}" Then  ' vuelvo al estilo anterior

            TxtStyles.Remove(TxtStyles.max)
            TxtStyle = TxtStyles.Last
            s2 = Mid(s2, 2)
        End If

        Select Case Mid$(s2, 1, 2)

            Case "\\U" ' ej \U+0045

                ' es un caracter utf, no hago nada

            Case "\\f"            ' esta indicado un cambio en la fuente
                '  \fVerdana|b0|i0|cxxx|p34;
                p1 = InStr(s2, "|")
                TxtStyle.FontName = Mid$(s2, 2, p1 - 2)
                p1 = InStr(s2, "|b")
                If p1 > 0 Then
                    TxtStyle.Bold = (Mid$(s2, p1 + 2, 1) = "1")
                End If
                p1 = InStr(s2, "|i")
                If p1 > 0 Then

                    TxtStyle.Italic = (Mid$(s2, p1 + 2, 1) = "1")
                End If

                p1 = InStr(s2, "|c")    ' codepage
                If p1 > 0 Then

                    p2 = InStr(s2, "|", p1 + 1)
                    ' Try CurrentTextColor = Mid$(s2, p1 + 2, p2 - p1 - 1) = "1"
                End If
                p1 = p2 + 1

                p1 = InStr(s2, "|p") ' paragraph
                p2 = InStr(s2, ";", p1)
                If p1 > 0 Then

                    'CurrentTextHeigth = CFloat(Mid$(s2, p1 + 2, p2 - p1 - 2)) / 100
                End If

                s2 = Mid(s2, p2 + 1)

            Case "\\C"            ' cambio de color

                p2 = InStr(s2, ";", p1)

                TxtStyle.cadColor = gcd.GetGBColor(CInt(Mid(s2, 3, p2 - 3)))

                s2 = Mid(s2, p2 + 1)

                ' Case "\\P"            ' New line
                '     CurrentTextPosY -= glPlus.TextExtends("XXX", CurrentTextHeigth)[1] * 1.2
                '     CurrentTextPosX = OriginalTextPosX
                '     NewLine = True
                '     s2 = Mid(s2, 3)
                '     If Len(s2) > 0 Then ProcessPart(s2)

            Case "\\p"            ' no se que significa esto, suele venir \p12.55;
                p2 = InStr(s2, ";", p1)
                s2 = Mid(s2, p2 + 1)

                ' Case "\\t", "^I"            ' tab avanzo 4-texto anterior
                '   ' TODO: verificar sin Tab=4 espacios
                '   If LastTextLengh > 4 Then sTab = "    " Else sTab = Space(4 - LastTextLengh)
                '   s2 = stab & Mid(s2, 3)
                '   If Len(s2) > 0 Then ProcessPart(s2)
                '   LastTextLengh = 0

            Case "\\T" 'Adjusts the space between characters. Valid values range from a minimum of .75 to 4 times the original spacing between characters.

            Case "\\Q"  '\Q angle; changes obliquing angle
                s2 = Mid(s2, 3)
            Case "\\O"  '\O changes to overline
                s2 = Mid(s2, 3)
            Case "\\L"  '\O changes to underline
                s2 = Mid(s2, 3)

            Case "\\W"            ' \W value; changes width factor To produce wide text
                p2 = InStr(s2, ";", p1)
                CurrentTextPosX += CFloat(Mid(s2, 3, p2 - 3))
                s2 = Mid(s2, p2 + 1)

            Case "\\A"            ' Sets the alignment value; valid values: 0, 1, 2(bottom, center, top)

                If Mid(s2, 3, 1) = "1" Then ' es mid

                    ' extraigo el texto puro para poder calcular bien el centrado
                    p2 = InStr(s2, ";", p1)
                    s2 = Mid(s2, p2 + 1)

                    fAlign = glPlus.TextExtends(s2, CurrentTextHeigth)
                    'fAlign[0] *= -1
                    'fAlign[1] *= 1

                    puntos.Rotate(fAlign, CurrentTextAngle / 180 * Pi)
                    CurrentTextPosX -= fAlign[0] * 0.5

                    ' alineo Y
                    'CurrentTextPosY += fAlign[1] * 0.5

                    ' pero , y si esta rotado el texto???

                    ' Else
                    '   Stop

                End If

            Case "\\H"            ' cambia la altura del texto

                p2 = InStr(s2, ";", p1)
                s3 = Mid(s2, 3, p2 - 3)
                If InStr(s3, "x") > 0 Then  ' cambia x veces la altura actual
                    CurrentTextHeigth *= CFloat(Left(s3, -1))
                Else
                    CurrentTextHeigth = CFloat(s3)
                Endif
                s2 = Mid(s2, p2 + 1)

                If Len(s2) > 0 Then ProcessPart(s2)

            Case Like "\\*"            ' codigo no imprementado, lo paso de largo;
                p2 = InStr(s2, ";", p1)
                If p2 > 0 Then
                    s2 = Mid(s2, p2 + 1)
                Else
                    s2 = Mid(s2, 3)
                End If
            Case Else ' es texto

                ' es un texto, pero puede terminar en un scape
                p2 = InStr(s2, "\\")
                If p2 = 0 Then p2 = 1000
                p3 = InStr(s2, "}")
                If p3 = 0 Then p3 = 1000
                p4 = InStr(s2, "{")
                If p4 = 0 Then p4 = 1000

                If p3 < p2 Then p2 = p3
                If p5 < p2 Then p2 = p5

                '
                ' If p2 = 1 Then ' es un escape desconocido
                '     p2 = InStr(s2, ";")
                '     If p2 = 0 Then
                '         s2 = Mid(s2, 3)
                '     Else
                '         s2 = Mid(s2, p2 + 1)
                '     End If
                '     If Len(s2) > 0 Then ProcessPart(s2)
                '
                ' Else

                s2 = Utils.ProcessTabs(s2)

                If CurrentTextFont <> "" Then glPlus.SelectFont(CurrentTextFont)
                stxWords = Split(s2, " ")
                For iSpace = stxWords.Max To 0 Step -1
                    If stxWords[iSpace] = "" Then stxWords.Remove(iSpace)
                Next

                For iSpace = 0 To stxWords.Max - 1
                    If stxWords[iSpace] <> "" Then stxWords[iSpace] &= " "
                Next
                ' If stxWords[stxWords.max] = "" Then stxWords.Remove(stxWords.Max)

                If (CurrentTextBoxWidth > 0) And (stxWords.Count > 1) Then ' debo trimar

                    'If Left(s2, 2) = "24" Then Stop
                    iSpace = 0
                    ' nuevo:  tengo que ver si no excede el ancho del rectangulo

                    'If InStr(s2, "Casilla") > 0 Then Stop
                    Do
                        s4 &= stxWords[iSpace]
                        fRect = glPlus.TextExtends(s4, CurrentTextHeigth)

                        If fRect[0] < CurrentTextBoxWidth Then ' debo trimar
                            s5 = s4
                            Inc iSpace
                        Else
                            Break
                        End If
                    Loop Until iSpace = stxWords.Count
                    s4 = ""
                    For i4 = iSpace To stxWords.max
                        s4 &= stxWords[i4]

                    Next

                Else
                    s5 = s2
                    fRect = glPlus.TextExtends(s5, CurrentTextHeigth)
                    s4 = ""
                End If

                If s5 = "" Then
                    s5 = s4
                    s4 = ""
                Endif

                puntos.Rotate(fRect, CurrentTextAngle)
                If Me.MyPolygon[0] > (CurrentTextPosX) Then Me.MyPolygon[0] = (CurrentTextPosX)
                If Me.MyPolygon[1] > (CurrentTextPosY) Then Me.MyPolygon[1] = (CurrentTextPosY)
                If Me.MyPolygon[2] < (CurrentTextPosX + fRect[0]) Then Me.MyPolygon[2] = (CurrentTextPosX + fRect[0])
                If Me.MyPolygon[3] < (CurrentTextPosY + fRect[1]) Then Me.MyPolygon[3] = (CurrentTextPosY + fRect[1])
                If NewLine Then
                    If CurrentTextAlignment = 1 Then CurrentTextPosX -= fRect[0] / 2
                    If CurrentTextAlignment = 2 Then CurrentTextPosX -= fRect[0]
                End If
                ' FIXME: cuando el texto esta formado por varias palabras que se procesan en ProcessPat anidadas, el
                ' alinemaiento produce problemas porque se refiere a todo el texto y no a la parte

                glPlus.DrawText(s5, CurrentTextPosX, CurrentTextPosY, CurrentTextAngle, CurrentTextHeigth, CurrentTextColor)
                NewLine = False
                CurrentTextPosX += fRect[0]

                If Printing Then
                    sPrint = s2
                    GoSub PrintText2
                End If

                'Endif

        End Select
        ' primero separo en diferentes partes

        ' sigo procesando hasta que no haya mas caracteres en la linea
    Loop Until s2 = ""

    Return

PrintText2:

    paintPlus.DrawText(sPrint, CurrentTextPosX, CurrentTextPosY, CurrentTextAngle, CurrentTextHeigth, CurrentTextColor)

    Return

End

Public Function ProcessPart(s As String) As String
    ' aca viene lo que esta ente {}, sin esos simbolos

    Dim s2, sFont, s3, s4, sTab, sPrint As String
    Dim p1, p2, p3, p4 As Integer
    Dim fAlign, fAlignR, fRect As New Float[]

    Dim angulo As Float, hText As New PaintExtents, lText As String
    Dim FontScalePrev As Float
    Dim iSpace As Integer
    Dim s5 As String
    Dim stxWords As String[]
    Dim i4 As Integer

    s2 = s

    s2 = Replace(s2, "%%D", "U+00B0")
    s2 = Replace(s2, "%%P", "U+00B1")
    s2 = Replace(s2, "%%C", "U+2205")

    'If Left$(s2, 1) = "\\" Then
    's2 = Mid(s2, 2)
    Select Case Mid$(s2, 1, 2)

        Case "\\U" ' ej \U+0045

        Case "\\U" ' ej \U+0045

            ' es un caracter utf

        Case "\\f"            ' esta indicado un cambio en la fuente
            '  \fVerdana|b0|i0|cxxx|p34;
            p1 = InStr(s2, "|")
            CurrentTextFont = Mid$(s2, 2, p1 - 2)
            p1 = InStr(s2, "|b")
            If p1 > 0 Then
                CurrentTextBold = Mid$(s2, p1 + 2, 1) = "1"
            End If
            p1 = InStr(s2, "|i")
            If p1 > 0 Then

                CurrentTextItalic = Mid$(s2, p1 + 2, 1) = "1"
            End If

            p1 = InStr(s2, "|c")    ' esto para no ser el color
            If p1 > 0 Then

                p2 = InStr(s2, "|", p1 + 1)
                ' Try CurrentTextColor = Mid$(s2, p1 + 2, p2 - p1 - 1) = "1"
            End If
            p1 = p2 + 1

            p1 = InStr(s2, "|p")
            p2 = InStr(s2, ";", p1)
            If p1 > 0 Then

                'CurrentTextHeigth = CFloat(Mid$(s2, p1 + 2, p2 - p1 - 2)) / 100
            End If

            s2 = Mid(s2, p2 + 1)

            If Len(s2) > 0 Then ProcessPart(s2)
        Case "\\C"            ' cambio de color

            p2 = InStr(s2, ";", p1)

            CurrentTextColor = gcd.GetGBColor(CInt(Mid(s2, 3, p2 - 3)))

            s2 = Mid(s2, p2 + 1)

            If Len(s2) > 0 Then ProcessPart(s2)

        Case "\\P"            ' New line
            CurrentTextPosY -= glPlus.TextExtends("XXX", CurrentTextHeigth)[1] * 1.2
            CurrentTextPosX = OriginalTextPosX
            NewLine = True
            s2 = Mid(s2, 3)
            If Len(s2) > 0 Then ProcessPart(s2)

        Case "\\p"            ' no se que significa esto, suele venir \p12.55;
            p2 = InStr(s2, ";", p1)
            s2 = Mid(s2, p2 + 1)
            If Len(s2) > 0 Then ProcessPart(s2)

            ' Case "\\t", "^I"            ' tab avanzo 4-texto anterior
            '   ' TODO: verificar sin Tab=4 espacios
            '   If LastTextLengh > 4 Then sTab = "    " Else sTab = Space(4 - LastTextLengh)
            '   s2 = stab & Mid(s2, 3)
            '   If Len(s2) > 0 Then ProcessPart(s2)
            '   LastTextLengh = 0

        Case "\\T" 'Adjusts the space between characters. Valid values range from a minimum of .75 to 4 times the original spacing between characters.

        Case "\\Q"  '\Q angle; changes obliquing angle

        Case "\\O"  '\O changes to overline

        Case "\\L"  '\O changes to underline

        Case "\\W"            ' \W value; changes width factor To produce wide text
            p2 = InStr(s2, ";", p1)
            CurrentTextPosX += CFloat(Mid(s2, 3, p2 - 3))
            s2 = Mid(s2, p2 + 1)
            If Len(s2) > 0 Then ProcessPart(s2)

        Case "\\A"            ' Sets the alignment value; valid values: 0, 1, 2(bottom, center, top)

            If Mid(s2, 3, 1) = "1" Then ' es mid

                ' extraigo el texto puro para poder calcular bien el centrado
                p2 = InStr(s2, ";", p1)
                s2 = Mid(s2, p2 + 1)

                fAlign = glPlus.TextExtends(s2, CurrentTextHeigth)
                'fAlign[0] *= -1
                'fAlign[1] *= 1

                puntos.Rotate(fAlign, CurrentTextAngle / 180 * Pi)
                CurrentTextPosX -= fAlign[0] * 0.5

                ' alineo Y
                'CurrentTextPosY += fAlign[1] * 0.5

                ' pero , y si esta rotado el texto???

                ' Else
                '   Stop

            End If

            If Len(s2) > 0 Then ProcessPart(s2)
        Case "\\H"            ' cambia la altura del texto

            p2 = InStr(s2, ";", p1)
            s3 = Mid(s2, 3, p2 - 3)
            If InStr(s3, "x") > 0 Then  ' cambia x veces la altura actual
                CurrentTextHeigth *= CFloat(Left(s3, -1))
            Else
                CurrentTextHeigth = CFloat(s3)
            Endif
            s2 = Mid(s2, p2 + 1)

            If Len(s2) > 0 Then ProcessPart(s2)

        Case Like "\\*"            ' codigo no imprementado, lo paso de largo;
            p2 = InStr(s2, ";", p1)
            s2 = Mid(s2, p2 + 1)
            If Len(s2) > 0 Then ProcessPart(s2)
        Case Else ' es texto

            ' es un texto, pero puede terminar en un scape
            p2 = InStr(s2, "\\")
            ' p3 = InStr(s2, "^I")
            '
            ' If (p3 > 0) And (p3 < p2) Then p2 = p3
            '
            If p2 = 1 Then ' es un escape desconocido
                p2 = InStr(s2, ";")
                If p2 = 0 Then
                    s2 = Mid(s2, 3)
                Else
                    s2 = Mid(s2, p2 + 1)
                End If
                If Len(s2) > 0 Then ProcessPart(s2)

                ' Else If p2 > 0 Then
                '
                '     s4 = Utils.ProcessTabs(Mid(s2, 1, p2 - 1))
                '     If CurrentTextFont <> "" Then glPlus.SelectFont(CurrentTextFont)
                '
                '     stxWords = Split(s4, " ")
                '     For iSpace = 0 To stxWords.Max - 1
                '         stxWords[iSpace] &= " "
                '     Next
                '     If stxWords[stxWords.max] = "" Then stxWords.Remove(stxWords.Max)
                '     If (CurrentTextBoxWidth > 0) And (stxWords.Count > 1) Then ' debo trimar
                '         iSpace = 0
                '         ' nuevo:  tengo que ver si no excede el ancho del rectangulo
                '
                '         Do
                '             s5 &= stxWords[iSpace]
                '             fRect = glPlus.TextExtends(s5, CurrentTextHeigth)
                '
                '             If fRect[0] < CurrentTextBoxWidth Then ' debo trimar
                '                 Inc iSpace
                '             Else
                '                 Break
                '             End If
                '         Loop Until iSpace = stxWords.Count
                '         s4 = Mid(s4, Len(s5))
                '     Else
                '         s5 = s4
                '         fRect = glPlus.TextExtends(s5, CurrentTextHeigth)
                '         s4 = ""
                '     End If
                '     puntos.Rotate(fRect, CurrentTextAngle)
                '     If Me.MyPolygon[0] > (CurrentTextPosX) Then Me.MyPolygon[0] = (CurrentTextPosX)
                '     If Me.MyPolygon[1] > (CurrentTextPosY) Then Me.MyPolygon[1] = (CurrentTextPosY)
                '     If Me.MyPolygon[2] < (CurrentTextPosX + fRect[0]) Then Me.MyPolygon[2] = (CurrentTextPosX + fRect[0])
                '     If Me.MyPolygon[3] < (CurrentTextPosY + fRect[1]) Then Me.MyPolygon[3] = (CurrentTextPosY + fRect[1])
                '     ' el problema que tengo es que aca veces entro a esta Sub varias veces en la misma linea, y lo que sigue fuciona mal porque encima los textos
                '     If NewLine Then
                '
                '         If CurrentTextAlignment = 1 Then CurrentTextPosX -= fRect[0] / 2
                '         If CurrentTextAlignment = 2 Then CurrentTextPosX -= fRect[0]
                '     End If
                '     glPlus.DrawText(s5, CurrentTextPosX, CurrentTextPosY, CurrentTextangle, CurrentTextHeigth, CurrentTextColor)
                '     NewLine = False
                '     CurrentTextPosX += fRect[0]
                '     If Printing Then
                '         sPrint = s5
                '         GoSub PrintText2
                '     End If
                '     s2 = s4 & Mid(s2, p2)
                '
                '     ProcessPart(s2)
            Else

                s2 = Utils.ProcessTabs(s2)

                If CurrentTextFont <> "" Then glPlus.SelectFont(CurrentTextFont)
                stxWords = Split(s2, " ")
                For iSpace = stxWords.Max To 0 Step -1
                    If stxWords[iSpace] = "" Then stxWords.Remove(iSpace)
                Next

                For iSpace = 0 To stxWords.Max - 1
                    If stxWords[iSpace] <> "" Then stxWords[iSpace] &= " "
                Next
                ' If stxWords[stxWords.max] = "" Then stxWords.Remove(stxWords.Max)

                If (CurrentTextBoxWidth > 0) And (stxWords.Count > 1) Then ' debo trimar

                    'If Left(s2, 2) = "24" Then Stop
                    iSpace = 0
                    ' nuevo:  tengo que ver si no excede el ancho del rectangulo

                    'If InStr(s2, "Casilla") > 0 Then Stop
                    Do
                        s4 &= stxWords[iSpace]
                        fRect = glPlus.TextExtends(s4, CurrentTextHeigth)

                        If fRect[0] < CurrentTextBoxWidth Then ' debo trimar
                            s5 = s4
                            Inc iSpace
                        Else
                            Break
                        End If
                    Loop Until iSpace = stxWords.Count
                    s4 = ""
                    For i4 = iSpace To stxWords.max
                        s4 &= stxWords[i4]

                    Next

                Else
                    s5 = s2
                    fRect = glPlus.TextExtends(s5, CurrentTextHeigth)
                    s4 = ""
                End If

                If s5 = "" Then
                    s5 = s4
                    s4 = ""
                Endif

                puntos.Rotate(fRect, CurrentTextAngle)
                If Me.MyPolygon[0] > (CurrentTextPosX) Then Me.MyPolygon[0] = (CurrentTextPosX)
                If Me.MyPolygon[1] > (CurrentTextPosY) Then Me.MyPolygon[1] = (CurrentTextPosY)
                If Me.MyPolygon[2] < (CurrentTextPosX + fRect[0]) Then Me.MyPolygon[2] = (CurrentTextPosX + fRect[0])
                If Me.MyPolygon[3] < (CurrentTextPosY + fRect[1]) Then Me.MyPolygon[3] = (CurrentTextPosY + fRect[1])
                If NewLine Then
                    If CurrentTextAlignment = 1 Then CurrentTextPosX -= fRect[0] / 2
                    If CurrentTextAlignment = 2 Then CurrentTextPosX -= fRect[0]
                End If
                ' FIXME: cuando el texto esta formado por varias palabras que se procesan en ProcessPat anidadas, el
                ' alinemaiento produce problemas porque se refiere a todo el texto y no a la parte

                glPlus.DrawText(s5, CurrentTextPosX, CurrentTextPosY, CurrentTextAngle, CurrentTextHeigth, CurrentTextColor)
                NewLine = False
                CurrentTextPosX += fRect[0]
                If Len(s4) > 0 Then
                    CurrentTextPosY -= fRect[1]
                    ProcessPart(s4)
                End If

                If Printing Then
                    sPrint = s2
                    GoSub PrintText2
                End If

            Endif

    End Select
    ' primero separo en diferentes partes

    Return

PrintText:

    htext = paint.TextExtents(sPrint)
    paint.save
    paint.Translate(CurrentTextPosX, CurrentTextPosY)
    paint.Rotate(-CurrentTextangle * Pi / 180)
    paint.Scale(1, -1)
    Paint.Font.Size = CurrentTextHeigth / gcd.PrintingScale * 2
    paint.DrawText(sPrint)
    paint.Stroke
    paint.Restore

    Return

PrintText2:

    paintPlus.DrawText(sPrint, CurrentTextPosX, CurrentTextPosY, CurrentTextAngle, CurrentTextHeigth, CurrentTextColor)

    Return

End

'
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Ing. Marcos Kupervaser }
'  {\fVerdana|b0|i0|c0|p34;Domicilio:}
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Domicilio: C. Pellegrini 627}
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Domicilio:      Perú 1015}
'  {\fVerdana|b0|i0|c0|p34;Ing. Marcos Kupervaser\P }
'  {\fVerdana|b0|i0|c0|p34; Construquen SRL}
'  {\fVerdana|b0|i0|c0|p34;Ing. Martín Cristia}
'  {\fVerdana|b0|i0|c0|p34;MMN°:3549  MCPN°:2207 }
'  {\fVerdana|b0|i0|c0|p34;MMN°:3549  MCPN°:2207 }
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Domicilio:}
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Domicilio:}
'  {\fVerdana|b0|i0|c0|p34;Expte N°: 77}
'  {\fVerdana|b0|i0|c0|p34;\W2.0681; \W1;Letra: "T"}
'  {\fVerdana|b0|i0|c0|p34;Año: 2014}
'  {\fVerdana|b0|i0|c0|p34;Dígito}
'  {\fVerdana|b0|i0|c0|p34;Folio}
'  \pt14.35; {\fVerdana|b0|i0|c0|p34;Destino: \fVerdana|b1|i0|c0|p34;Viviendas Colectivas, Oficinas y Local Comercial}
'  {\fVerdana|b0|i0|c0|p34;Propietario: \fVerdana|b1|i0|c0|p34; Valeria Sara Titioski, Pablo Andrés Titiosky y Rolando Simón Titioski.}
'  \pt2.45; {\fVerdana|b0|i0|c0|p34;Calle: \fVerdana|b1|i0|c0|p34;Paraguay 940}
'  {\fVerdana|b0|i0|c0|p34;Entre: \fVerdana|b1|i0|c0|p34;Junin e H. Irigoyen}
'  {\fVerdana|b0|i0|c0|p34;Barrio: \fVerdana|b1|i0|c0|p34;Libertad}
'  {\fVerdana|b0|i0|c0|p34;Escala: \fVerdana|b1|i0|c0|p34;1:100}
'  {\fVerdana|b0|i0|c0|p34;\LPROPIETARIO\l:  }

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    Dim i As Integer, sText As String

    ' stxExport.insert(["MTEXT", dxf.codEntity])
    ' Los datos comunes a todas las entidades son guardados por la rutina que llama a esta
    stxExport.insert(["AcDbMText", "100"])

    stxExport.insert([CStr(e.p[0]), dxf.codX0])                    ' insertion point
    stxExport.insert([CStr(e.p[1]), dxf.codY0])
    stxExport.insert(["0", dxf.codZ0])

    stxExport.insert([CStr(e.fParam[Me.ipaTextHeight]), "40"])       ' heigth
    stxExport.insert([CStr(e.fParam[Me.ipaRectangleWidth]), "41"])   ' Rectang width
    stxExport.insert([e.fParam[Me.ipaAttchmPoint], "71"])            ' attchm point
    stxExport.insert([e.fParam[Me.ipaDrawingDirec], "72"])           ' drawing direction

    If e.StringData[0].Len > 250 Then
        stxExport.insert([Left(e.stringdata[Me.sdaText], 250), "1"])                ' Texti = 250
        i = 251         ' next offset
        Do

            If e.StringData[0].Len - i > 250 Then
                sText = Mid(e.StringData[0], i, 250)
                stxExport.insert([sText, "3"])                ' Texti += 250
                i += 250
            Else
                sText = Mid(e.StringData[0], i)
                stxExport.insert([sText, "3"])                ' Texti += 250
                Break

            End If

        Loop
    Else
        stxExport.insert([e.stringdata[Me.sdaText], "1"])                ' Text
    Endif

    stxExport.insert([e.StringData[Me.sdaStyle], "7"])               ' text style

    stxExport.insert(["0", "210"])                                   ' extrusion direction
    stxExport.insert(["0", "220"])
    stxExport.insert(["1", "230"])

    stxExport.insert([CStr(e.fParam[Me.ipaTextAngle]), "50"])        ' rotation in radians

    stxExport.insert([CStr(e.fParam[Me.ipaBackFillType]), "90"])     ' Background fill style

    stxExport.insert([CStr(e.fParam[Me.ipaBackColor]), "63"])         ' Background color

    stxExport.insert(["0", "75"]) ' Column type
    stxExport.insert(["0", "76"]) ' Column count
    stxExport.insert(["0", "78"]) ' Column Flow Reversed
    stxExport.insert(["0", "79"]) ' Column Autoheight
    stxExport.insert(["0", "48"]) ' Column width
    stxExport.insert(["0", "49"]) ' Column gutter
    stxExport.insert(["0", "50"]) ' Column heights

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer
    Dim TextHeigthSet As Boolean = False
    Dim TextAngleSet As Boolean = False
    Dim ax, ay, az As Single ' angulo del texto

    For i = 0 To sClaves.Max

        If sClaves[i] = "10" Then e.p[0] = (CFloat(sValues[i]))                                       ' X1
        If sClaves[i] = "20" Then e.P[1] = (CFloat(sValues[i]))                                       ' Y1
        If sClaves[i] = "40" And Not TextHeigthSet Then
            e.fParam[Me.ipaTextHeight] = CFloat(sValues[i])                                         ' Altura
            TextHeigthSet = True
        End If
        '        If sClaves[i] = "1" And sValues[i] Like "roman*" Then Stop
        If sClaves[i] = "1" Or sClaves[i] = "3" Then e.StringData[Me.sdaText] &= sValues[i]         ' Texto

        If sClaves[i] = "50" And Not TextAngleSet Then
            e.fParam[Me.ipaTextAngle] = CFloat(sValues[i])                                          ' rotacion
            TextAngleSet = True
        End If
        If sClaves[i] = "7" Then e.StringData[Me.sdaStyle] = sValues[i]                             ' texy
        If sClaves[i] = "41" Then e.fParam[Me.ipaRectangleWidth] = CFloat(sValues[i])
        If sClaves[i] = "41" Then e.fParam[Me.ipaRectangleWidth] = CFloat(sValues[i])
        If sClaves[i] = "71" Then e.fParam[Me.ipaAttchmPoint] = CInt(sValues[i])
        If sClaves[i] = "72" Then e.fParam[Me.ipaDrawingDirec] = CFloat(sValues[i])
        If sClaves[i] = "90" Then e.fParam[Me.ipaBackFillType] = CFloat(sValues[i])
        If sClaves[i] = "63" Then e.fParam[Me.ipaBackColor] = CFloat(sValues[i])

        If sClaves[i] = "11" Then ax = CFloat(sValues[i])
        If sClaves[i] = "21" Then ay = CFloat(sValues[i])
        If sClaves[i] = "31" Then az = CFloat(sValues[i])

    Next

    If (ax <> 0) Or (ay <> 0) Or (az <> 0) Then

        e.fParam[Me.ipaTextAngle] = Ang(ax, ay)

    Endif

    If e.StringData[Me.sdaStyle] = "" Then e.StringData[Me.sdaStyle] = "STANDARD"

    Return True

End
