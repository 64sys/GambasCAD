' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static

Public Const Gender As String = "Dimension_Diameter"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Insert a linear acotation")
Public ParamType As String = "PP"                             ' that is Point, Point, Float; could be Color Text, etc
Public ParamHelper As String = "Start point;End point"
Public Const USEWITH As String = "EntityBuilder"
Public Const OrthogonalIgnored As Boolean = False
Public Const OrthogonalForced As Boolean = False
Public Const ParamDefault As String = " "
Public Const StretchAble As Boolean = True           ' Si lo puedo deformar

Public StepsDone As Integer                 ' esto lo cambia cls ElementBuilder durante la construccion

Public TotalDimensions As Integer           ' the total dimensions present in this drawing

' dimstyle: Todas las variables numericas Float estaran multiplicadas por DimScale
Public DimType As Integer = 0            ' = fParam[0] and &X1111
Public DimAtatchPoint As Integer = 2     ' = fParam[1]
Public DimScale As Integer = 1           ' = fParam[2]
Public DimFormat As String = "0.00"      '
Public DimFormatAng As String = "0.0"    '
Public DimArrowSize As Float = 0.3       ' el largo de la flecha
Public DimArrowWidth As Float = 0.1      ' ancho de la flecha
Public DimTickSize As Float = 0.3        ' el tama√±o de la diagonal
Public DimArrowOrThick As Boolean = True ' flecha (True) o diagonal (False)
Public DimTextHeight As Float = 0.3      '
Public DimSeparation As Float = 0.5      ' la separacion entre el punto que define la cota y el inicio de la linea q marca inicio y fin
Public DimExtension As Float = 0.5       ' la continuacion de esas lineas

Public extension As Float
Public iBloque As Integer

' DXF Read/Export

Public Const DXF_Reading As Boolean = True
Public Const DXF_Export As Boolean = False

' fParam helpers
Public Const TotalParams As Integer = 8
Public Const ipaEscX As Integer = 0
Public Const ipaEscY As Integer = 1
Public Const ipaEscZ As Integer = 2
Public Const ipaRotacion As Integer = 3
Public Const ipaVertJustif As Integer = 4
Public Const ipaRelativeFactor As Integer = 5
Public Const ipaHorizontal As Integer = 6
Public Const ipaExtension As Integer = 7

' stringdata helpers
Public Const sdaTotalParams As Integer = 2
Public Const sdaText As Integer = 0
Public Const sdaStyle As Integer = 1

Private pointDefPoint1 As New Punto2d
Private pointDefPoint2 As New Punto2d
Private pointTextMidPoint As New Punto2d
Private pointBaselinePoint As New Punto2d
Private pointDefPoint0 As New Punto2d

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer
    Dim AfterSubclassmarker As Boolean
    ' revisamos lo que viene del importador comun
    pointDefPoint0.x = e.P[0]
    pointDefPoint0.y = e.P[1]

    pointTextMidPoint.x = e.P[2]
    pointTextMidPoint.y = e.P[3]

    For i = 0 To sClaves.Max
        If sClaves[i] = "100" And sValues[i] = "AcDbDiametricDimension" Then AfterSubclassmarker = True
        If AfterSubclassmarker Then ' lo siguientes codigos

            If sClaves[i] = "15" Then pointDefPoint1.x = CFloat(sValues[i])
            If sClaves[i] = "25" Then pointDefPoint1.y = CFloat(sValues[i])

        End If

    Next

    ' ahora recosntruyo el bloque segun mis propios metodos
    e.P[0] = pointDefPoint0.x
    e.P[1] = pointDefPoint0.y

    e.P[2] = pointDefPoint1.x
    e.P[3] = pointDefPoint1.y

    e.P.Add(pointTextMidPoint.x)
    e.P.Add(pointTextMidPoint.y)

    Me.DimArrowSize = e.pStyle.fArrowSize_41
    Me.DimArrowWidth = Me.DimArrowSize / 3
    Me.DimTextHeight = e.pStyle.fTxtHeight_140

    e.pBlock = Me.ReBuildBlock(e)

    Return True

    ' catch

    Return False

End

Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    ' la linea solo recibe puntos

    If vParam[0] <> "point" Then Return False

    If Me.StepsDone = 0 Then
        Me.DimType = gcd.dimAligned
        clsEntities.setEntity(eBuild)

        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]
        eBuild.P[2] = eBuild.P[0]
        eBuild.P[3] = eBuild.P[1]
        If definitive Then Return True
    Else If Me.StepsDone = 1 Then
        eBuild.DrawAble = True
        eBuild.Finished = True
        Try eBuild.P[2] = vParam[1]
        Try eBuild.P[3] = vParam[2]
        eBuild.pBlock = ReBuildBlock(eBuild)
        If definitive Then Return True

    Endif

End

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

    cadInsert.Translate(e, dx, dy, OnlySelected)

End

Public Sub Rotate(e As Entity, radians As Float)

    cadInsert.Rotate(e, radians)

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

    cadInsert.Scale(e, sx, sy)

End

Public Sub Draw(Optional e As Entity)

    cadInsert.Draw(e)

End

'' A fat version of the entity
Public Sub DrawRemark(oE As Entity)

    cadInsert.DrawRemark(oe)

End

'' A fat version of the entity
Public Sub DrawSelected(oE As Entity)

    cadInsert.DrawSelected(oe)

End

Public Sub ReBuildBlock(ELEM As Entity) As Block

    Dim d As Float, flxTextExt As Float[]
    Dim fRotXY As Float[]

    Dim newBlock As New Block
    Dim f1, f2 As New Float[]

    newBlock.entities = New Entity[]

    ' para definir este bloque necesito 6 entidades
    Dim eLineaPpal As Entity
    Dim eOblique1 As Entity       ' tambien pueden ser flechas Solid
    Dim eOblique2 As Entity
    Dim eExtension1 As Entity
    Dim eExtension2 As Entity
    Dim eDot1 As Entity
    Dim eDot2 As Entity
    Dim eText As Entity
    Dim ePoint2 As Entity

    ' linea principal
    clsEntities.AddLine(newBlock.entities, [0, 0, 0, 0], elem.colour, elem.LineWidth, elem.LineType, elem.pLayer)
    eLineaPpal = newBlock.entities.Last

    ' flechas

    f1.Insert([0, 0, Me.DimArrowSize, Me.DimArrowWidth, Me.DimArrowSize, -Me.DimArrowWidth, 0, 0])
    f2.Insert([0, 0, -Me.DimArrowSize, Me.DimArrowWidth, -Me.DimArrowSize, -Me.DimArrowWidth, 0, 0])

    clsEntities.Addsolid(newBlock.entities, f1, elem.colour, elem.LineWidth, elem.LineType, elem.pLayer)
    eOblique1 = newBlock.entities.Last

    clsEntities.Addsolid(newBlock.entities, f2, elem.colour, elem.LineWidth, elem.LineType, elem.pLayer)
    eOblique2 = newBlock.entities.Last

    ' texto
    clsEntities.AddMText(newBlock.entities, [0, 0, 0, 0], 0, Me.DimTextHeight, "0.00", elem.colour, elem.LineWidth, elem.LineType, elem.pLayer)
    eText = newBlock.entities.Last

    ' -> el bloque

    elem.fParam[cadInsert.ipaEscX] = 1      ' ScaleX del inserto
    elem.fParam[cadInsert.ipaEscY] = 1      ' ScaleY del inserto
    elem.fParam[cadInsert.ipaEscZ] = 1      ' ScaleY del inserto

    '  If stage = 0 Then     ' marco el primer punto

    '    Else If stage = 1 Then ' marco el segundo punto, lo que modifica los parametros del bloque
    elem.Visible = True

    ' el largo de la linea principal viene dado por la distancia entre ambos puntos
    d = puntos.distancia(elem.P[0], elem.P[1], elem.P[2], elem.P[3])

    ' con este click calculo el angulo
    elem.fParam[cadInsert.ipaRotacion] = Ang(elem.p[2] - elem.P[0], elem.p[3] - elem.P[1]) * 180 / Pi

    ' la primer entidad del bloque es la linea principal
    eLineaPpal.P[0] = 0           ' X0
    eLineaPpal.P[1] = 0           ' Y0

    eLineaPpal.P[2] = d           ' X1
    eLineaPpal.P[3] = 0           ' Y1

    ' el largo de la linea principal viene dado por la distancia entre ambos puntos
    d = puntos.distancia(elem.P[0], elem.P[1], elem.P[2], elem.P[3])

    ' con este click calculo el angulo
    elem.fParam[cadInsert.ipaRotacion] = Ang(elem.p[2] - elem.P[0], elem.p[3] - elem.P[1]) * 180 / Pi

    ' la primer entidad del bloque es la linea principal
    eLineaPpal.P[0] = 0           ' X0
    eLineaPpal.P[1] = 0           ' Y0

    eLineaPpal.P[2] = d           ' X1
    eLineaPpal.P[3] = 0           ' Y1

    ' el texto
    eText.StringData[cadMText.sdaText] = "\\A1;" & "D " & Format(d, Me.DimFormat)

    flxTextExt = glPlus.MTextExtends(eText.StringData[0], 0, 0, eText.fParam[1])

    ' la cuarta y quinta son las flechas , tengo que verificar si entran, o el texto
    If flxTextExt[2] * 1.1 > d Then                      ' no entra

        eOblique2.P[0] = 0           ' X0
        eOblique2.P[2] = -Me.DimArrowSize
        eOblique2.P[4] = -Me.DimArrowSize
        eOblique2.P[6] = 0           ' X0

        ' el texto va afuera
        eText.P[0] = d + Me.DimArrowSize / 2
        eText.P[1] = Me.DimArrowWidth

    Else                                                                ' entra

        eOblique2.P[0] = d           ' X0
        eOblique2.P[2] = -Me.DimArrowSize + d           ' X0
        eOblique2.P[4] = -Me.DimArrowSize + d           ' X0
        eOblique2.P[6] = d           ' X0

        ' el texto va adentro
        eText.P[0] = d / 2 - flxTextExt[2] / 2
        eText.P[1] = Me.DimArrowWidth

    End If

    ' linea principal
    eLineaPpal.P[1] = extension           ' Y0
    eLineaPpal.P[3] = extension           ' Y1

    ' texto
    eText.P[1] = Me.DimArrowWidth + extension

    eOblique2.P[1] = extension           ' X0
    eOblique2.P[3] = extension + Me.DimArrowWidth
    eOblique2.P[5] = extension - Me.DimArrowWidth
    eOblique2.P[7] = extension           ' X0

    ' End If
    Return newBlock

End

Public Function Draw2(oE As Entity)

    cadInsert.Draw2(oe)

End

Public Sub CreatePolygon(oE As Entity)

    cadInsert.CreatePolygon(oe)

End

Public Function BuildPOI(oE As Entity, Optional arrIndex As Integer = -1) As Integer

    cadInsert.BuildPOI(oe, arrIndex)

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(oE As Entity) As Boolean

    ' primero agregamos la entidad al array
    '  BuildPOI(oe)

    ' busco el tipo de linea, si hace falta

    oE.psel.resize(oE.p.count / 2)

    oE.DrawAble = True
    oE.Selected = False
    oE.Finished = True
    'cadInsert.Finish(oe)

End
