' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
' Create Private
Create Static
' Fast
'Inherits CadEntityBuilder

Public Const Gender As String = ""
Public Const CmdLineHelper As String = ("EntityBase")
Public Const ParamType As String = ""                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = ("<no action>")      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = ""
Public Const ContextMenu As String = ("Undo;UNDO;;;Cancel;CANCEL;;") ' el menu para el boton derecho, los comendos en mayusculas NO se traducen

Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const GAMBASCADENTITY As String = "EntityBase"
Public Const USEWITH As String = "ENTITYBUILDER"
Public Const DrawingOrder As Integer = 0        ' 1 = draws first
Public Const StretchAble As Boolean = True           ' Si lo puedo deformar

Public Const TotalPoints As Integer = 1
Public Const TotalParams As Integer = 0
Public Const iTotalParams As Integer = 0
Public Const sdaTotalParams As Integer = 0

Public LastMode As Integer = 0

Public Const DXF_Reading As Boolean = True
Public Const DXF_Export As Boolean = True
Public Const JSON_Export As Boolean = True

'' Creates a new LWpolyline entity and prepares arrays
Public Function NewEntity(Optional fPoints As Float[], bNewHandle As Boolean = False) As Entity

    Dim e As New Entity

    e.Gender = Me.Gender
    If bNewHandle Then e.Handle = gcd.NewHandle()
    e.iParam.Resize(Me.iTotalParams)
    e.fParam.Resize(Me.TotalParams)
    e.sParam.Resize(Me.sdaTotalParams)
    If fPoints Then e.P.Insert(fPoints.Copy()) Else e.P.Resize(Me.TotalPoints * 2)

    ' this may fails on some scopes, but we should Try
    Try e.pLayer = gcd.Drawing.CurrLayer
    Try e.colour = gcd.Drawing.CurrColor
    Try e.LineType = gcd.Drawing.CurrLineType
    Try e.LineWidth = gcd.Drawing.CurrLineWt
    Try e.pStyle = gcd.Drawing.CurrTextStyle

    Return e

End

Public Function CopyEntity(enty As Entity, Optional NewHandle As Boolean = False, DuplicateBlocks As Boolean = False) As Entity



End

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

End

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

    Dim i As Integer

    If OnlySelected Then

        For i = 0 To e.Psel.Max
            If e.Psel[i] Then

                e.P[i * 2] += dx
                e.P[i * 2 + 1] += dy

            Endif
        Next

    Else

        puntos.Translate(e.p, dx, dy)
    Endif

End

Public Sub Rotate(e As Entity, radians As Float)

    puntos.Rotate(e.p, radians)

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

    Dim i As Integer

    For i = 0 To e.p.max Step 2

        e.P[i] = e.P[i] * sX
        e.P[i + 1] = e.P[i + 1] * sY

    Next

End

Public Sub Draw(oE As Entity)

End

Public Sub DrawSelected(oE As Entity)

    ' A basic selected entity drawn from its polyline
    If oe.PolyLine.Count > 0 Then

        GLplus.PolyLines(oE.PolyLine, config.ColorForSelected, oE.LineWidth)
    Endif

End

'' A fat version of the line
Public Sub DrawRemark(oE As Entity)


    GLplus.Lines(oE.PolyLine, gcd.GetGBColor(oE.Colour, oe.pLayer), oE.LineWidth + 1, oe.LineType.TrameLength)

End

Public Function Draw2(oE As Entity)

    paintPlus.Lines(oE.PolyLine)

End

'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity) As Integer

    Dim i As Integer

    oe.PoiPoints.Clear
    oe.PoiType.Clear

    If oe.P.Count = 0 Then Return 0

    oe.poiPoints.insert([oE.P[0], oE.P[1]])
    oe.poiType.Add(gcd.poiEndPoint)

    For i = 0 To oE.P.count - 4 Step 2

        oe.poiPoints.insert([(oE.P[i + 0] + oE.P[i + 2]) / 2, (oE.P[i + 1] + oE.P[i + 3]) / 2])   ' mid
        oe.poiType.Add(gcd.poiMidPoint)
        'oe.poiEntities.Add(arrIndex)

        oe.poiPoints.insert([oE.P[i + 2], oE.P[i + 3]])
        oe.poiType.Add(gcd.poiEndPoint)

    Next

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsENTITYBUILDER to delete it
Public Sub Finish(oE As Entity) As Boolean

    ' tareas finales de armado del objeto

    Me.BuildGeometry(oe)

    oE.psel.resize(oE.p.count / 2)

    Try oe.MakePolyLine(oe)

    oE.Selected = False

End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Return False

End

' Importo los datos que puedo procesar de una coleccion y genero un Entity para ser agregado a un array
Public Function ImportJsonCol(c As Collection, e As Entity) As Boolean

    Return False

End

'' Return if that position is over the entity within the tolerance
Public Function OverMe(e As Entity, Xr As Float, Yr As Float, tolerance As Float) As Boolean

    If e.Polygon Then
        If puntos.isInside(e.Polygon, xr, yr) Then Return True
    End If

    Return False

End

'' Builds the geometry of the entity wthout drwing it
Public Function BuildGeometry(E As Entity, Optional density As Float)

End
