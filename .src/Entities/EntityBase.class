' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
' Create Private
Create Static
' Fast
'Inherits CadEntityBuilder

Public Const Gender As String = ""
Public Const CmdLineHelper As String = ("EntityBase")
Public Const ParamType As String = ""                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = ("<no action>")      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = ""
Public Const ContextMenu As String = ("Undo;UNDO;;;Cancel;CANCEL;;") ' el menu para el boton derecho, los comendos en mayusculas NO se traducen

Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const GAMBASCADENTITY As String = "EntityBase"
Public Const USEWITH As String = "ENTITYBUILDER"
Public Const DrawingOrder As Integer = 0        ' 1 = draws first
Public Const StretchAble As Boolean = True           ' Si lo puedo deformar

Public Const TotalPoints As Integer = 1
Public Const TotalParams As Integer = 0
Public Const iTotalParams As Integer = 0
Public Const sdaTotalParams As Integer = 0

Public LastMode As Integer = 0

Public Const DXF_Reading As Boolean = True
Public Const DXF_Export As Boolean = True
Public Const JSON_Export As Boolean = True

Public Prompt As String

'' Creates a new LWpolyline entity and prepares arrays
Public Function NewEntity(Optional fPoints As Float[], bNewid As Boolean = False) As Entity

    Dim e As New Entity

    e.Gender = Me.Gender
    If bNewid Then
        e.id = gcd.Newid()
        'e.idContainer = gcd.Drawing.Sheet.id
        e.Container = gcd.Drawing.Sheet.Block
    End If
    e.iParam.Resize(Me.iTotalParams)
    e.fParam.Resize(Me.TotalParams)
    e.sParam.Resize(Me.sdaTotalParams)
    If fPoints Then e.P.Insert(fPoints.Copy()) Else e.P.Resize(Me.TotalPoints * 2)

    ' this may fails on some scopes, but we should Try
    Try e.pLayer = gcd.Drawing.CurrLayer
    Try e.colour = gcd.Drawing.CurrColor
    Try e.LineType = gcd.Drawing.CurrLineType
    Try e.LineWidth = gcd.Drawing.CurrLineWt
    Try e.pStyle = gcd.Drawing.CurrTextStyle

    Me.Prompt = Me.CmdLineHelper

    Return e

End

Public Function CopyEntity(enty As Entity, Optional Newid As Boolean = False, DuplicateBlocks As Boolean = False) As Entity

End

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

End

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

    Dim i As Integer

    If OnlySelected Then

        For i = 0 To e.Psel.Max
            If e.Psel[i] Then

                e.P[i * 2] += dx
                e.P[i * 2 + 1] += dy

            Endif
        Next

    Else

        puntos.Translate(e.p, dx, dy)
    Endif

    BuildGeometry(e)

End

Public Sub Rotate(e As Entity, radians As Float)

    puntos.Rotate(e.p, radians)

    BuildGeometry(e)

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

    Dim i As Integer

    For i = 0 To e.p.max Step 2

        e.P[i] = e.P[i] * sX
        e.P[i + 1] = e.P[i + 1] * sY

    Next

    BuildGeometry(e)

End

Public Sub Draw(e As Entity)

End

'' Hides the entity
Public Sub DrawShadow(e As Entity)

End

Public Sub DrawSelected(e As Entity)

    ' A basic selected entity drawn from its polyline
    If e.PolyLine.Count > 0 Then

        glx.PolyLines(e.PolyLine, config.ColorForSelected, e.LineWidth)
    Endif

End

'' A fat version of the line
Public Sub DrawRemark(e As Entity)

    glx.DrawLines(e.PolyLine, gcd.GetGBColor(e.Colour, e.pLayer), gcd.GetLineWt(e.LineWIdth, e.pLayer) + 1, e.LineType.TrameLength)

End

Public Function Draw2(e As Entity)

    paintPlus.Lines(e.PolyLine)

End

' '' Creo los puntos de interes
' '' Build point of interest
'
' Public Function BuildPOI(e As Entity) As Integer
'
'     Dim i As Integer
'
'     e.PoiPoints.Clear
'     e.PoiType.Clear
'
'     If e.P.Count = 0 Then Return 0
'
'     e.poiPoints.insert([e.P[0], e.P[1]])
'     e.poiType.Add(gcd.poiEndPoint)
'
'     For i = 0 To e.P.count - 4 Step 2
'
'         e.poiPoints.insert([(e.P[i + 0] + e.P[i + 2]) / 2, (e.P[i + 1] + e.P[i + 3]) / 2])   ' mid
'         e.poiType.Add(gcd.poiMidPoint)
'         'oe.poiEntities.Add(arrIndex)
'
'         e.poiPoints.insert([e.P[i + 2], e.P[i + 3]])
'         e.poiType.Add(gcd.poiEndPoint)
'
'     Next
'
' End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsENTITYBUILDER to delete it
Public Sub Finish(e As Entity) As Boolean

    ' tareas finales de armado del objeto
    'Me.BuildPOI(e)

    Me.BuildGeometry(e)

    e.psel.resize(e.p.count / 2)

End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Return False

End

' Importo los datos que puedo procesar de una coleccion y genero un Entity para ser agregado a un array
Public Function ImportJsonCol(c As Collection, e As Entity) As Boolean

    Return False

End

'' Return if that position is over the entity within the tolerance
Public Function OverMe(e As Entity, Xr As Float, Yr As Float, tolerance As Float) As Boolean

    If e.Polygon Then
        If puntos.isInside(e.Polygon, xr, yr) Then Return True
    End If

    Return False

End

'' Builds the geometry of the entity wthout drwing it
Public Function BuildGeometry(E As Entity, Optional density As Float)

    Me.MakePolyLine(e)

End

'' Builds the geometry of the entity wthout drwing it
Public Function MakePolyLine(E As Entity)

End

'' Crea una nueva entidad a partir de otra. Opcionalmente nueva Handle y un bloque nuevo si es que tiene.
Public Sub ClonEntity(eOrigen As Entity, Optional GetNewid As Boolean = True) As Entity
    ' clona una entidad
    ' copia todos sus elementos
    ' llama a las rutinas de reconstruccion del contorno y de los POI

    Dim eNueva As Entity, i As Integer

    eNueva = gcd.CCC[eOrigen.gender].newEntity()

    ' arrays
    eNueva.p.resize(eOrigen.p.count)
    eNueva.fparam.resize(eOrigen.fparam.count)
    eNueva.iparam.resize(eOrigen.iparam.count)
    eNueva.psel.resize(eOrigen.psel.count)
    eNueva.sParam.resize(eOrigen.sParam.count)
    For i = 0 To eOrigen.p.Max
        eNueva.P[i] = eOrigen.P[i]
    Next
    For i = 0 To eOrigen.fparam.Max
        eNueva.fparam[i] = eOrigen.fparam[i]
    Next
    For i = 0 To eOrigen.iparam.Max
        eNueva.iparam[i] = eOrigen.iparam[i]
    Next
    For i = 0 To eOrigen.sParam.Max
        eNueva.sParam[i] = eOrigen.sParam[i]
    Next

    eNueva.Gender = eOrigen.Gender
    eNueva.pLayer = eOrigen.pLayer
    eNueva.pBlock = eOrigen.pBlock
    eNueva.Group = eOrigen.Group
    eNueva.colour = eOrigen.colour
    eNueva.LineType = eOrigen.LineType
    eNueva.LineWidth = eOrigen.LineWidth
    If GetNewid Then eNueva.id = gcd.NewId()
    'eNueva.idContainer = eOrigen.idContainer
    eNueva.Container = eOrigen.Container
    eNueva.pStyle = eOrigen.pStyle

    'depre Gcd.CCC[eNueva.gender].BuildPoi(eNueva)

    Return eNueva

End

'' Genera un conjunto de grips para ser usados por cadSelection
Public Function GenerateGrips(e As Entity) As Integer

    Dim i As Integer
    Dim g As Grip
    Dim iCount As Integer

    For i = 0 To e.P.Max Step 2
        g = New Grip
        g.Shape = 0
        g.X = e.P[i]
        g.Y = e.P[i + 1]
        g.Action = 0 ' mover
        g.AsociatedEntity = e
        g.AsociatedPoint = iCount
        gcd.Drawing.Sheet.Grips.Add(g)
        g.ToolTip = ("Move point")
        Inc iCount

    Next
    Return iCount

End

Public Sub DrawEditing(g As Grip)

    Dim e As Entity

    e = g.AsociatedEntity

    Me.Draw(e)

End

Public Function GripEdit(g As Grip) As Boolean

    Dim e As Entity

    e = g.AsociatedEntity

    e.P[g.AsociatedPoint * 2] = g.X
    e.P[g.AsociatedPoint * 2 + 1] = g.Y

    BuildGeometry(e)

End

'' Determines if the entity was selected by a rectanle surrounding al points
'' by default, if ALL points are selected, it can.
Public Function SelFull(eTesting As Entity, X1real As Float, Y1real As Float, X2real As Float, Y2real As Float) As Boolean

    Dim ii As Integer, puedo As Boolean

    Select Case eTesting.Gender

        Case Else

            ' Si tengo un bounding poligon, entonces verifico que todos los puntos esten dentro
            If eTesting.Polygon.Count > 0 Then

                Return puntos.IsPoligonInsideRect(eTesting.Polygon, X1real, Y1real, X2real, Y2real)
            Else If eTesting.PolyLine.Count > 0 Then
                Return puntos.IsPoligonInsideRect(eTesting.PolyLine, X1real, Y1real, X2real, Y2real)

            Else    ' no tengo un poligono, entonces verifico que todos los puntos definitorios de al entidad esten dentro

                If eTesting.p.Count > 0 Then puedo = True Else puedo = False                     ' supongamos que puedo, por ahora, si hay puntos
                For ii = 0 To eTesting.p.max Step 2
                    If ii + 1 > eTesting.p.max Then Break
                    If Not ((eTesting.p[ii] >= X1real And eTesting.p[ii] <= X2real) And (eTesting.p[ii + 1] >= Y1real And eTesting.p[ii + 1] <= Y2real)) Then
                        puedo = False
                    End If
                Next

                If puedo Then
                    For ii = 0 To eTesting.PSel.Max
                        eTesting.PSel[ii] = True
                    Next

                    Return True
                Else
                    For ii = 0 To eTesting.PSel.Max
                        eTesting.PSel[ii] = False
                    Next

                    Return False
                End If
            Endif
    End Select

End

'' Determines if the entity
'' by default, if ANY point is selected, it can.
Public Function SelPartial(eTesting As Entity, X1real As Float, Y1real As Float, X2real As Float, Y2real As Float) As Boolean

    Dim ii As Integer, puedo As Boolean = False
    Dim oLoop As Hatch, flxPoly As Float[]

    Select Case eTesting.Gender

        Case "Hatch"

            'For Each oLoop In eTesting.pBlock

            For Each flxPoly In eTesting.pBlock.Polylines

                puedo = puntos.IsPoligonInsideRect(flxPoly, X1real, Y1real, X2real, Y2real)
                If puedo Then Break

                puedo = puntos.IsPoligonCrossingRect(flxPoly, X1real, Y1real, X2real, Y2real)
                If puedo Then Break
            Next
            'Next

        Case Else

            ' Si tengo un bounding poligon, entonces verifico que todos los puntos esten dentro
            If eTesting.Polygon.Count > 0 Then

                ' Si tengo un bounding poligon, entonces verifico que alguna linea lo cruce

                puedo = puntos.IsPoligonInsideRect(eTesting.Polygon, X1real, Y1real, X2real, Y2real)
                If puedo Then Return True

                Return puntos.IsPoligonCrossingRect(eTesting.Polygon, X1real, Y1real, X2real, Y2real)

            Else If eTesting.PolyLine.Count > 0 Then
                puedo = puntos.IsPoligonInsideRect(eTesting.PolyLine, X1real, Y1real, X2real, Y2real)
                If puedo Then Return True

                Return puntos.IsPoligonCrossingRect(eTesting.PolyLine, X1real, Y1real, X2real, Y2real)

            Else
                ' si cualquier linea cruza alguna linea de la eentiidad, esta queda seleccionada

                For Ii = 0 To eTesting.p.max Step 2
                    If ii + 1 > eTesting.p.max Then Break
                    If ii / 2 > eTesting.Psel.Max Then Break
                    If ((eTesting.p[iI] >= X1real And eTesting.p[Ii] <= X2real) And (eTesting.p[iI + 1] >= Y1real And eTesting.p[iI + 1] <= Y2real)) Then
                        eTesting.PSel[iI / 2] = True
                        puedo = True
                    End If

                Next

                If puntos.IsPoligonCrossingRect(eTesting.p, X1real, Y1real, X2real, Y2real) Then puedo = True
            End If

    End Select

    If puedo Then

        Return True
    Else
        Return False
    End If

End
