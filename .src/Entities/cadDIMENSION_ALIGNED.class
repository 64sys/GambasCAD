' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Inherits Caddimension

Public Const Gender As String = "DIMENSION_ALIGNED"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const CmdLineHelper As String = ("Insert a linear acotation")
Public Const ParamType As String = "PPR"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Start point;End point;extension"

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    cadDimension.ExportDXFCol(e, stxExport)

    ' sobreescribo el nombre de la entidad

    stxExport.insert(["AcDbAlignedDimension", "100"])
    ' ===========================================================================
    stxExport.insert([CStr(e.p[14]), dxf.codX3])                ' first def point
    stxExport.insert([CStr(e.p[15]), dxf.codY3])
    stxExport.insert(["0", dxf.codz0])

    stxExport.insert([CStr(e.p[16]), "14"])                ' text att point
    stxExport.insert([CStr(e.p[17]), "24"])
    stxExport.insert(["0", "34"])

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer
    Dim AfterSubclassmarker As Boolean

    For i = 0 To sClaves.Max
        If sClaves[i] = "100" And sValues[i] = "AcDbAlignedDimension" Then AfterSubclassmarker = True
        If AfterSubclassmarker Then ' lo siguientes codigos
            ' If sClaves[i] = "12" Then pointBaselinePoint.x = CFloat(sValues[i])
            ' If sClaves[i] = "22" Then pointBaselinePoint.y = CFloat(sValues[i])

            If sClaves[i] = "13" Then Me.DefPoint1.x = CFloat(sValues[i])
            If sClaves[i] = "23" Then Me.DefPoint1.y = CFloat(sValues[i])

            If sClaves[i] = "14" Then Me.DefPoint2.x = CFloat(sValues[i])
            If sClaves[i] = "24" Then Me.DefPoint2.y = CFloat(sValues[i])

        End If

    Next

    Try e.pBlock.InsertionPlace = 1

    Return True

    ' catch

    Return False

End

Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    If vParam[0] <> "point" Then Return False

    If gcd.StepsDone = 0 Then
        Me.DimType = gcd.dimAligned
        ' supongo que marca el punto de derecha a izq
        ' el primero es P3 o P67
        Try eBuild.p[0] = vParam[1]
        Try eBuild.p[1] = vParam[2]
        eBuild.p[2] = eBuild.P[0]
        eBuild.p[3] = eBuild.P[1]
        eBuild.p[4] = eBuild.p[2]
        eBuild.p[5] = eBuild.P[3]
        ' Me.DefPoint2.x = Me.DefPoint1.x
        ' Me.DefPoint2.y = Me.DefPoint1.y
        If definitive Then Return True
    Else If gcd.StepsDone = 1 Then

        Try eBuild.p[2] = vParam[1]
        Try eBuild.p[3] = vParam[2]
        eBuild.p[4] = eBuild.p[2]
        eBuild.p[5] = eBuild.P[3]

        eBuild.pBlock = cadDIMENSION_LINEAR.ReBuildBlock2(eBuild, -1)
        If definitive Then Return True
    Else If gcd.StepsDone = 2 Then   ' el tercer punto sera la posicion del texto

        ' return the angle from horizontal to us
        'eBuild.fParam[Me.ipaExtension] = -puntos.PointToLineDistance([vParam[1], vParam[2]], [eBuild.p[0], eBuild.p[1], eBuild.p[2], eBuild.p[3]]) ' / puntos.distancia(eBuild.p[0], eBuild.p[1], eBuild.p[2], eBuild.p[3]
        Try eBuild.p[4] = vParam[1]
        Try eBuild.p[5] = vParam[2]

        eBuild.pBlock = cadDIMENSION_LINEAR.ReBuildBlock2(eBuild, -1)
        If definitive Then
            'Stop
            Return True
        End If
    Endif

End
'
' Public Sub ReBuildBlock(E As Entity, Optional Stage As Integer) As Block
'
'     ' Stage lo uso para cuando estoy creando la dimension
'
'     Dim d As Float, flxTextExt As Float[]
'     Dim fRotXY As Float[]
'
'     Dim newBlock As New Block
'     Dim f1, f2 As New Float[]
'
'     newBlock.entities = New Collection
'
'     ' para definir este bloque necesito 6 entidades
'     Dim eLineaPpal As Entity
'     Dim eOblique1 As Entity       ' tambien pueden ser flechas Solid
'     Dim eOblique2 As Entity
'     Dim eExtension1 As Entity
'     Dim eExtension2 As Entity
'     Dim ePoint1 As Entity
'
'     Dim eText As Entity
'     Dim ePoint2 As Entity
'
'     ' vemos los estilos
'     If E.fParam[Me.ipaStyleTextHeigth] > 0 Then Me.DimTextHeight = E.fParam[Me.ipaStyleTextHeigth] Else Me.DimTextHeight = E.pStyle.DIMTXT
'     If E.fParam[Me.ipaStyleArrowSize] > 0 Then Me.DimArrowSize = E.fParam[Me.ipaStyleArrowSize] Else Me.DimArrowSize = E.pStyle.DIMASZ
'     Me.DimArrowWidth = Me.DimArrowSize / 3
'
'     ' linea principal
'     eLineaPpal = cadLine.NewEntity([E.P[0], E.P[1], E.P[0] + E.P[6] - E.P[4], E.P[1] + E.P[5] - E.P[7]])  ' el 2do punto lo tengo que determinar, el primero esta en la posicion final
'
'     ' lineas de demarcacion
'     eExtension1 = cadLine.NewEntity([0, Me.DimExtension, 0, -Me.DimExtension])
'     eExtension2 = cadLine.NewEntity([0, Me.DimExtension, 0, -Me.DimExtension])
'
'     ' puntos base, ya en las ubicaciones finales (coinciden con los clicks)
'     ePoint1 = cadPoint.NewEntity([e.P[6], e.P[7]])
'     ePoint2 = cadPoint.NewEntity([e.P[8], e.P[9]])
'
'     ' flechas
'     eOblique1 = cadSolid.NewEntity([0, 0, Me.DimArrowSize, Me.DimArrowWidth, Me.DimArrowSize, -Me.DimArrowWidth, 0, 0])
'     eOblique2 = cadSolid.NewEntity([0, 0, -Me.DimArrowSize, Me.DimArrowWidth, -Me.DimArrowSize, -Me.DimArrowWidth, 0, 0])
'
'     ' texto
'     eText = cadMText.NewEntity([e.P[2], e.P[3]])  ' si leo un archivo, esta es la posicion final
'     eText.fParam[cadMText.ipaAttchmPoint] = 8
'
'     ' agrego todo al bloque
'     newBlock.entities.Add(eLineaPpal, gcd.NewHandle())
'     newBlock.entities.Add(eExtension1, gcd.NewHandle())
'     newBlock.entities.Add(eExtension2, gcd.NewHandle())
'     newBlock.entities.Add(ePoint1, gcd.NewHandle())
'     newBlock.entities.Add(ePoint2, gcd.NewHandle())
'     newBlock.entities.Add(eText, gcd.NewHandle())
'     ' -> el bloque
'
'     E.fParam[cadInsert.ipaEscX] = 1      ' ScaleX del inserto
'     E.fParam[cadInsert.ipaEscY] = 1      ' ScaleY del inserto
'     E.fParam[cadInsert.ipaEscZ] = 1      ' ScaleY del inserto
'
'     E.Visible = True
'
'     Return newBlock
'
'     ' el largo de la linea principal viene dado por la distancia entre ambos puntos
'     d = puntos.distancia(Me.DefPoint1.x, Me.DefPoint1.y, Me.DefPoint2.x, Me.DefPoint2.y)
'
'     ' con este click calculo el angulo
'     E.fParam[cadInsert.ipaRotacion] = Ang(Me.DefPoint2.x - Me.DefPoint1.x, Me.DefPoint2.y - Me.DefPoint1.y) * 180 / Pi
'
'     ' la primer entidad del bloque es la linea principal
'     eLineaPpal.P[0] = 0           ' X0
'     eLineaPpal.P[1] = 0           ' Y0
'
'     eLineaPpal.P[2] = d           ' X1
'     eLineaPpal.P[3] = 0           ' Y1
'
'     ePoint2.P[0] = d
'
'     ' la segunda es la primer linea de demarcacion (sin cambios)
'     ' eExtension1.P[0] = 0           ' X0
'     ' eExtension1.P[1] = 0           ' Y0
'     '
'     ' eExtension1.P[2] = 0           ' X1
'     ' eExtension1.P[3] = 0           ' Y1
'
'     ' la tercera es la segunda linea de demarcacion
'     eExtension2.P[0] = d           ' X0
'     'eExtension2.P[1] = 0           ' Y0
'
'     eExtension2.P[2] = d           ' X1
'     'eExtension2.P[3] = 0           ' Y1
'
'     ' el texto
'     eText.StringData[cadMText.sdaText] = "\\A1;" & Format(d, Me.DimFormat)
'
'     E.fParam[cadDimension.ipaRealMeasure] = d
'
'     flxTextExt = glPlus.TextExtends(eText.StringData[0], 0, 0, eText.fParam[1])
'
'     ' la cuarta y quinta son las flechas , tengo que verificar si entran, o el texto
'     If flxTextExt[2] * 1.1 > d Then                      ' no entra
'
'         eOblique1.P[0] = d           ' X0
'         eOblique1.P[2] = Me.DimArrowSize + d           ' X0
'         eOblique1.P[4] = Me.DimArrowSize + d           ' X0
'         eOblique1.P[6] = d           ' X0
'
'         eOblique2.P[0] = 0           ' X0
'         eOblique2.P[2] = -Me.DimArrowSize
'         eOblique2.P[4] = -Me.DimArrowSize
'         eOblique2.P[6] = 0           ' X0
'
'         ' el texto va afuera
'         eText.P[0] = d + Me.DimArrowSize / 2
'         eText.P[1] = Me.DimArrowWidth
'
'     Else                                                                ' entra
'         eOblique1.P[0] = 0           ' X0
'         eOblique1.P[2] = Me.DimArrowSize
'         eOblique1.P[4] = Me.DimArrowSize
'         eOblique1.P[6] = 0           ' X0
'
'         eOblique2.P[0] = d           ' X0
'         eOblique2.P[2] = -Me.DimArrowSize + d           ' X0
'         eOblique2.P[4] = -Me.DimArrowSize + d           ' X0
'         eOblique2.P[6] = d           ' X0
'
'         ' el texto va adentro
'         eText.P[0] = d / 2 - flxTextExt[2] / 2
'         eText.P[1] = Me.DimArrowWidth
'
'     End If
'
'     Me.extension = E.fParam[cadDimension.ipaExtension]
'     ' linea principal
'     eLineaPpal.P[1] = Me.extension           ' Y0
'     eLineaPpal.P[3] = Me.extension           ' Y1
'
'     ' linea de demarcacion
'     eExtension1.P[1] = Me.DimExtension + Me.extension           ' Y0
'     eExtension1.P[3] = -Me.DimExtension + Me.extension           ' Y1
'
'     ' segunda linea de demarcacion
'     eExtension2.P[1] = Me.DimExtension + Me.extension           ' Y0
'     eExtension2.P[3] = -Me.DimExtension + Me.extension           ' Y1
'
'     ' texto
'     eText.P[1] = Me.DimArrowWidth + Me.extension
'
'     ' flechas
'     eOblique1.P[1] = Me.extension           ' X0
'     eOblique1.P[3] = Me.extension + Me.DimArrowWidth
'     eOblique1.P[5] = Me.extension - Me.DimArrowWidth
'     eOblique1.P[7] = Me.extension           ' X0
'
'     eOblique2.P[1] = Me.extension           ' X0
'     eOblique2.P[3] = Me.extension + Me.DimArrowWidth
'     eOblique2.P[5] = Me.extension - Me.DimArrowWidth
'     eOblique2.P[7] = Me.extension           ' X0
'
'     ' End If
'     Return newBlock
'
' End
