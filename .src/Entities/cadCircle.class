' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static

'Fast
Inherits EntityBase

Public Const Gender As String = "CIRCLE"
Public Const CmdLineHelper As String = ("Draw a circle")
Public Const ParamType As String = "PL"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Center;Radious"      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ; 1 "
Public Const TotalParams As Integer = 1

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    Dim f As Float
    Dim ip As Integer

    If gcd.StepsDone = 0 Then

        If vParam[0] <> "point" Then Return False
        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]

        If definitive Then
            eBuild.fParam.Add(0)
            Return True
        End If
    Else If gcd.StepsDone = 1 Then

        If vParam[0] <> "float" Then Return False

        eBuild.fParam[0] = vParam[1]

        If definitive Then Return True

    End If

    Return False

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

    Dim i As Integer

    E.fParam[0] *= sX

    For i = 0 To e.p.max Step 2

        e.P[i] = e.P[i] * sX

        e.P[i + 1] = e.P[i + 1] * sY

    Next

End

Public Sub Draw(oE As Entity)

    If Not oE.Visible Then Return

    'gl.End

    glPlus.CIRCLE(oE.p, oe.fParam[0], gcd.GetGBColor(oE.Colour, oe.pLayer), False, oE.LineWidth, oE.LineType.TrameLength)

End

Public Sub makepolyline(oe As Entity, Optional density As Integer = 36)

    Dim x, y, theta, angle_increment As Float

    oE.polyline.Clear
    'GL.Begin(gl.LINE_STRIP)
    angle_increment = Pi * 2 / 360 * density
    For theta = 0 To 2 * Pi Step angle_increment
        ' el punto considerando 0,0 al centro
        x = oE.p[0] + oE.fParam[0] * Cos(theta)
        y = oE.p[1] + oE.fParam[0] * Sin(theta)
        oE.polyline.Add(x)
        oE.polyline.Add(y)

    Next

End
'' A fat version of the entity

Public Sub DrawSelected(oE As Entity)



    GLplus.circle(oE.P, oe.fParam[0], config.ColorForSelected, False, oE.LineWidth, oE.LineType.TrameLength)

End

'' A fat version of the entity
Public Sub DrawRemark(oE As Entity)



    GLplus.CIRCLE(oE.P, oe.fParam[0], gcd.GetGBColor(oE.Colour, oe.pLayer),, oE.LineWidth + 1, oE.LineType.TrameLength)

End

Public Function Draw2(oE As Entity)

    paint.ARC(oE.p[0], oE.p[1], oE.fParam[0])

    paint.Stroke

End
'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity) As Integer

    oe.PoiPoints.Clear
    oe.PoiType.Clear
    oe.Polygon.Clear

    ' CENTER
    oe.poiPoints.insert([oE.p[0], oE.p[1]])
    oe.poiType.Add(gcd.poiCenter)

    ' quadrant
    oe.poiPoints.insert([oE.p[0] + oe.fParam[0], oE.p[1]])
    oe.poiType.Add(gcd.poiQuadrant)

    ' quadrant
    oe.poiPoints.insert([oE.p[0] - oe.fParam[0], oE.p[1]])
    oe.poiType.Add(gcd.poiQuadrant)

    ' quadrant
    oe.poiPoints.insert([oE.p[0], oE.p[1] + oe.fParam[0]])
    oe.poiType.Add(gcd.poiQuadrant)

    ' quadrant
    oe.poiPoints.insert([oE.p[0], oE.p[1] - oe.fParam[0]])
    oe.poiType.Add(gcd.poiQuadrant)

    oe.Polygon.Insert(oe.PoiPoints)

End
' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsENTITYBUILDER to delete it

Public Sub Finish(oE As Entity) As Boolean

    'Print "Finish en EntityBase"
    'CreatePolygon(oe)
    '  BuildPOI(oe)

    ' busco el tipo de linea, si hace falta

    ' tareas finales de armado del objeto
    Me.makepolyline(oe)

    oE.psel.resize(oE.p.count / 2)

    oE.Selected = False

End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    ' stxExport.insert(["CIRCLE", dxf.codEntity])
    ' Los datos comunes a todas las entidades son guardados por la rutina que llama a esta
    stxExport.insert(["AcDbCircle", "100"])
    stxExport.insert([CStr(e.p[0]), dxf.codCenterX])
    stxExport.insert([CStr(e.p[1]), dxf.codCenterY])
    stxExport.insert([CStr(e.fParam[0]), dxf.codRadius])

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer

    e.P.Clear
    For i = 0 To sClaves.Max
        If sClaves[i] = "10" Then e.P.Add(CFloat(sValues[i]))
        If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))
        If sClaves[i] = "40" Then e.fParam[0] = (CFloat(sValues[i]))
    Next

    If e.fParam.Count = 0 Then Stop ' e.fParam.Add(0)  ' TODO: averiguar q pasa aca q algunas entidades CIRCLE
    ' vienen sin el radio

    Return True

    ' catch

    Return False

End

'' Return if that position is over the entity within the tolerance
Public Function OverMe(e As Entity, Xr As Float, Yr As Float, tolerance As Float) As Boolean

    If Abs(puntos.distancia(xr, yr, E.P[0], E.P[1]) - E.fParam[0]) < tolerance Then Return True
    If puntos.Around(xr, yr, E.P[0], E.P[1], tolerance) Then Return True

    Return False

End
