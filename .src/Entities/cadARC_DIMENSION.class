' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Inherits Caddimension

Public Const Gender As String = "Arc_Dimension"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Insert a linear acotation")
Public Const ParamType As String = "PPPP"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Center of arc;First point;Secont point;extension"

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer
    Dim DimTypeSet As Boolean

    DimTypeSet = False
    For i = 0 To sClaves.Max

        If sClaves[i] = "2" Then e.pBlock = clsEntities.FIndBlock(sValues[i])   ' this could be null
        If sClaves[i] = "10" Then e.p.Add(CFloat(sValues[i]))         ' X0
        If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))         ' Y0

        '
    Next
    '
    ' ' en algunos DXF el codigo 70 no esta
    ' If Not DimTypeSet Then e.ClassHandler = cadDIMENSION_LINEAR

    clsEntities.SetEntity(e)

    ' tengo q presuponer que las escalas son = 1
    e.fParam[Me.ipaEscX] = 1    ' esc X
    e.fParam[Me.ipaEscY] = 1    ' esc Y
    e.fParam[Me.ipaEscZ] = 1    ' esc Z

    Return True

    '' catch

    Return False

End

Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    ' la linea solo recibe puntos

    If vParam[0] <> "point" Then Return False

    If Me.StepsDone = 0 Then
        Me.DimType = gcd.dimAligned
        clsEntities.setEntity(eBuild)

        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]
        eBuild.P[2] = eBuild.P[0]
        eBuild.P[3] = eBuild.P[1]
        If definitive Then Return True
    Else If Me.StepsDone = 1 Then
        eBuild.DrawAble = True
        eBuild.Finished = True
        Try eBuild.P[2] = vParam[1]
        Try eBuild.P[3] = vParam[2]
        eBuild.P[4] = eBuild.P[2]
        eBuild.P[5] = eBuild.P[3]

        eBuild.pBlock = ReBuildBlock(eBuild)
        If definitive Then Return True
    Else If Me.StepsDone = 2 Then
        eBuild.DrawAble = True
        eBuild.Finished = True
        Try eBuild.P[4] = vParam[1]
        Try eBuild.P[5] = vParam[2]
        eBuild.P[6] = eBuild.P[4]
        eBuild.P[7] = eBuild.P[5]

        eBuild.pBlock = ReBuildBlock(eBuild)
        If definitive Then Return True
    Else If Me.StepsDone = 3 Then
        eBuild.DrawAble = True
        eBuild.Finished = True
        Try eBuild.P[6] = vParam[1]
        Try eBuild.P[7] = vParam[2]

        eBuild.pBlock = ReBuildBlock(eBuild)
        If definitive Then Return True

    Endif

End

Public Sub ReBuildBlock(ELEM As Entity) As Block

    Dim d As Float, flxTextExt As Float[]
    Dim fRotXY As Float[]

    Dim newBlock As New Block
    Dim f1, f2 As New Float[]

    newBlock.entities = New Entity[]

    ' para definir este bloque necesito 6 entidades
    Dim eLineaPpal As Entity
    Dim eOblique1 As Entity       ' tambien pueden ser flechas Solid
    Dim eOblique2 As Entity
    Dim eExtension1 As Entity
    Dim eExtension2 As Entity
    Dim eDot1 As Entity
    Dim eDot2 As Entity
    Dim eText As Entity
    Dim ePoint2 As Entity

    ' la linea principal ahora es un arco
    clsEntities.Addarc(newBlock.entities, [0, 0], 0, 0, 0, elem.colour, elem.LineWidth, elem.LineType.Index, elem.pLayer)
    eLineaPpal = newBlock.entities.Last

    ' lineas de demarcacion
    clsEntities.AddLine(newBlock.entities, [0, Me.DimExtension, 0, -Me.DimExtension], elem.colour, elem.LineWidth, elem.LineType.Index, elem.pLayer)
    eExtension1 = newBlock.entities.Last

    clsEntities.AddLine(newBlock.entities, [0, Me.DimExtension, 0, -Me.DimExtension], elem.colour, elem.LineWidth, elem.LineType.Index, elem.pLayer)
    eExtension2 = newBlock.entities.Last

    ' flechas

    clsEntities.Addsolid(newBlock.entities, [0, 0, Me.DimArrowSize, Me.DimArrowWidth, Me.DimArrowSize, -Me.DimArrowWidth, 0, 0], elem.colour, elem.LineWidth, elem.LineType.Index, elem.pLayer)
    eOblique1 = newBlock.entities.Last

    clsEntities.Addsolid(newBlock.entities, [0, 0, -Me.DimArrowSize, Me.DimArrowWidth, -Me.DimArrowSize, -Me.DimArrowWidth, 0, 0], elem.colour, elem.LineWidth, elem.LineType.Index, elem.pLayer)
    eOblique2 = newBlock.entities.Last

    ' texto
    clsEntities.AddMText(newBlock.entities, [0, 0, 0, 0], 0, Me.DimTextHeight, "0.00", elem.colour, elem.LineWidth, elem.LineType.Index, elem.pLayer)
    eText = newBlock.entities.Last

    ' -> el bloque

    elem.fParam[cadInsert.ipaEscX] = 1      ' ScaleX del inserto
    elem.fParam[cadInsert.ipaEscY] = 1      ' ScaleY del inserto
    elem.fParam[cadInsert.ipaEscZ] = 1      ' ScaleY del inserto

    elem.Visible = True

    '
    eLineaPpal.fParam[0] = 0          ' radio
    eLineaPpal.fParam[1] = Ang(elem.P[2] - elem.P[0], elem.P[3] - elem.P[1]) * 180 / Pi

    '
    ' las lineas de extension (las hago HORIZONTALES y las roto)
    eExtension1.P.Clear
    eExtension1.P.Insert([-Me.DimExtension, 0, Me.DimExtension, 0])
    eExtension2.P.Clear
    eExtension2.P.Insert([-Me.DimExtension, 0, Me.DimExtension, 0])

    ' flechas
    eOblique1.P.Clear
    eOblique1.P.Insert([0, 0, -Me.DimArrowWidth, Me.DimArrowSize, Me.DimArrowWidth, Me.DimArrowSize, 0, 0])

    eOblique2.P.Clear
    eOblique2.P.Insert([0, 0, -Me.DimArrowWidth, -Me.DimArrowSize, Me.DimArrowWidth, -Me.DimArrowSize, 0, 0])
    '

    ' 2========================================================================================
    ' nuevo radio
    d = puntos.distancia(elem.P[0], elem.P[1], elem.P[6], elem.P[7])
    eLineaPpal.fParam[0] = d          ' radio del arco

    eLineaPpal.fParam[2] = Ang(elem.P[4] - elem.P[0], elem.P[5] - elem.P[1]) * 180 / Pi
    '

    ' ' la sexta es el texto
    If (eLineaPpal.fParam[2] - eLineaPpal.fParam[1]) < 0 Then eLineaPpal.fParam[2] += 360

    elem.fParam[cadDimension.ipaRealMeasure] = (eLineaPpal.fParam[2] - eLineaPpal.fParam[1]) / 360 * 2 * puntos.distancia(elem.P[0], elem.P[1], elem.P[4], elem.P[5]) * Pi

    eText.StringData[0] = "L " & Format(elem.fParam[cadDimension.ipaRealMeasure], Me.DimFormatAng)

    fRotXY = puntos.RotateFromPointWithAngle(elem.P[0], elem.P[1], (eLineaPpal.fParam[2] - eLineaPpal.fParam[1]) / 180 * Pi / 2, elem.P[2], elem.P[3])
    '
    flxTextExt = glPlus.MTextExtends(eText.StringData[cadMText.sdaText], 0, 0, eText.fParam[1])
    '
    eText.P[0] = fRotXY[0] - elem.P[0]
    eText.P[1] = fRotXY[1] - elem.P[1]
    eText.fParam[cadMText.ipaTextAngle] = (eLineaPpal.fParam[2] + eLineaPpal.fParam[1]) / 2 - 90

    ' 3 ===========================================================================

    ' roto
    eExtension1.ClassHandler.Rotate(eExtension1, eLineaPpal.fParam[1] / 180 * Pi)
    eExtension2.ClassHandler.Rotate(eExtension2, eLineaPpal.fParam[2] / 180 * Pi)
    eOblique1.ClassHandler.Rotate(eOblique1, eLineaPpal.fParam[1] / 180 * Pi)
    eOblique2.ClassHandler.Rotate(eOblique2, eLineaPpal.fParam[2] / 180 * Pi)

    ' muevo
    fRotXY = puntos.RotateFromPointWithAngle(elem.P[0], elem.P[1], eLineaPpal.fParam[1] / 180 * Pi, d + elem.P[0], elem.P[1])
    ' traslado una flecha y una linea de extension
    eExtension1.ClassHandler.Translate(eExtension1, fRotXY[0] - elem.P[0], fRotXY[1] - elem.P[1])
    eOblique1.ClassHandler.Translate(eOblique1, fRotXY[0] - elem.P[0], fRotXY[1] - elem.P[1])

    ' muevo
    fRotXY = puntos.RotateFromPointWithAngle(elem.P[0], elem.P[1], eLineaPpal.fParam[2] / 180 * Pi, d + elem.P[0], elem.P[1])
    ' traslado las otras
    eExtension2.ClassHandler.Translate(eExtension2, fRotXY[0] - elem.P[0], fRotXY[1] - elem.P[1])
    eOblique2.ClassHandler.Translate(eOblique2, fRotXY[0] - elem.P[0], fRotXY[1] - elem.P[1])

    ' la sexta es el texto

    fRotXY = puntos.RotateFromPointWithAngle(elem.P[0], elem.P[1], (eLineaPpal.fParam[2] + eLineaPpal.fParam[1]) / 180 * Pi / 2, d + elem.P[0], elem.P[1])

    eText.P[0] = fRotXY[0] - elem.P[0]
    eText.P[1] = fRotXY[1] - elem.P[1]

    ' el largo de la linea principal viene dado por la distancia entre ambos puntos
    d = puntos.distancia(elem.P[0], elem.P[1], elem.P[2], elem.P[3])

    ' con este click calculo el angulo
    'elem.fParam[cadInsert.ipaRotacion] = Ang(elem.p[2] - elem.P[0], elem.p[3] - elem.P[1]) * 180 / Pi

    ' X0

    '===========================================
    Return newBlock

End
