' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Inherits Caddimension

Public Const Gender As String = "DIMENSION_ORDINATE"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const CmdLineHelper As String = ("Insert an ordinate acotation")
Public Const ParamType As String = "PMP"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Base point;Point or <B>aseline;Extension"
'Public Const USEWITH As String = ""

'' Creates a new LWpolyline entity and prepares arrays
Public Function NewEntity(Optional fPoints As Float[], bNewHandle As Boolean = False) As Entity

    Dim e As Entity

    e = cadDimension.NewEntity(fPoints, bNewHandle)
    e.Gender = Me.Gender
    Me.StepsDone = 1

    Return e

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    ' 10,20,30 -> Baseline              '
    ' 11,21,31 -> Text mid point
    ' 12,22,32 -> UNUSED
    ' 13,23,33 -> Def point, o sea el que determina el valor de la dimension D=Def-Baseline
    ' 14,24,34 -> Leader endpoint, largo de la linea de definicion

    Dim i As Integer
    Dim AfterSubclassmarker As Boolean
    ' revisamos lo que viene del importador comun

    For i = 0 To sClaves.Max
        If sClaves[i] = "100" And sValues[i] = "AcDbOrdinateDimension" Then AfterSubclassmarker = True
        If AfterSubclassmarker Then ' lo siguientes codigos

            If sClaves[i] = "13" Then e.P[6] = CFloat(sValues[i])
            If sClaves[i] = "23" Then e.P[7] = CFloat(sValues[i])

            If sClaves[i] = "14" Then e.P[8] = CFloat(sValues[i])
            If sClaves[i] = "24" Then e.P[9] = CFloat(sValues[i])

        End If

    Next

    ' TODO: cuando este terminada la entidad, sacar eso
    'e.pBlock.AbsoluteCoords = True
    ' y dejar esto
    If e.fParam[Me.ipaStyleTextHeigth] > 0 Then Me.DimTextHeight = e.fParam[Me.ipaStyleTextHeigth]
    Debug "cadDimension.DimTextHeight", cadDimension.DimTextHeight
    ' TODO: cuando este terminada la entidad, sacar eso
    ' tengo q presuponer que las escalas son = 1
    e.fParam[Me.ipaEscX] = 1    ' esc X
    e.fParam[Me.ipaEscY] = 1    ' esc Y
    e.fParam[Me.ipaEscZ] = 1    ' esc Z
    e.pBlock.AbsoluteCoords = True

    ' y poner esto
    ' e.pBlock = Me.ReBuildBlock(e)

    Return True

    ' catch

    Return False

End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    cadDimension.ExportDXFCol(e, stxExport)

    ' sobreescribo el nombre de la entidad

    stxExport.insert(["AcDbOrdinateDimension", "100"])
    ' ===========================================================================
    stxExport.insert([CStr(e.p[14]), dxf.codX3])                ' first def point
    stxExport.insert([CStr(e.p[15]), dxf.codY3])
    stxExport.insert(["0", dxf.codz0])

    stxExport.insert([CStr(e.p[16]), "14"])                ' text att point
    stxExport.insert([CStr(e.p[17]), "24"])
    stxExport.insert(["0", "34"])

End

Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    ' la linea solo recibe puntos

    If vParam[0] = "text" And vParam[1] = "B" Then ' se necesita marcar el punto base
        Me.StepsDone = 0

    End If

    If Me.StepsDone = 0 Then                ' BASEPOINT
        Me.DimType = gcd.dimOrdinate

        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]
        eBuild.P[2] = eBuild.P[0]
        eBuild.P[3] = eBuild.P[1]
        If definitive Then Return True
    Else If Me.StepsDone = 1 Then           ' SECOND POINT

        Try eBuild.P[2] = vParam[1]
        Try eBuild.P[3] = vParam[2]
        eBuild.pBlock = cadDIMENSION_LINEAR.ReBuildBlock2(eBuild, 103)
        If definitive Then Return True
    Else If Me.StepsDone = 2 Then           ' EXTENSION
        If vParam[0] = "point" Then  ' vino como un punto, entonces la calculo de otra manera

            ' return the angle from horizontal to us
            eBuild.fParam[Me.ipaExtension] = -puntos.PointToLineDistance([vParam[1], vParam[2]], [eBuild.p[0], eBuild.p[1], eBuild.p[2], eBuild.p[3]]) ' / puntos.distancia(eBuild.p[0], eBuild.p[1], eBuild.p[2], eBuild.p[3]

        Else If vParam[0] = "float" Then  ' vino como un punto, entonces la calculo de otra manera
            eBuild.fParam[Me.ipaExtension] = vParam[1]

        End If
        ' TODO: cuando este terminada la entidad, sacar eso
        ebuild.pBlock.AbsoluteCoords = True
        ' y dejar esto
        eBuild.pBlock = cadDIMENSION_LINEAR.ReBuildBlock2(eBuild, 103)
        If definitive Then
            'Stop
            Return True
        End If
    Endif

End

