' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Inherits Caddimension

Public Const Gender As String = "Dimension_Ordinate"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Insert a linear acotation")
Public Const ParamType As String = "PPR"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Start point;End point;extension"

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    ' 10,20,30 -> Baseline              '
    ' 11,21,31 -> Text mid point

    ' 13,23,33 -> Def point, o sea el que determina el valor de la dimension D=Def-Baseline
    ' 14,24,34 -> Leader endpoint, largo de la linea de definicion

    Dim i As Integer
    Dim AfterSubclassmarker As Boolean
    ' revisamos lo que viene del importador comun

    For i = 0 To sClaves.Max
        If sClaves[i] = "100" And sValues[i] = "AcDbOrdinateDimension" Then AfterSubclassmarker = True
        If AfterSubclassmarker Then ' lo siguientes codigos

            If sClaves[i] = "13" Then e.P[4] = CFloat(sValues[i])
            If sClaves[i] = "23" Then e.P[5] = CFloat(sValues[i])

            If sClaves[i] = "14" Then e.P[6] = CFloat(sValues[i])
            If sClaves[i] = "24" Then e.P[7] = CFloat(sValues[i])

        End If

    Next


    ' TODO: cuando este terminada la entidad, sacar eso
    'e.pBlock.AbsoluteCoords = True
    ' y dejar esto

    e.pBlock = ReBuildBlock(e)

    Return True

    ' catch

    Return False

End

Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    ' la linea solo recibe puntos

    If vParam[0] <> "point" Then Return False

    If Me.StepsDone = 0 Then
        Me.DimType = gcd.dimAligned
        clsEntities.setEntity(eBuild)

        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]
        eBuild.P[2] = eBuild.P[0]
        eBuild.P[3] = eBuild.P[1]
        If definitive Then Return True
    Else If Me.StepsDone = 1 Then
        eBuild.DrawAble = True
        eBuild.Finished = True
        Try eBuild.P[2] = vParam[1]
        Try eBuild.P[3] = vParam[2]
        eBuild.pBlock = ReBuildBlock(eBuild)
        If definitive Then Return True
    Else If Me.StepsDone = 2 Then
        If vParam[0] = "point" Then  ' vino como un punto, entonces la calculo de otra manera

            ' return the angle from horizontal to us
            eBuild.fParam[Me.ipaExtension] = -puntos.PointToLineDistance([vParam[1], vParam[2]], [eBuild.p[0], eBuild.p[1], eBuild.p[2], eBuild.p[3]]) ' / puntos.distancia(eBuild.p[0], eBuild.p[1], eBuild.p[2], eBuild.p[3]

        Else If vParam[0] = "float" Then  ' vino como un punto, entonces la calculo de otra manera
            eBuild.fParam[Me.ipaExtension] = vParam[1]

        End If
        ' TODO: cuando este terminada la entidad, sacar eso
        ebuild.pBlock.AbsoluteCoords = True
        ' y dejar esto
        ' eBuild.pBlock = ReBuildBlock(eBuild)
        If definitive Then
            'Stop
            Return True
        End If
    Endif

End

Public Sub ReBuildBlock(ELEM As Entity) As Block

    Dim d As Float, flxTextExt As Float[]
    Dim fRotXY As Float[]

    Dim newBlock As New Block
    Dim f1, f2 As New Float[]

    newBlock.entities = New Entity[]

    ' para definir este bloque necesito 6 entidades
    Dim eLineaPpal As Entity
    Dim eOblique1 As Entity       ' tambien pueden ser flechas Solid
    Dim eOblique2 As Entity
    Dim eExtension1 As Entity
    Dim eExtension2 As Entity
    Dim eDot1 As Entity
    Dim eDot2 As Entity
    Dim eText As Entity
    Dim ePoint2 As Entity

    '               (P1=Text mid)
    '         (p3) 12.23
    '         --+--.-----
    '           ^   (P4=Leader endpoint)
    '           !
    '  + (P0=baseline)

    ' Armo directamente de acuerdo a lo que necesito
    If elem.fParam[Me.ipaHorizAngle] = 1 Then
        elem.fParam[cadDimension.ipaRealMeasure] = elem.P[5] - elem.P[1]
        If elem.fParam[cadDimension.ipaRealMeasure] >= 0 Then

            ' cuadrante superior

            ' lineas de demarcacion
            clsEntities.AddLine(newBlock.entities, [0, 0, 0, 0], elem.colour, elem.LineWidth, elem.LineType.Index, elem.pLayer)
            eExtension2 = newBlock.entities.Last

            ' puntos base

            clsEntities.AddPoint(newBlock.entities, [0.0, 0.0], elem.colour, elem.LineWidth, elem.LineType.Index, elem.pLayer)

            ' flechas
            ' la flecha va rotada 90*
            f2.Insert([Me.DimExtension, 0, Me.DimExtension - Me.DimArrowWidth, -Me.DimArrowSize, Me.DimExtension + Me.DimArrowWidth, -Me.DimArrowSize, Me.DimExtension, 0])

            clsEntities.Addsolid(newBlock.entities, f2, elem.colour, elem.LineWidth, elem.LineType.Index, elem.pLayer)
            eOblique2 = newBlock.entities.Last

            ' texto
            clsEntities.AddMText(newBlock.entities, [0.0, 0.0, 0.0, 0.0], 0, Me.DimTextHeight, "0.00", elem.colour, elem.LineWidth, elem.LineType.Index, elem.pLayer)
            eText = newBlock.entities.Last

            ' -> el bloque

            elem.fParam[cadInsert.ipaEscX] = 1      ' ScaleX del inserto
            elem.fParam[cadInsert.ipaEscY] = 1      ' ScaleY del inserto
            elem.fParam[cadInsert.ipaEscZ] = 1      ' ScaleY del inserto

            elem.Visible = True

            ' el largo de la linea principal viene dado por la distancia entre puntos 3 y 4
            If elem.fParam[Me.ipaHorizAngle] = 1 Then
                d = elem.P[7] - elem.P[5]

            Else
                d = elem.P[6] - elem.P[4]

            End If
            eExtension2.P[2] = d
            ' con este click calculo el angulo
            elem.fParam[cadInsert.ipaRotacion] = Ang(elem.p[6] - elem.P[4], elem.p[7] - elem.P[5]) * 180 / Pi

            ' ' la tercera es la segunda linea de demarcacion
            ' eExtension2.P[0] = d           ' X0
            ' 'eExtension2.P[1] = 0           ' Y0
            '
            ' eExtension2.P[2] = d           ' X1
            ' 'eExtension2.P[3] = 0           ' Y1

            ' la medida es entre 0 y 3
            If elem.fParam[Me.ipaHorizAngle] = 0 Then

            Else
                elem.fParam[cadDimension.ipaRealMeasure] = elem.P[4] - elem.P[0]
            End If

            ' el texto
            ' eText.StringData[cadMText.sdaText] = "\\A1;" &
            Format(elem.fParam[cadDimension.ipaRealMeasure], Me.DimFormat)

            eText.StringData[cadMText.sdaText] = Format(elem.fParam[cadDimension.ipaRealMeasure], Me.DimFormat)

            flxTextExt = glPlus.MTextExtends(eText.StringData[cadMText.sdaText], 0, 0, eText.fParam[cadMText.ipaTextHeight])

            ' ' la cuarta y quinta son las flechas , tengo que verificar si entran, o el texto
            ' If flxTextExt[2] * 1.1 > d Then                      ' no entra
            '
            '     eOblique2.P[0] = 0           ' X0
            '     eOblique2.P[2] = -Me.DimArrowSize
            '     eOblique2.P[4] = -Me.DimArrowSize
            '     eOblique2.P[6] = 0           ' X0
            '
            ' Else                                                                ' entra
            '
            '     eOblique2.P[0] = d           ' X0
            '     eOblique2.P[2] = -Me.DimArrowSize + d           ' X0
            '     eOblique2.P[4] = -Me.DimArrowSize + d           ' X0
            '     eOblique2.P[6] = d           ' X0
            '
            ' End If

            Me.extension = elem.fParam[Me.ipaExtension]

        End If
    End If

    ' texto

    newBlock.x0 = elem.P[4]
    newBlock.y0 = elem.P[5]

    If elem.fParam[cadDimension.ipaRealMeasure] >= 0 Then
        eText.P[0] = (elem.P[6] - elem.P[4]) / 2 - flxTextExt[3]
    Else
        eText.P[0] = (elem.P[6] - elem.P[4]) / 2
    End If

    If elem.fParam[cadDimension.ipaRealMeasure] >= 0 Then
        eText.P[1] = (elem.P[7] - elem.P[5]) / 2 - flxTextExt[3]
    Else
        eText.P[1] = (elem.P[7] - elem.P[5]) / 2
    End If
    newBlock.AbsoluteCoords = 2

    Return newBlock

End
