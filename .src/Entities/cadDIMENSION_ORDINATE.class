' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Inherits Caddimension

Public Const Gender As String = "DIMENSION_ORDINATE"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const CmdLineHelper As String = ("Insert an ordinate acotation")
Public Const ParamType As String = "PMP"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Base point;Point or [Baseline,Horizontal,Vertica];Extension"
'Public Const USEWITH As String = ""

'' Creates a new LWpolyline entity and prepares arrays
Public Function NewEntity(Optional fPoints As Float[], bNewHandle As Boolean = False) As Entity

    Dim e As Entity

    e = cadDimension.NewEntity(fPoints, bNewHandle)
    e.Gender = Me.Gender
    gcd.StepsDone = 1

    Return e

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    ' 10,20,30 -> Baseline              '
    ' 11,21,31 -> Text mid point
    ' 12,22,32 -> UNUSED
    ' 13,23,33 -> Def point, o sea el que determina el valor de la dimension D=Def-Baseline
    ' 14,24,34 -> Leader endpoint, largo de la linea de definicion

    Dim i As Integer
    Dim AfterSubclassmarker As Boolean
    ' revisamos lo que viene del importador comun

    For i = 0 To sClaves.Max
        If sClaves[i] = "100" And sValues[i] = "AcDbOrdinateDimension" Then AfterSubclassmarker = True
        If AfterSubclassmarker Then ' lo siguientes codigos

            If sClaves[i] = "13" Then e.P[6] = CFloat(sValues[i])
            If sClaves[i] = "23" Then e.P[7] = CFloat(sValues[i])

            If sClaves[i] = "14" Then e.P[8] = CFloat(sValues[i])
            If sClaves[i] = "24" Then e.P[9] = CFloat(sValues[i])

        End If

    Next

    ' TODO: cuando este terminada la entidad, sacar eso
    'e.pBlock.AbsoluteCoords = True
    ' y dejar esto
    If e.fParam[Me.ipaStyleTextHeigth] > 0 Then Me.DimTextHeight = e.fParam[Me.ipaStyleTextHeigth]
    Debug "cadDimension.DimTextHeight", cadDimension.DimTextHeight
    ' TODO: cuando este terminada la entidad, sacar eso
    ' tengo q presuponer que las escalas son = 1
    e.fParam[Me.ipaEscX] = 1    ' esc X
    e.fParam[Me.ipaEscY] = 1    ' esc Y
    e.fParam[Me.ipaEscZ] = 1    ' esc Z
    e.pBlock.AbsoluteCoords = True

    ' y poner esto
    ' e.pBlock = Me.ReBuildBlock(e)

    Return True

    ' catch

    Return False

End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean

    cadDimension.ExportDXFCol(e, stxExport)

    ' sobreescribo el nombre de la entidad

    stxExport.insert(["AcDbOrdinateDimension", "100"])
    ' ===========================================================================
    stxExport.insert([CStr(e.p[14]), dxf.codX3])                ' first def point
    stxExport.insert([CStr(e.p[15]), dxf.codY3])
    stxExport.insert(["0", dxf.codz0])

    stxExport.insert([CStr(e.p[16]), "14"])                ' text att point
    stxExport.insert([CStr(e.p[17]), "24"])
    stxExport.insert(["0", "34"])

End

Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

    ' la linea solo recibe puntos

    If vParam[0] = "text" Then
        If vParam[1] = "B" Then ' se necesita marcar el punto base
            gcd.StepsDone = -1
            Return True
        Else If vParam[1] = "H" Then 'hoizontal
            Me.DefAngle = 0
            gcd.StepsDone = 0
            Return True
        Else If vParam[1] = "V" Then ' vertical
            Me.DefAngle = Pi / 2
            gcd.StepsDone = 0
            Return True
        End If
    End If

    If gcd.StepsDone = 0 Then                ' BASEPOINT

        Try eBuild.P[0] = vParam[1]
        Try eBuild.P[1] = vParam[2]
        eBuild.P[2] = eBuild.P[0]
        eBuild.P[3] = eBuild.P[1]
        If definitive Then Return True
    Else If gcd.StepsDone = 1 Then           ' SECOND POINT

        Try eBuild.P[2] = vParam[1]
        Try eBuild.P[3] = vParam[2]
        eBuild.P[4] = eBuild.P[2]
        eBuild.P[5] = eBuild.P[3]
        eBuild.pBlock = ReBuildBlock2(eBuild, 100, Me.DefAngle)
        If definitive Then Return True
    Else If gcd.StepsDone = 2 Then           ' EXTENSION
        If vParam[0] = "point" Then  ' vino como un punto, entonces la calculo de otra manera
            Try eBuild.P[4] = vParam[1]
            Try eBuild.P[5] = vParam[2]
            ' return the angle from horizontal to us

        End If

        ' y dejar esto
        eBuild.pBlock = ReBuildBlock2(eBuild, 100, Me.DefAngle)
        If definitive Then
            'Stop
            Return True
        End If
    Endif

End

'' bContinued fuerza seguir desde el ultimo punto marcado (pasa a ser P1)

Public Sub ReBuildBlock2(E As Entity, Optional iMode As Integer = 0, fAngle As Float = -1) As Block

    ' esta rutina no sabe si el bloque a reconstruir es desde ENTITYBUILDER o desde
    ' DXF o JSON

    Dim flxTextExt As Float[]
    Dim fRotXY As Float[]

    Dim newBlock As New Block
    Dim f1, f2 As New Float[]
    Dim a1 As Float
    Dim sDim As String
    Dim invertida As Boolean
    Dim d, fAngle90 As Single ' para evitar problemas de mantisa cuando Ang=89.99999

    ' para definir este bloque necesito 6 entidades
    Dim eLineaPpal As Entity
    Dim eOblique1 As Entity       ' tambien pueden ser flechas Solid
    Dim eOblique2 As Entity
    Dim eExtension1 As Entity
    Dim eExtension2 As Entity
    Dim eText As Entity
    Dim ePoint1 As Entity
    Dim ePoint2 As Entity
    Dim MyStyle As DimStyle
    Dim IsNegative As Boolean

    ' vemos los estilos
    MyStyle = gcd.Drawing.CurrDimStyle
    If E.fParam[Me.ipaStyleTextHeigth] > 0 Then Me.DimTextHeight = E.fParam[Me.ipaStyleTextHeigth] Else Me.DimTextHeight = MyStyle.DIMTXT
    If E.fParam[Me.ipaStyleArrowSize] > 0 Then Me.DimArrowSize = E.fParam[Me.ipaStyleArrowSize] Else Me.DimArrowSize = MyStyle.DIMASZ
    Me.DimArrowWidth = Me.DimArrowSize / 3
    Me.DimExtension = Me.DimArrowSize

    newBlock.name = "*D" ' luego se agregara la handle, en entitybuilder
    newBlock.entities = New Collection

    ' Pasamos los puntos que viene marcando el user a nuestros puntos.
    Me.DefBaselinePoint.x = e.P[0]
    Me.DefBaselinePoint.y = e.P[1]
    Me.DefPoint2b.x = e.P[2]
    Me.DefPoint2b.y = e.P[3]
    Me.DefPoint2.x = e.P[4]
    Me.DefPoint2.y = e.P[5]

    ' reduzco este valor a -89.99 -> 90
    Me.DefAngle = Utils.fMod(Me.DefAngle, Pi)
    If Me.DefAngle > Pi / 2 Then Me.DefAngle -= Pi
    ' busco el angulo perpendicular
    fAngle90 = Me.DefAngle + Pi / 2
    fAngle90 = Utils.fMod(fAngle90, Pi)
    If fAngle90 > Pi / 2 Then fAngle90 -= Pi

    ' el siguiente valor depende de la posicion del texto
    Me.DefDeltaT = Me.DimTextHeight * 3 / 4

    ' verifico el armado, siempre el P1 debe estar a la izq del P2

    ' ahora recalculo la posicion del terxto
    ' el centro de la linea principal

    Me.DefTextMidPoint.x = Me.DefPoint2.x - Sin(Me.DefAngle) * Me.DefDeltaT
    Me.DefTextMidPoint.y = Me.DefPoint2.y + Cos(Me.DefAngle) * Me.DefDeltaT

    eLineaPpal = cadLine.NewEntity([Me.DefPoint1b.x, Me.DefPoint1b.y, Me.DefPoint2b.x, Me.DefPoint2b.y], True)  ' el 2do punto lo tengo que
    ' lineas de demarcacion
    'eExtension1 = cadLine.NewEntity([Me.DefPoint1b.x, Me.DefPoint1b.y - Me.DimExtension, Me.DefPoint1b.x, Me.DefPoint1b.y + Me.DimExtension])

    eExtension2 = cadLine.NewEntity([0, 0, 0, 0], True) ' se calculan mas adelante

    ' puntos base, ya en las ubicaciones finales (coinciden con los clicks)
    ePoint2 = cadPoint.NewEntity([Me.DefPoint2b.x, Me.DefPoint2b.y], True)
    ' texto
    eText = cadMText.NewEntity([0, 0], True)  ' si leo un archivo, esta es la posicion final
    eText.fParam[cadMText.ipaAttchmPoint] = 8
    eText.fParam[cadMText.ipaTextAngle] = Me.DefAngle
    eText.fParam[cadMText.ipaTextHeight] = Me.DimTextHeight

    If Me.DefAngle = 0 Then
        d = Me.DefPoint2b.x - Me.DefBaselinePoint.x
    Else
        d = Me.DefPoint2b.y - Me.DefBaselinePoint.y
    Endif

    ' pero antes determino un dato que me va a servir para DimOrdinate
    If d < 0 Then IsNegative = True

    E.fParam[cadDimension.ipaRealMeasure] = Abs(d)
    If E.StringData[Me.sdaTextOverride] <> "" Then
        sDim = E.StringData[Me.sdaTextOverride]
    Else
        sDim = Format(Abs(d), Me.DimFormat)
    Endif
    ' el texto
    eText.StringData[cadMText.sdaText] = "\\A1;" & sDim

    ' veo si entra el texto
    flxTextExt = glPlus.TextExtends(sDim, Me.DimTextHeight)

    ' linea principal
    eLineaPpal.P.Clear
    eText.P.Clear
    eExtension2.P.Clear
    If IsNegative Then

        If Me.DefAngle = 0 Then ' Horizontal
            Me.DefPoint2.x = Me.DefPoint2b.x
            Me.DefTextMidPoint.x = Me.DefPoint2.x + flxTextExt[0] * 0.7

        Else                    ' vertical
            Me.DefPoint2.y = Me.DefPoint2b.y
            Me.DefTextMidPoint.y = Me.DefPoint2.y + flxTextExt[0] * 0.7

        End If
        eLineaPpal.P.Insert([Me.DefPoint2.x + flxTextExt[0] * 1.2 * Cos(Me.DefAngle), Me.DefPoint2.y + flxTextExt[0] * 1.2 * Sin(Me.DefAngle), Me.DefPoint2.x, Me.DefPoint2.y])

    Else

        If Me.DefAngle = 0 Then ' Horizontal
            Me.DefPoint2.x = Me.DefPoint2b.x
            Me.DefTextMidPoint.x = Me.DefPoint2.x - flxTextExt[0] * 0.7         ' texto
        Else
            Me.DefPoint2.y = Me.DefPoint2b.y
            Me.DefTextMidPoint.y = Me.DefPoint2.y - flxTextExt[0] * 0.7
        End If

        eLineaPpal.P.Insert([Me.DefPoint2.x - flxTextExt[0] * 1.2 * Cos(Me.DefAngle), Me.DefPoint2.y - flxTextExt[0] * 1.2 * Sin(Me.DefAngle), Me.DefPoint2.x, Me.DefPoint2.y])

    End If

    ' parametros para la linea de extension
    Me.DefPointAux1.x = Me.DefPoint2.x - Me.DimExtension * Sgn(Me.DefPoint2.x - Me.DefPoint2b.x)
    Me.DefPointAux1.y = Me.DefPoint2.y - Me.DimExtension * Sgn(Me.DefPoint2.y - Me.DefPoint2b.y)

    Me.DefPointAux2.x = Me.DefPoint2.x + Me.DimExtension * Sgn(Me.DefPoint2.x - Me.DefPoint2b.x)
    Me.DefPointAux2.y = Me.DefPoint2.y + Me.DimExtension * Sgn(Me.DefPoint2.y - Me.DefPoint2b.y)

    eText.P.Insert([Me.DefTextMidPoint.x, Me.DefTextMidPoint.y])
    eExtension2.P.Insert([Me.DefPointAux1.x, Me.DefPointAux1.y, Me.DefPointAux2.x, Me.DefPointAux2.y])
    ' flechas

    eOblique2 = cadInsert.NewEntity([Me.DefPoint2.x, Me.DefPoint2.y], True)
    eOblique2.pBlock = clsEntities.FIndBlock("_thick2_arrow", gcd.Drawing.oBlocks)
    eOblique2.fParam[cadInsert.ipaEscX] = 1
    eOblique2.fParam[cadInsert.ipaEscY] = 1
    eOblique2.fParam[cadInsert.ipaEscZ] = 1
    eOblique2.fParam[cadInsert.ipaRotacion] = Me.DefAngle * 180 / Pi
    If IsNegative Then eOblique2.fParam[cadInsert.ipaRotacion] += 180

    ' agrego todo al bloque
    newBlock.entities.Add(eLineaPpal, eLineaPpal.Handle)
    newBlock.entities.Add(eExtension2, eExtension2.Handle)
    newBlock.entities.Add(ePoint2, ePoint2.Handle)
    newBlock.entities.Add(eOblique2, eOblique2.Handle)
    newBlock.entities.Add(eText, eText.Handle)
    newBlock.AbsoluteCoords = True

    ' -> el bloque
    E.fParam[cadInsert.ipaEscX] = 1      ' ScaleX del inserto
    E.fParam[cadInsert.ipaEscY] = 1      ' ScaleY del inserto
    E.fParam[cadInsert.ipaEscZ] = 1      ' ScaleY del inserto
    E.Visible = True

    ' guardo los puntos para exportar a DXF

    e.P[10] = Me.DefPoint2b.x
    e.P[11] = Me.DefPoint2b.y

    e.P[12] = Me.DefTextMidPoint.x
    e.P[13] = Me.DefTextMidPoint.y

    e.P[14] = Me.DefBaselinePoint.x ' baseline
    e.P[15] = Me.DefBaselinePoint.y

    e.P[16] = Me.DefPoint1.x
    e.P[17] = Me.DefPoint1.y

    e.P[18] = Me.DefPoint2.x
    e.P[19] = Me.DefPoint2.y

    e.P[20] = 0
    e.P[21] = 0

    e.P[22] = 0
    e.P[23] = 0

    Return newBlock

End
