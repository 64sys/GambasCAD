' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'Create Static
Create Static

Public Const Gender As String = "Dimension"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Insert an acotation")
Public ParamType As String = "TPP"                             ' that is Point, Point, Float; could be Color Text, etc
Public ParamHelper As String = "Start point;End point"
Public Const USEWITH As String = ""
Public Const OrthogonalIgnored As Boolean = False
Public Const OrthogonalForced As Boolean = False
Public Const ParamDefault As String = " "
Public Const StretchAble As Boolean = True           ' Si lo puedo deformar
Public Selected As Boolean

Public DrawAble As Boolean = False          ' True si durante la construccion ya tiene suficientes elementos para poder hacer una representacion digna
Public Visible As Boolean = True            ' si esta entidad puede ser mostrada independientmente
Public Finished As Boolean = False          ' colocar en true cuando se llegue a completar
Public StepsDone As Integer                 ' esto lo cambia cls ElementBuilder durante la construccion

Public TextEntry As String

Public elem As Entity

Public XYreal As Float[]

Public extension As Float
Public iBloque As Integer

' fParam helpers
Public Const TotalParams As Integer = 10

Public Const ipaEscX As Integer = 0
Public Const ipaEscY As Integer = 1         ' usados por cadInsert para dibujar el bloque
Public Const ipaEscZ As Integer = 2
Public Const ipaRotacion As Integer = 3

Public Const ipaVertJustif As Integer = 4
Public Const ipaRelativeFactor As Integer = 5
Public Const ipaHorizAngle As Integer = 6
Public Const ipaExtension As Integer = 7
Public Const ipaObliqueExtension As Integer = 8
Public Const ipaRealMeasure As Integer = 9

' fParam helpers
Public Const iTotalParams As Integer = 2

Public Const iiiDimType As Integer = 0
Public Const iiiAtatchPoint As Integer = 1

' stringdata helpers
Public Const sdaTotalParams As Integer = 2
Public Const sdaTextOverride As Integer = 0
Public Const sdaUNUSED As Integer = 1

' Para mejor generalidad y para compatibilidad futura usaremos los P[] asi con los CODE del DXF
' P[] = DXF CODE
' 0 = 10
' 1 = 20
' 2 = 30    Definition points
' 3 = 11
' 4 = 12
' ......
' 20 = 36

' 21 = 210
' 22 = 220	Extrusion direction(Optional ; Default = 0, 0, 1)
' 23 = 230

' fParam[] = DXF CODE
' se usara asi
' 0 =  70, Dimension type:  Values 0 - 6 are integer values that represent the dimension type.Values 32, 64, And 128 are bit values, which are added To the integer values(value 32 Is Always set In R13 And later releases)
'       0 = Rotated; 1 = Aligned; 2 = Angular; 3 = Diameter; 4 = Radius; 5 = Angular3point; 6 = Ordinate
'       32 = Indicates that the block reference(group code 2) Is Referenced by this dimension only
'       64 = Ordinate type.This Is A bit value(bit 7)used only With integer value 6. If set, ordinate Is X - type; If Not set, ordinate Is Y - type
'       128 = This Is A bit value(bit 8)added To the other group 70 values If the dimension text has been positioned at a user - defined location rather than at the Default location
'
' 1 =  71 Attachment point:
'       1 = Top left ; 2 = Top center; 3 = Top right; 4 = Middle left; 5 = Middle center; 6 = Middle right; 7 = Bottom left; 8 = Bottom center; 9 = Bottom right

' 3 = DimStyle

'' Mode = DimType ver gcd.DimXXXX constants

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer
    Dim DimTypeSet As Boolean
    Dim BlockSet As Boolean

    clsEntities.setEntity(e)

    DimTypeSet = False
    For i = 0 To sClaves.Max

        If sClaves[i] = "2" Then
            If BlockSet = False Then                                ' this prevents duplicated "2" codes
                e.pBlock = clsEntities.FIndBlock(sValues[i])   ' this could be null
                BlockSet = True
            End If
        End If

        If sClaves[i] = "10" Then e.p.Add(CFloat(sValues[i]))         ' X0  first definition point

        If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))         ' Y0

        If sClaves[i] = "11" Then e.p.Add(CFloat(sValues[i]))         ' X1  midpoint of text

        If sClaves[i] = "21" Then e.P.Add(CFloat(sValues[i]))         ' Y1

        If sClaves[i] = "3" Then e.pStyle = gcd.FindStyle(sValues[i])

        If sClaves[i] = "42" Then
            If sValues[i] Like "15.04*" Then Stop
        End If

        If sClaves[i] = "70" Then ' Dimension type:

            e.iParam[Me.iiiDimType] = CInt(sValues[i])
            DimTypeSet = True
            ' Values 0 - 6 are integer values that represent the dimension type.Values 32, 64, And 128 are bit values, which are added To the integer values(value 32 Is Always set In R13 And later releases)

            ' debo cambiar el handler y enviar al que corresponda
            Select Case e.iParam[Me.iiiDimType] And 31  'Xor 128 Xor 64 Xor 32
                Case 0 '= Rotated, horizontal, Or vertical

                    e.ClassHandler = cadDIMENSION_LINEAR
                    DimTypeSet = True
                Case 1 '= Aligned

                    e.ClassHandler = cadDIMENSION_ALIGNED
                    DimTypeSet = True
                Case 2 '= Angular

                    e.ClassHandler = cadDIMENSION_ANG3PT
                    DimTypeSet = True
                Case 3 '= Diameter

                    e.ClassHandler = cadDIMENSION_DIAMETER
                    DimTypeSet = True
                Case 4 ' = Radius

                    e.ClassHandler = cadDIMENSION_RADIUS
                    DimTypeSet = True
                Case 5 ' = Angular 3 - point

                    e.ClassHandler = cadDIMENSION_ANG3PT
                    DimTypeSet = True
                Case 6 ' = Ordinate

                    e.ClassHandler = cadDIMENSION_ORDINATE
                    DimTypeSet = True
                    If CInt(sValues[i]) And 64 = 64 Then e.fParam[Me.ipaHorizAngle] = 1 ' horiz ordinate

            End Select

        End If
        If sClaves[i] = "71" Then e.iParam[Me.iiiAtatchPoint] = CInt(sValues[i])

    Next

    ' en algunos DXF el codigo 70 no esta
    If Not DimTypeSet Then e.ClassHandler = cadDIMENSION_LINEAR

    ' tengo q presuponer que las escalas son = 1
    e.fParam[Me.ipaEscX] = 1    ' esc X
    e.fParam[Me.ipaEscY] = 1    ' esc Y
    e.fParam[Me.ipaEscZ] = 1    ' esc Z

    If Not e.pStyle Then e.pStyle = gcd.CurrDrawing.arrStyles.First

    Return e.ClassHandler.ImportDXF(e, sClaves, sValues)

    '' catch

    Return False

End

Public Sub ExportDXFCol(e As Entity, ByRef cExport As Collection) As Boolean

    cExport.Add("DIMENSION", dxf.codEntity)
    clsEntities.DXFExportCommonCol(e, cExport)
    cExport.Add("AcDbDimension", "100")

    cExport.Add(E.pBlock.name, "2")                     ' block name

    cExport.Add(CStr(e.p[0]), dxf.codX0)                ' first def point
    cExport.Add(CStr(e.p[1]), dxf.codY0)
    cExport.Add("0", dxf.codz0)

    cExport.Add(CStr(e.p[2]), dxf.codX1)                ' text att point
    cExport.Add(CStr(e.p[3]), dxf.codY1)
    cExport.Add("0", dxf.codz0)

    cExport.Add(CStr(e.iParam[Me.iiiDimType]), "70")    ' dim type

    cExport.Add(CStr(e.iParam[Me.iiiAtatchPoint]), "71") ' text att mode

    cExport.Add(CStr(e.fParam[Me.ipaRealMeasure]), "42") ' real measure

    cExport.Add(e.pStyle.name, "3")                   ' dimstyle

End
