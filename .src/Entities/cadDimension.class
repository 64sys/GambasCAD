' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'Create Static
Create Static
Inherits CadInsert

Public Const Gender As String = "DIMENSION"
Public TextEntry As String
Public elem As Entity
Public XYreal As Float[]

' dimstyle: Todas las variables numericas Float estaran multiplicadas por DimScale
Public DimType As Integer = 0            ' = fParam[0] and &X1111
Public DimAtatchPoint As Integer = 2     ' = fParam[1]
Public DimScale As Integer = 1           ' = fParam[2]
Public DimFormat As String = "0.00"      '
Public DimFormatAng As String = "0.0"    '
Public DimArrowSize As Float = 0.3       ' el largo de la flecha
Public DimArrowWidth As Float = 0.1      ' ancho de la flecha
Public DimTickSize As Float = 0.3        ' el tama√±o de la diagonal
Public DimArrowOrThick As Boolean = True ' flecha (True) o diagonal (False)
Public DimTextHeight As Float = 0.3      '
Public DimSeparation As Float = 0.5      ' la separacion entre el punto que define la cota y el inicio de la linea q marca inicio y fin
Public DimExtension As Float = 0.5       ' la continuacion de esas lineas
Public DimContinued As Boolean = False  ' seteado al inicio de la construccion de la cota
Public DimBaseline As Boolean = False  ' seteado al inicio de la construccion de la cota

Public extension As Float
Public iBloque As Integer

Public Const TotalPoints As Integer = 6

' fParam helpers
Public Const TotalParams As Integer = 12
Public Const ipaEscX As Integer = 0
Public Const ipaEscY As Integer = 1         ' usados por cadInsert para dibujar el bloque
Public Const ipaEscZ As Integer = 2
Public Const ipaRotacion As Integer = 3     '' Aqui se usa para Dimensiones Rotadas, represeta el angulo sobre el que quiero medir. Horizontal, Vertical son casos especiales donde ang=0 o ang=90. En dimensiones alineadas el angulo es la recta determinada con P1 y P2.
Public Const ipaVertJustif As Integer = 4
Public Const ipaRelativeFactor As Integer = 5
Public Const ipaHorizAngle As Integer = 6
Public Const ipaExtension As Integer = 7
Public Const ipaObliqueExtension As Integer = 8
Public Const ipaRealMeasure As Integer = 9
' ademas necesito guardar los StyleOverrides que pudieran haberse efectuado
Public Const ipaStyleTextHeigth As Integer = 10
Public Const ipaStyleArrowSize As Integer = 11
' Public Const ipaStyleTextHeigth As Integer = 12
' Public Const ipaStyleTextHeigth As Integer = 13
' Public Const ipaStyleTextHeigth As Integer = 14

' iParam helpers
Public Const iTotalParams As Integer = 3
Public Const iiiDimType As Integer = 0
Public Const iiiAtatchPoint As Integer = 1
Public Const iiiMode As Integer = 2     ' 0 = linear 1 = horiz 2 = vertical , 3 = otro  (se determina /1E6 )

' stringdata helpers
Public Const sdaTotalParams As Integer = 2
Public Const sdaTextOverride As Integer = 0
Public Const sdaUNUSED As Integer = 1

Public DefPoint1 As New Punto2d
Public DefPoint2 As New Punto2d
Public DefPoint1b As New Punto2d
Public DefPoint2b As New Punto2d
Public DefPointCentral As New Punto2d
Public DefPointCentralAux As New Punto2d
Public DefPointAux1 As New Punto2d
Public DefPointAux2 As New Punto2d
Public DefTextMidPoint As New Punto2d
Public DefBaselinePoint As New Punto2d
Public DefPoint3 As New Punto2d
Public DefPoint4 As New Punto2d
Public DefCenter As New Punto2d
Public DefAngle As Float
Public DefDeltaT As Float

Public StyleOverride As New DimStyle

Public Const DXF_Export As Boolean = True

Public Function NewEntity(Optional fPoints As Float[], bNewHandle As Boolean = False) As Entity

    Dim e As New Entity

    e.Gender = Me.Gender
    If bNewHandle Then
        e.Handle = gcd.NewHandle()
        e.HandleOwner = gcd.Drawing.Sheet.Handle
    End If
    e.iParam.Resize(Me.iTotalParams)
    e.fParam.Resize(Me.TotalParams)
    e.sParam.Resize(Me.sdaTotalParams)
    If fPoints Then e.P.Insert(fPoints.Copy()) Else e.P.Resize(26) ' del 10 al 24 uso post construcion del block y para Exportar DXF
    If e.P.Count < 24 Then e.P.Resize(26)

    ' this may fails on some scopes, but we should Try
    Try e.pLayer = gcd.Drawing.CurrLayer
    Try e.colour = gcd.Drawing.CurrColor
    Try e.LineType = gcd.Drawing.CurrLineType
    Try e.LineWidth = gcd.Drawing.CurrLineWt
    e.pDimStyle = gcd.Drawing.CurrDimStyle
    Me.DimContinued = False
    Me.DimBaseline = False
    Return e

End

Public Sub ClonEntity(eOrigen As Entity) As Entity

    Dim e As Entity

    e = Super.ClonEntity(eOrigen)

    e.pBlock = New Block
    e.pBlock = clsEntities.CopyBlock(eOrigen.pBlock)

    Return e

End

' ESTA CLASE SE USA SOLAMENTE PARA IMPORT/EXPORT DXF

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

    Dim i As Integer
    Dim DimTypeSet As Boolean = False
    Dim BlockSet As Boolean = False
    Dim ReadingStyle As Boolean = False
    Dim NextCode As Integer

    DimTypeSet = False
    For i = 0 To sClaves.Max

        If sClaves[i] = "2" Then
            If BlockSet = False Then                                ' this prevents duplicated "2" codes
                e.pBlock = gcd.Drawing.Blocks[sValues[i]] 'clsEntities.FIndBlock(sValues[i], gcd.Drawing.Blocks)   ' this could be null
                BlockSet = True

            End If
        End If

        If sClaves[i] = "10" Then e.p[0] = CFloat(sValues[i])         ' X0  first definition point
        If sClaves[i] = "20" Then e.P[1] = CFloat(sValues[i])         ' Y0
        If sClaves[i] = "11" Then e.p[2] = CFloat(sValues[i])         ' X1  midpoint of text
        If sClaves[i] = "21" Then e.P[3] = CFloat(sValues[i])         ' Y1

        If sClaves[i] = "3" Then e.pDimStyle = gcd.Drawing.DimStyles[sValues[i]]

        ' ' For DEbug
        ' If sClaves[i] = "42" Then
        '   If sValues[i] Like "0.46*" Then Stop
        ' End If
        '
        If sClaves[i] = "70" Then ' Dimension type:

            e.iParam[Me.iiiDimType] = CInt(sValues[i])
            DimTypeSet = True
            ' Values 0 - 6 are integer values that represent the dimension type.Values 32, 64, And 128 are bit values, which are added To the integer values(value 32 Is Always set In R13 And later releases)

            ' debo cambiar el handler y enviar al que corresponda
            Select Case e.iParam[Me.iiiDimType] And 31  'Xor 128 Xor 64 Xor 32
                Case 0 '= Rotated, horizontal, Or vertical

                    e.gender = cadDIMENSION_LINEAR.Gender
                    DimTypeSet = True
                Case 1 '= Aligned

                    e.gender = cadDIMENSION_ALIGNED.Gender
                    DimTypeSet = True
                Case 2 '= Angular

                    e.gender = cadDIMENSION_ANG3PT.Gender
                    DimTypeSet = True
                Case 3 '= Diameter

                    e.gender = cadDIMENSION_DIAMETER.Gender
                    DimTypeSet = True
                Case 4 ' = Radius

                    e.gender = cadDIMENSION_RADIUS.Gender
                    DimTypeSet = True
                Case 5 ' = Angular 3 - point

                    e.gender = cadDIMENSION_ANG3PT.Gender
                    DimTypeSet = True
                Case 6 ' = Ordinate

                    e.gender = cadDIMENSION_ORDINATE.Gender
                    DimTypeSet = True
                    If (CInt(sValues[i]) And 64) = 64 Then e.fParam[Me.ipaHorizAngle] = 1 ' horiz ordinate

            End Select

        End If
        If sClaves[i] = "71" Then e.iParam[Me.iiiAtatchPoint] = CInt(sValues[i])

        If sClaves[i] = "1000" And sValues[i] = "DSTYLE" Then ' empiezo la lectura del estilo
            ReadingStyle = True
            StyleOverride = New DimStyle
        End If

        If ReadingStyle Then

            If sClaves[i] = "1070" And NextCode = 0 Then
                NextCode = CInt(sValues[i])
            Else If NextCode <> 0 Then
                ' leemos algunos
                If NextCode = "140" And sValues[i] <> 0 Then e.fParam[Me.ipaStyleTextHeigth] = CFloat(sValues[i])
                If NextCode = "41" And sValues[i] <> 0 Then e.fParam[Me.ipaStyleArrowSize] = CFloat(sValues[i])
                NextCode = 0
            End If

        Endif

    Next

    ' en algunos DXF el codigo 70 no esta
    If Not DimTypeSet Then e.gender = cadDIMENSION_LINEAR.Gender

    If Not e.pBlock Then e.pBlock = New Block ' esto previene errores cuando no hay un bloque definido para la Dim

    ' tengo q presuponer que las escalas son = 1
    e.fParam[Me.ipaEscX] = 1    ' esc X
    e.fParam[Me.ipaEscY] = 1    ' esc Y
    e.fParam[Me.ipaEscZ] = 1    ' esc Z

    If Not e.pdimStyle Then
        e.pdimStyle = gcd.Drawing.DimStyles[gcd.Drawing.DimStyles.First]
    End If
    If StyleOverride.DIMASZ > 0 Then Me.DimArrowSize = StyleOverride.DIMASZ Else Me.DimArrowSize = e.pdimStyle.DIMASZ

    ' pero puede haber un Style Override que anula el estilo y propone nuevos valores

    ' para definir el alto del texto tengo q ver si no hay un Style referenciado
    If StyleOverride.DIMTXT > 0 Then Me.DimTextHeight = StyleOverride.DIMTXT Else Me.DimTextHeight = e.pdimStyle.DIMTXT

    Return gcd.CCC[e.gender].ImportDXF(e, sClaves, sValues)
    '' catch

    Return False

End

Public Sub ExportDXFCol(e As Entity, ByRef stxExport As String[]) As Boolean
    '
    ' stxExport.insert(["DIMENSION", dxf.codEntity])
    ' Los datos comunes a todas las entidades son guardados por la rutina que llama a esta

    stxExport[0] = "DIMENSION"
    stxExport.insert(["AcDbDimension", "100"])

    stxExport.insert([E.pBlock.name, "2"])                     ' block name

    stxExport.insert([CStr(e.p[10]), dxf.codX0])                ' first def point
    stxExport.insert([CStr(e.p[11]), dxf.codY0])
    stxExport.insert(["0", dxf.codz0])

    stxExport.insert([CStr(e.p[12]), dxf.codX1])                ' text att point
    stxExport.insert([CStr(e.p[13]), dxf.codY1])
    stxExport.insert(["0", dxf.codz0])

    stxExport.insert([CStr(e.iParam[Me.iiiDimType]), "70"])    ' dim type

    stxExport.insert([CStr(e.iParam[Me.iiiAtatchPoint]), "71"]) ' text att mode

    stxExport.insert([CStr(e.fParam[Me.ipaRealMeasure]), "42"]) ' real measure

    stxExport.insert([e.pDimStyle.name, "3"])                   ' dimstyle

End

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

    Dim eBlock As Entity
    ' los insertos se mueven de acuerdo al punto de insercion
    puntos.Translate(e.p, dx, dy)
    For Each eBlock In e.pBlock.entities
        gcd.CCC[eBlock.gender].translate(eBlock, dx, dy)
    Next

End

Public Sub Rotate(e As Entity, radians As Float)

    puntos.Rotate(e.P, radians)

    Dim eBlock As Entity

    For Each eBlock In e.pBlock.entities
        gcd.CCC[eBlock.gender].rotate(eBlock, radians)
    Next

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

    Dim i As Integer

    E.fParam[Me.ipaEscX] *= sX
    E.fParam[Me.ipaEscY] *= sY
    For i = 0 To e.p.max Step 2

        e.P[i] = e.P[i] * sX
        e.P[i + 1] = e.P[i + 1] * sY

    Next

    Dim eBlock As Entity

    For Each eBlock In e.pBlock.entities
        gcd.CCC[eBlock.gender].scale(eBlock, sx, sy)
    Next

End

Public Sub Draw(oE As Entity)

    If oe.pBlock Then Draw_List(oe.pBlock.entities, oe, 0)

End

'' A selected version of the entity
Public Sub DrawSelected(oE As Entity)

    If oe.pBlock Then Draw_List(oe.pBlock.entities, oe, 1)

End

'' A fat version of the entity
Public Sub DrawRemark(oE As Entity)

    If oe.pBlock Then Draw_List(oe.pBlock.entities, oe, 2)

End

'' DrawMode: 0 Normal ; 1 Selected ; 2 Remark ; 3 Paint
Public Sub Draw_List(eList As Collection, eParent As Entity, DrawMode As Integer)

    Dim et As Entity

    If Not eList Then Return

    For Each ET In eList

        If et.Gender = "INSERT" Then

            If et.pBlock Then cadInsert.Draw_List(et.pBlock.entities, et, DrawMode)
        Else
            Select Case DrawMode
                Case 0 ' normal
                    GCD.CCC[et.gender].Draw(et)
                Case 1 ' Selected
                    GCD.CCC[et.gender].DrawSelected(et)
                Case 2 ' Remark
                    GCD.CCC[et.gender].DrawRemark(et)
                Case 3 ' Paint
                    GCD.CCC[et.gender].Draw2(et)

            End Select

        End If

    Next

End

Public Sub Finish(oE As Entity) As Boolean

    InsertParts(oe, True)
    'MoveInsertParts(oe)

    ' tareas finales de armado del objeto
    Me.BuildPOI(oe)

    'Me.BuildGeometry(oe)

    oE.psel.resize(oE.p.count / 2)

    'oE.Selected = False

End

'' Inserta las partes de un Insert en la coleccion de entidades
Public Function InsertParts(eInsert As Entity, bDontMoveThem As Boolean) As Boolean

    eInsert.pBlock.entities = GetPartsFromBlock(eInsert)

    Return True

End

'' Busca las entidades de un Block y las devuelve con los parametros del Insert
Public Function GetPartsFromBlock(eInsert As Entity) As Collection

    ' la geometria de un inserto implica
    Dim e, e2 As Entity
    Dim cParts As New Collection

    ' eInsert.pBlock.entities.Clear
    For Each e In gcd.Drawing.Blocks[eInsert.pBlock.name].entities
        If e.Gender = "ATTRIB" Then Continue                    ' esta entidad ya viene digerida en el DXF
        If e.Gender = cadInsert.Gender Then
            For Each e2 In GetPartsFromBlock(e)
                gcd.CCC[e2.gender].translate(e2, eInsert.p[0], eInsert.p[1])
                gcd.CCC[e2.gender].rotate(e2, eInsert.fParam[cadInsert.ipaRotacion])
                gcd.CCC[e2.gender].scale(e2, eInsert.fParam[cadInsert.ipaEscX], eInsert.fParam[cadInsert.ipaEscY])
                'e2.IdContainer = eInsert.Id
                cParts.Add(e2, e2.Id)
            Next
        Else

            e2 = clsEntities.ClonEntity(e)
            e2.IdContainer = eInsert.Id

            ' gcd.CCC[e2.gender].translate(e2, eInsert.p[0], eInsert.p[1])
            ' gcd.CCC[e2.gender].rotate(e2, eInsert.fParam[cadInsert.ipaRotacion])
            ' gcd.CCC[e2.gender].scale(e2, eInsert.fParam[cadInsert.ipaEscX], eInsert.fParam[cadInsert.ipaEscY])

            ' llamo recursivamente en caso que sea inserto
            cParts.Add(e2, e2.Id)  ' tambien guardo una referencia aqui
        End If

    Next

    Return cParts

End
